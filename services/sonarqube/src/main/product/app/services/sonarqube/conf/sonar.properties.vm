#set( $PRODUCT_DOMAIN = ${project.properties.getProperty('product.domain')} )
#set( $PRODUCT_SCHEME = ${project.properties.getProperty('product.scheme')} )
#set( $PACKAGE_APP = ${project.properties.getProperty('package.app')} )
#set( $PACKAGE_DATA = ${project.properties.getProperty('package.data')} )
#set( $PACKAGE_LOG = ${project.properties.getProperty('package.log')} )
#set( $PACKAGE_BIND = ${project.properties.getProperty('package.bind')} )
#set( $PACKAGE_PORT_HTTP = ${project.properties.getProperty('package.port.http')} )
#set( $PACKAGE_PORT_AJP = ${project.properties.getProperty('package.port.ajp')} )
#set( $PACKAGE_JAVA_OPTS = ${project.properties.getProperty('package.java.opts')} )
#set( $SONARQUBE_DB_USER = ${project.properties.getProperty('sonarqube.db.user')} )
#set( $SONARQUBE_DB_NAME = ${project.properties.getProperty('sonarqube.db.name')} )
#set( $BOT_USER = ${project.properties.getProperty('bot.user')} )
#set( $PROXY_HOST = ${project.properties.getProperty('proxy.host')} )
#set( $PROXY_PORT = ${project.properties.getProperty('proxy.port')} )
#set( $MYSQL_HOST = ${project.properties.getProperty('mysql.host')} )
#set( $MYSQL_PORT = ${project.properties.getProperty('mysql.port')} )
#set( $LDAP_HOST = ${project.properties.getProperty('ldap.host')} )
#set( $LDAP_PORT = ${project.properties.getProperty('ldap.port')} )
#set( $LDAP_USERS_DN = ${project.properties.getProperty('ldap.users.dn')} )
#set( $LDAP_USER_CLASS = ${project.properties.getProperty('ldap.user.class')} )
#set( $LDAP_USER_RDN_ATTR = ${project.properties.getProperty('ldap.user.rdn.attr')} )
#set( $LDAP_USER_DISPLAYNAME_ATTR = ${project.properties.getProperty('ldap.user.displayname.attr')} )
#set( $LDAP_USER_MAIL_ATTR = ${project.properties.getProperty('ldap.user.mail.attr')} )
#set( $LDAP_GROUPS_DN = ${project.properties.getProperty('ldap.groups.dn')} )
#set( $LDAP_GROUP_CLASS = ${project.properties.getProperty('ldap.group.class')} )
#set( $LDAP_GROUP_RDN_ATTR = ${project.properties.getProperty('ldap.group.rdn.attr')} )
#set( $LDAP_GROUP_MEMBER_ATTR = ${project.properties.getProperty('ldap.group.member.attr')} )
#set( $CAS_ENABLED = ${project.properties.getProperty('cas.enabled')} )
#set( $CAS_URL = ${project.properties.getProperty('cas.url')} )
#set( $CAS_ATTR_DISPLAYNAME = ${project.properties.getProperty('cas.attr.displayname')} )
#set( $CAS_ATTR_MAIL = ${project.properties.getProperty('cas.attr.mail')} )
#set( $CAS_ATTR_GROUPS = ${project.properties.getProperty('cas.attr.groups')} )
# SonarQube configuration

#--------------------------------------------------------------------------------------------------
# DATABASE

sonar.jdbc.username=${SONARQUBE_DB_USER}
sonar.jdbc.password=%{SONARQUBE_DB_PASSWORD}
sonar.jdbc.url=jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${SONARQUBE_DB_NAME}?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance&useSSL=false

#----- Connection pool settings
sonar.jdbc.maxActive=20
sonar.jdbc.maxIdle=5
sonar.jdbc.minIdle=2
sonar.jdbc.maxWait=5000
sonar.jdbc.minEvictableIdleTimeMillis=600000
sonar.jdbc.timeBetweenEvictionRunsMillis=30000


#--------------------------------------------------------------------------------------------------
# WEB SERVER

sonar.web.javaOpts=${PACKAGE_JAVA_OPTS} -XX:+HeapDumpOnOutOfMemoryError -Djava.net.preferIPv4Stack=true -Djava.awt.headless=true -Djavax.net.ssl.trustStore=${PACKAGE_APP}/conf/trust.jks
sonar.web.host=${PACKAGE_BIND}
sonar.web.context=/sonarqube
sonar.web.port=${PACKAGE_PORT_HTTP}


#--------------------------------------------------------------------------------------------------
# SSO AUTHENTICATION

#if( ${CAS_ENABLED} == "1" || ${CAS_ENABLED} == "true" )
sonar.web.sso.enable=true
#else
sonar.web.sso.enable=false
#end
sonar.web.sso.loginHeader=X-CAS-User
sonar.web.sso.nameHeader=CAS_${CAS_ATTR_DISPLAYNAME}
sonar.web.sso.emailHeader=CAS_${CAS_ATTR_MAIL}
sonar.web.sso.groupsHeader=CAS_${CAS_ATTR_GROUPS}


#--------------------------------------------------------------------------------------------------
# COMPUTE ENGINE

#sonar.ce.javaOpts=


#--------------------------------------------------------------------------------------------------
# ELASTICSEARCH

#sonar.search.javaOpts=
sonar.search.port=0


#--------------------------------------------------------------------------------------------------
# UPDATE CENTER

http.proxyHost=${PROXY_HOST}
http.proxyPort=${PROXY_PORT}


#--------------------------------------------------------------------------------------------------
# LOGGING

#sonar.log.level=INFO
#sonar.log.level.app=INFO
#sonar.log.level.web=INFO
#sonar.log.level.ce=INFO
#sonar.log.level.es=INFO
sonar.path.logs=${PACKAGE_LOG}


#--------------------------------------------------------------------------------------------------
# OTHERS

sonar.notifications.delay=60
sonar.path.data=${PACKAGE_DATA}/data
sonar.path.temp=${PACKAGE_DATA}/temp
sonar.telemetry.enable=false


#--------------------------------------------------------------------------------------------------
# SECURITY REALM

#if( ${CAS_ENABLED} == "1" || ${CAS_ENABLED} == "true" )
# CAS authentication is now handled by header-based SSO configuration above
#else
sonar.security.realm=LDAP
#end
sonar.forceAuthentication=true

# LDAP configuration
ldap.url=ldap://${LDAP_HOST}:${LDAP_PORT}
ldap.user.baseDn=${LDAP_USERS_DN}
ldap.user.request=(&(objectClass=${LDAP_USER_CLASS})(${LDAP_USER_RDN_ATTR}={login}))
ldap.user.realNameAttribute=${LDAP_USER_DISPLAYNAME_ATTR}
ldap.user.emailAttribute=${LDAP_USER_MAIL_ATTR}
ldap.group.baseDn=${LDAP_GROUPS_DN}
ldap.group.request=(&(objectClass=${LDAP_GROUP_CLASS})(${LDAP_GROUP_MEMBER_ATTR}={dn}))
ldap.group.idAttribute=${LDAP_GROUP_RDN_ATTR}
