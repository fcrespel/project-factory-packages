--
-- Project Factory Setup - SonarQube data
-- By Fabien CRESPEL <fabien@crespel.net>
--

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;


INSERT INTO `active_dashboards` (`id`, `dashboard_id`, `user_id`, `order_index`) VALUES
(1, 1, NULL, 1),
(2, 4, NULL, 2),
(3, 2, NULL, 3),
(4, 3, NULL, 4);

INSERT INTO `active_rules` (`id`, `profile_id`, `rule_id`, `failure_level`, `inheritance`, `created_at`, `updated_at`) VALUES
(1, 1, 605, 2, NULL, SYSDATE(), SYSDATE()),
(2, 1, 650, 2, NULL, SYSDATE(), SYSDATE()),
(3, 1, 613, 2, NULL, SYSDATE(), SYSDATE()),
(4, 1, 693, 2, NULL, SYSDATE(), SYSDATE()),
(5, 1, 645, 2, NULL, SYSDATE(), SYSDATE()),
(6, 1, 606, 2, NULL, SYSDATE(), SYSDATE()),
(7, 1, 686, 2, NULL, SYSDATE(), SYSDATE()),
(8, 1, 636, 1, NULL, SYSDATE(), SYSDATE()),
(9, 1, 634, 1, NULL, SYSDATE(), SYSDATE()),
(10, 1, 631, 2, NULL, SYSDATE(), SYSDATE()),
(11, 1, 632, 2, NULL, SYSDATE(), SYSDATE()),
(12, 1, 692, 1, NULL, SYSDATE(), SYSDATE()),
(13, 1, 628, 1, NULL, SYSDATE(), SYSDATE()),
(14, 1, 600, 0, NULL, SYSDATE(), SYSDATE()),
(15, 1, 625, 2, NULL, SYSDATE(), SYSDATE()),
(16, 1, 685, 2, NULL, SYSDATE(), SYSDATE()),
(17, 1, 691, 2, NULL, SYSDATE(), SYSDATE()),
(18, 1, 622, 3, NULL, SYSDATE(), SYSDATE()),
(19, 1, 679, 2, NULL, SYSDATE(), SYSDATE()),
(20, 1, 635, 2, NULL, SYSDATE(), SYSDATE()),
(21, 1, 694, 1, NULL, SYSDATE(), SYSDATE()),
(22, 1, 653, 2, NULL, SYSDATE(), SYSDATE()),
(23, 1, 687, 1, NULL, SYSDATE(), SYSDATE()),
(24, 1, 641, 2, NULL, SYSDATE(), SYSDATE()),
(25, 1, 678, 1, NULL, SYSDATE(), SYSDATE()),
(26, 1, 642, 2, NULL, SYSDATE(), SYSDATE()),
(27, 1, 599, 2, NULL, SYSDATE(), SYSDATE()),
(28, 1, 648, 2, NULL, SYSDATE(), SYSDATE()),
(29, 1, 646, 2, NULL, SYSDATE(), SYSDATE()),
(30, 1, 624, 2, NULL, SYSDATE(), SYSDATE()),
(31, 1, 658, 2, NULL, SYSDATE(), SYSDATE()),
(32, 1, 603, 2, NULL, SYSDATE(), SYSDATE()),
(33, 1, 683, 2, NULL, SYSDATE(), SYSDATE()),
(34, 1, 664, 0, NULL, SYSDATE(), SYSDATE()),
(35, 1, 663, 2, NULL, SYSDATE(), SYSDATE()),
(36, 1, 682, 2, NULL, SYSDATE(), SYSDATE()),
(37, 1, 684, 2, NULL, SYSDATE(), SYSDATE()),
(38, 1, 651, 2, NULL, SYSDATE(), SYSDATE()),
(39, 1, 688, 2, NULL, SYSDATE(), SYSDATE()),
(40, 1, 643, 2, NULL, SYSDATE(), SYSDATE()),
(41, 1, 627, 2, NULL, SYSDATE(), SYSDATE()),
(42, 1, 615, 2, NULL, SYSDATE(), SYSDATE()),
(43, 1, 661, 2, NULL, SYSDATE(), SYSDATE()),
(44, 1, 665, 1, NULL, SYSDATE(), SYSDATE()),
(45, 1, 623, 2, NULL, SYSDATE(), SYSDATE()),
(46, 1, 637, 3, NULL, SYSDATE(), SYSDATE()),
(47, 1, 654, 3, NULL, SYSDATE(), SYSDATE()),
(48, 1, 604, 2, NULL, SYSDATE(), SYSDATE()),
(49, 1, 647, 4, NULL, SYSDATE(), SYSDATE()),
(50, 1, 638, 3, NULL, SYSDATE(), SYSDATE()),
(51, 1, 652, 3, NULL, SYSDATE(), SYSDATE()),
(52, 1, 666, 3, NULL, SYSDATE(), SYSDATE()),
(53, 1, 616, 2, NULL, SYSDATE(), SYSDATE()),
(54, 1, 689, 2, NULL, SYSDATE(), SYSDATE()),
(55, 1, 608, 2, NULL, SYSDATE(), SYSDATE()),
(56, 1, 675, 3, NULL, SYSDATE(), SYSDATE()),
(57, 1, 680, 1, NULL, SYSDATE(), SYSDATE()),
(58, 1, 695, 2, NULL, SYSDATE(), SYSDATE()),
(59, 2, 611, 1, NULL, SYSDATE(), SYSDATE()),
(60, 2, 629, 1, NULL, SYSDATE(), SYSDATE()),
(61, 2, 599, 1, NULL, SYSDATE(), SYSDATE()),
(62, 2, 658, 1, NULL, SYSDATE(), SYSDATE()),
(63, 2, 601, 1, NULL, SYSDATE(), SYSDATE()),
(64, 2, 687, 1, NULL, SYSDATE(), SYSDATE()),
(65, 2, 690, 0, NULL, SYSDATE(), SYSDATE()),
(66, 2, 662, 1, NULL, SYSDATE(), SYSDATE()),
(67, 2, 633, 1, NULL, SYSDATE(), SYSDATE()),
(68, 2, 681, 1, NULL, SYSDATE(), SYSDATE()),
(69, 2, 655, 1, NULL, SYSDATE(), SYSDATE()),
(70, 2, 657, 1, NULL, SYSDATE(), SYSDATE()),
(71, 2, 660, 2, NULL, SYSDATE(), SYSDATE()),
(72, 2, 643, 2, NULL, SYSDATE(), SYSDATE()),
(73, 2, 656, 1, NULL, SYSDATE(), SYSDATE()),
(74, 2, 614, 2, NULL, SYSDATE(), SYSDATE()),
(75, 2, 612, 1, NULL, SYSDATE(), SYSDATE()),
(76, 2, 630, 1, NULL, SYSDATE(), SYSDATE()),
(77, 2, 622, 3, NULL, SYSDATE(), SYSDATE()),
(78, 3, 103, 2, NULL, SYSDATE(), SYSDATE()),
(79, 3, 91, 2, NULL, SYSDATE(), SYSDATE()),
(80, 3, 46, 3, NULL, SYSDATE(), SYSDATE()),
(81, 3, 110, 2, NULL, SYSDATE(), SYSDATE()),
(82, 3, 57, 2, NULL, SYSDATE(), SYSDATE()),
(83, 3, 58, 3, NULL, SYSDATE(), SYSDATE()),
(84, 3, 70, 1, NULL, SYSDATE(), SYSDATE()),
(85, 3, 96, 1, NULL, SYSDATE(), SYSDATE()),
(86, 3, 104, 2, NULL, SYSDATE(), SYSDATE()),
(87, 3, 48, 2, NULL, SYSDATE(), SYSDATE()),
(88, 3, 105, 2, NULL, SYSDATE(), SYSDATE()),
(89, 3, 43, 2, NULL, SYSDATE(), SYSDATE()),
(90, 3, 97, 2, NULL, SYSDATE(), SYSDATE()),
(91, 3, 74, 2, NULL, SYSDATE(), SYSDATE()),
(92, 3, 86, 4, NULL, SYSDATE(), SYSDATE()),
(93, 3, 27, 2, NULL, SYSDATE(), SYSDATE()),
(94, 3, 101, 2, NULL, SYSDATE(), SYSDATE()),
(95, 3, 75, 2, NULL, SYSDATE(), SYSDATE()),
(96, 3, 35, 3, NULL, SYSDATE(), SYSDATE()),
(97, 3, 29, 2, NULL, SYSDATE(), SYSDATE()),
(98, 3, 44, 2, NULL, SYSDATE(), SYSDATE()),
(99, 3, 79, 2, NULL, SYSDATE(), SYSDATE()),
(100, 3, 68, 2, NULL, SYSDATE(), SYSDATE()),
(101, 3, 36, 2, NULL, SYSDATE(), SYSDATE()),
(102, 3, 95, 3, NULL, SYSDATE(), SYSDATE()),
(103, 3, 33, 3, NULL, SYSDATE(), SYSDATE()),
(104, 3, 94, 3, NULL, SYSDATE(), SYSDATE()),
(105, 3, 9, 2, NULL, SYSDATE(), SYSDATE()),
(106, 3, 89, 0, NULL, SYSDATE(), SYSDATE()),
(107, 3, 49, 2, NULL, SYSDATE(), SYSDATE()),
(108, 3, 56, 1, NULL, SYSDATE(), SYSDATE()),
(109, 3, 69, 1, NULL, SYSDATE(), SYSDATE()),
(110, 3, 53, 0, NULL, SYSDATE(), SYSDATE()),
(111, 3, 37, 3, NULL, SYSDATE(), SYSDATE()),
(112, 3, 72, 2, NULL, SYSDATE(), SYSDATE()),
(113, 3, 42, 2, NULL, SYSDATE(), SYSDATE()),
(114, 3, 30, 2, NULL, SYSDATE(), SYSDATE()),
(115, 3, 80, 2, NULL, SYSDATE(), SYSDATE()),
(116, 3, 88, 2, NULL, SYSDATE(), SYSDATE()),
(117, 3, 99, 2, NULL, SYSDATE(), SYSDATE()),
(118, 3, 52, 1, NULL, SYSDATE(), SYSDATE()),
(119, 3, 108, 2, NULL, SYSDATE(), SYSDATE()),
(120, 3, 98, 2, NULL, SYSDATE(), SYSDATE()),
(121, 3, 100, 0, NULL, SYSDATE(), SYSDATE()),
(122, 3, 107, 2, NULL, SYSDATE(), SYSDATE()),
(123, 3, 50, 1, NULL, SYSDATE(), SYSDATE()),
(124, 3, 109, 2, NULL, SYSDATE(), SYSDATE()),
(125, 3, 82, 1, NULL, SYSDATE(), SYSDATE()),
(126, 3, 76, 1, NULL, SYSDATE(), SYSDATE()),
(127, 3, 31, 3, NULL, SYSDATE(), SYSDATE()),
(128, 3, 4, 2, NULL, SYSDATE(), SYSDATE()),
(129, 3, 6, 3, NULL, SYSDATE(), SYSDATE()),
(130, 3, 81, 1, NULL, SYSDATE(), SYSDATE()),
(131, 3, 90, 2, NULL, SYSDATE(), SYSDATE()),
(132, 3, 73, 3, NULL, SYSDATE(), SYSDATE()),
(133, 3, 45, 2, NULL, SYSDATE(), SYSDATE()),
(134, 3, 12, 3, NULL, SYSDATE(), SYSDATE()),
(135, 3, 28, 2, NULL, SYSDATE(), SYSDATE()),
(136, 3, 41, 2, NULL, SYSDATE(), SYSDATE()),
(137, 3, 7, 4, NULL, SYSDATE(), SYSDATE()),
(138, 3, 71, 2, NULL, SYSDATE(), SYSDATE()),
(139, 3, 20, 4, NULL, SYSDATE(), SYSDATE()),
(140, 3, 51, 3, NULL, SYSDATE(), SYSDATE()),
(141, 3, 19, 3, NULL, SYSDATE(), SYSDATE()),
(142, 3, 2, 3, NULL, SYSDATE(), SYSDATE()),
(143, 3, 32, 3, NULL, SYSDATE(), SYSDATE()),
(144, 3, 85, 4, NULL, SYSDATE(), SYSDATE()),
(145, 3, 15, 3, NULL, SYSDATE(), SYSDATE()),
(146, 3, 83, 2, NULL, SYSDATE(), SYSDATE()),
(147, 3, 16, 2, NULL, SYSDATE(), SYSDATE()),
(148, 3, 55, 2, NULL, SYSDATE(), SYSDATE()),
(149, 3, 93, 3, NULL, SYSDATE(), SYSDATE()),
(150, 3, 24, 3, NULL, SYSDATE(), SYSDATE()),
(151, 3, 64, 3, NULL, SYSDATE(), SYSDATE()),
(152, 3, 59, 3, NULL, SYSDATE(), SYSDATE()),
(153, 4, 899, 1, NULL, SYSDATE(), SYSDATE()),
(154, 4, 896, 1, NULL, SYSDATE(), SYSDATE()),
(155, 4, 898, 1, NULL, SYSDATE(), SYSDATE()),
(156, 4, 897, 2, NULL, SYSDATE(), SYSDATE()),
(157, 5, 566, 2, NULL, SYSDATE(), SYSDATE()),
(158, 5, 567, 2, NULL, SYSDATE(), SYSDATE()),
(159, 5, 594, 2, NULL, SYSDATE(), SYSDATE()),
(160, 5, 552, 2, NULL, SYSDATE(), SYSDATE()),
(161, 5, 588, 2, NULL, SYSDATE(), SYSDATE()),
(162, 5, 568, 2, NULL, SYSDATE(), SYSDATE()),
(163, 5, 557, 2, NULL, SYSDATE(), SYSDATE()),
(164, 5, 576, 2, NULL, SYSDATE(), SYSDATE()),
(165, 5, 564, 2, NULL, SYSDATE(), SYSDATE()),
(166, 5, 548, 2, NULL, SYSDATE(), SYSDATE()),
(167, 5, 560, 3, NULL, SYSDATE(), SYSDATE()),
(168, 5, 592, 2, NULL, SYSDATE(), SYSDATE()),
(169, 5, 561, 2, NULL, SYSDATE(), SYSDATE()),
(170, 5, 550, 2, NULL, SYSDATE(), SYSDATE()),
(171, 6, 330, 3, NULL, SYSDATE(), SYSDATE()),
(172, 6, 332, 2, NULL, SYSDATE(), SYSDATE()),
(173, 6, 331, 2, NULL, SYSDATE(), SYSDATE()),
(174, 6, 117, 2, NULL, SYSDATE(), SYSDATE()),
(175, 6, 333, 4, NULL, SYSDATE(), SYSDATE()),
(176, 6, 118, 1, NULL, SYSDATE(), SYSDATE()),
(177, 6, 334, 3, NULL, SYSDATE(), SYSDATE()),
(178, 6, 119, 2, NULL, SYSDATE(), SYSDATE()),
(179, 6, 120, 3, NULL, SYSDATE(), SYSDATE()),
(180, 6, 335, 3, NULL, SYSDATE(), SYSDATE()),
(181, 6, 336, 2, NULL, SYSDATE(), SYSDATE()),
(182, 6, 121, 3, NULL, SYSDATE(), SYSDATE()),
(183, 6, 337, 3, NULL, SYSDATE(), SYSDATE()),
(184, 6, 339, 3, NULL, SYSDATE(), SYSDATE()),
(185, 6, 123, 2, NULL, SYSDATE(), SYSDATE()),
(186, 6, 340, 2, NULL, SYSDATE(), SYSDATE()),
(187, 6, 124, 3, NULL, SYSDATE(), SYSDATE()),
(188, 6, 341, 3, NULL, SYSDATE(), SYSDATE()),
(189, 6, 342, 2, NULL, SYSDATE(), SYSDATE()),
(190, 6, 125, 2, NULL, SYSDATE(), SYSDATE()),
(191, 6, 345, 3, NULL, SYSDATE(), SYSDATE()),
(192, 6, 126, 3, NULL, SYSDATE(), SYSDATE()),
(193, 6, 344, 3, NULL, SYSDATE(), SYSDATE()),
(194, 6, 346, 2, NULL, SYSDATE(), SYSDATE()),
(195, 6, 128, 3, NULL, SYSDATE(), SYSDATE()),
(196, 6, 127, 3, NULL, SYSDATE(), SYSDATE()),
(197, 6, 130, 3, NULL, SYSDATE(), SYSDATE()),
(198, 6, 129, 2, NULL, SYSDATE(), SYSDATE()),
(199, 6, 131, 3, NULL, SYSDATE(), SYSDATE()),
(200, 6, 133, 3, NULL, SYSDATE(), SYSDATE()),
(201, 6, 348, 3, NULL, SYSDATE(), SYSDATE()),
(202, 6, 347, 2, NULL, SYSDATE(), SYSDATE()),
(203, 6, 349, 3, NULL, SYSDATE(), SYSDATE()),
(204, 6, 134, 2, NULL, SYSDATE(), SYSDATE()),
(205, 6, 135, 3, NULL, SYSDATE(), SYSDATE()),
(206, 6, 136, 3, NULL, SYSDATE(), SYSDATE()),
(207, 6, 350, 3, NULL, SYSDATE(), SYSDATE()),
(208, 6, 138, 1, NULL, SYSDATE(), SYSDATE()),
(209, 6, 139, 3, NULL, SYSDATE(), SYSDATE()),
(210, 6, 140, 2, NULL, SYSDATE(), SYSDATE()),
(211, 6, 141, 2, NULL, SYSDATE(), SYSDATE()),
(212, 6, 351, 2, NULL, SYSDATE(), SYSDATE()),
(213, 6, 352, 2, NULL, SYSDATE(), SYSDATE()),
(214, 6, 142, 0, NULL, SYSDATE(), SYSDATE()),
(215, 6, 143, 3, NULL, SYSDATE(), SYSDATE()),
(216, 6, 353, 2, NULL, SYSDATE(), SYSDATE()),
(217, 6, 144, 2, NULL, SYSDATE(), SYSDATE()),
(218, 6, 354, 3, NULL, SYSDATE(), SYSDATE()),
(219, 6, 145, 2, NULL, SYSDATE(), SYSDATE()),
(220, 6, 355, 2, NULL, SYSDATE(), SYSDATE()),
(221, 6, 356, 2, NULL, SYSDATE(), SYSDATE()),
(222, 6, 359, 2, NULL, SYSDATE(), SYSDATE()),
(223, 6, 358, 3, NULL, SYSDATE(), SYSDATE()),
(224, 6, 146, 3, NULL, SYSDATE(), SYSDATE()),
(225, 6, 147, 3, NULL, SYSDATE(), SYSDATE()),
(226, 6, 148, 2, NULL, SYSDATE(), SYSDATE()),
(227, 6, 149, 3, NULL, SYSDATE(), SYSDATE()),
(228, 6, 362, 2, NULL, SYSDATE(), SYSDATE()),
(229, 6, 361, 3, NULL, SYSDATE(), SYSDATE()),
(230, 6, 363, 2, NULL, SYSDATE(), SYSDATE()),
(231, 6, 150, 1, NULL, SYSDATE(), SYSDATE()),
(232, 6, 151, 3, NULL, SYSDATE(), SYSDATE()),
(233, 6, 365, 2, NULL, SYSDATE(), SYSDATE()),
(234, 6, 366, 4, NULL, SYSDATE(), SYSDATE()),
(235, 6, 152, 2, NULL, SYSDATE(), SYSDATE()),
(236, 6, 368, 3, NULL, SYSDATE(), SYSDATE()),
(237, 6, 367, 2, NULL, SYSDATE(), SYSDATE()),
(238, 6, 370, 2, NULL, SYSDATE(), SYSDATE()),
(239, 6, 371, 2, NULL, SYSDATE(), SYSDATE()),
(240, 6, 153, 3, NULL, SYSDATE(), SYSDATE()),
(241, 6, 154, 2, NULL, SYSDATE(), SYSDATE()),
(242, 6, 372, 3, NULL, SYSDATE(), SYSDATE()),
(243, 6, 155, 3, NULL, SYSDATE(), SYSDATE()),
(244, 6, 156, 2, NULL, SYSDATE(), SYSDATE()),
(245, 6, 373, 2, NULL, SYSDATE(), SYSDATE()),
(246, 6, 374, 3, NULL, SYSDATE(), SYSDATE()),
(247, 6, 157, 2, NULL, SYSDATE(), SYSDATE()),
(248, 6, 159, 3, NULL, SYSDATE(), SYSDATE()),
(249, 6, 375, 3, NULL, SYSDATE(), SYSDATE()),
(250, 6, 158, 2, NULL, SYSDATE(), SYSDATE()),
(251, 6, 376, 1, NULL, SYSDATE(), SYSDATE()),
(252, 6, 161, 3, NULL, SYSDATE(), SYSDATE()),
(253, 6, 160, 2, NULL, SYSDATE(), SYSDATE()),
(254, 6, 163, 3, NULL, SYSDATE(), SYSDATE()),
(255, 6, 378, 3, NULL, SYSDATE(), SYSDATE()),
(256, 6, 164, 1, NULL, SYSDATE(), SYSDATE()),
(257, 6, 379, 2, NULL, SYSDATE(), SYSDATE()),
(258, 6, 380, 4, NULL, SYSDATE(), SYSDATE()),
(259, 6, 382, 3, NULL, SYSDATE(), SYSDATE()),
(260, 6, 165, 2, NULL, SYSDATE(), SYSDATE()),
(261, 6, 381, 3, NULL, SYSDATE(), SYSDATE()),
(262, 6, 383, 3, NULL, SYSDATE(), SYSDATE()),
(263, 6, 166, 3, NULL, SYSDATE(), SYSDATE()),
(264, 6, 384, 2, NULL, SYSDATE(), SYSDATE()),
(265, 6, 386, 3, NULL, SYSDATE(), SYSDATE()),
(266, 6, 167, 3, NULL, SYSDATE(), SYSDATE()),
(267, 6, 387, 3, NULL, SYSDATE(), SYSDATE()),
(268, 6, 168, 2, NULL, SYSDATE(), SYSDATE()),
(269, 6, 388, 2, NULL, SYSDATE(), SYSDATE()),
(270, 6, 169, 1, NULL, SYSDATE(), SYSDATE()),
(271, 6, 389, 2, NULL, SYSDATE(), SYSDATE()),
(272, 6, 391, 2, NULL, SYSDATE(), SYSDATE()),
(273, 6, 171, 3, NULL, SYSDATE(), SYSDATE()),
(274, 6, 392, 3, NULL, SYSDATE(), SYSDATE()),
(275, 6, 395, 3, NULL, SYSDATE(), SYSDATE()),
(276, 6, 172, 3, NULL, SYSDATE(), SYSDATE()),
(277, 6, 393, 2, NULL, SYSDATE(), SYSDATE()),
(278, 6, 396, 3, NULL, SYSDATE(), SYSDATE()),
(279, 6, 173, 3, NULL, SYSDATE(), SYSDATE()),
(280, 6, 398, 2, NULL, SYSDATE(), SYSDATE()),
(281, 6, 400, 2, NULL, SYSDATE(), SYSDATE()),
(282, 6, 401, 4, NULL, SYSDATE(), SYSDATE()),
(283, 6, 174, 2, NULL, SYSDATE(), SYSDATE()),
(284, 6, 402, 0, NULL, SYSDATE(), SYSDATE()),
(285, 6, 175, 3, NULL, SYSDATE(), SYSDATE()),
(286, 6, 403, 3, NULL, SYSDATE(), SYSDATE()),
(287, 6, 405, 2, NULL, SYSDATE(), SYSDATE()),
(288, 6, 406, 3, NULL, SYSDATE(), SYSDATE()),
(289, 6, 177, 3, NULL, SYSDATE(), SYSDATE()),
(290, 6, 176, 2, NULL, SYSDATE(), SYSDATE()),
(291, 6, 407, 2, NULL, SYSDATE(), SYSDATE()),
(292, 6, 178, 1, NULL, SYSDATE(), SYSDATE()),
(293, 6, 408, 3, NULL, SYSDATE(), SYSDATE()),
(294, 6, 409, 3, NULL, SYSDATE(), SYSDATE()),
(295, 6, 410, 2, NULL, SYSDATE(), SYSDATE()),
(296, 6, 411, 3, NULL, SYSDATE(), SYSDATE()),
(297, 6, 179, 2, NULL, SYSDATE(), SYSDATE()),
(298, 6, 180, 2, NULL, SYSDATE(), SYSDATE()),
(299, 6, 181, 3, NULL, SYSDATE(), SYSDATE()),
(300, 6, 183, 3, NULL, SYSDATE(), SYSDATE()),
(301, 6, 182, 2, NULL, SYSDATE(), SYSDATE()),
(302, 6, 412, 3, NULL, SYSDATE(), SYSDATE()),
(303, 6, 185, 0, NULL, SYSDATE(), SYSDATE()),
(304, 6, 186, 3, NULL, SYSDATE(), SYSDATE()),
(305, 6, 188, 3, NULL, SYSDATE(), SYSDATE()),
(306, 6, 187, 2, NULL, SYSDATE(), SYSDATE()),
(307, 6, 189, 2, NULL, SYSDATE(), SYSDATE()),
(308, 6, 191, 3, NULL, SYSDATE(), SYSDATE()),
(309, 6, 190, 2, NULL, SYSDATE(), SYSDATE()),
(310, 6, 193, 2, NULL, SYSDATE(), SYSDATE()),
(311, 6, 192, 2, NULL, SYSDATE(), SYSDATE()),
(312, 6, 194, 3, NULL, SYSDATE(), SYSDATE()),
(313, 6, 414, 3, NULL, SYSDATE(), SYSDATE()),
(314, 6, 196, 3, NULL, SYSDATE(), SYSDATE()),
(315, 6, 195, 3, NULL, SYSDATE(), SYSDATE()),
(316, 6, 415, 3, NULL, SYSDATE(), SYSDATE()),
(317, 6, 197, 3, NULL, SYSDATE(), SYSDATE()),
(318, 6, 416, 4, NULL, SYSDATE(), SYSDATE()),
(319, 6, 198, 3, NULL, SYSDATE(), SYSDATE()),
(320, 6, 418, 3, NULL, SYSDATE(), SYSDATE()),
(321, 6, 417, 3, NULL, SYSDATE(), SYSDATE()),
(322, 6, 199, 2, NULL, SYSDATE(), SYSDATE()),
(323, 6, 419, 3, NULL, SYSDATE(), SYSDATE()),
(324, 6, 420, 3, NULL, SYSDATE(), SYSDATE()),
(325, 6, 202, 3, NULL, SYSDATE(), SYSDATE()),
(326, 6, 201, 3, NULL, SYSDATE(), SYSDATE()),
(327, 6, 422, 3, NULL, SYSDATE(), SYSDATE()),
(328, 6, 204, 3, NULL, SYSDATE(), SYSDATE()),
(329, 6, 203, 2, NULL, SYSDATE(), SYSDATE()),
(330, 6, 423, 2, NULL, SYSDATE(), SYSDATE()),
(331, 6, 208, 3, NULL, SYSDATE(), SYSDATE()),
(332, 6, 207, 3, NULL, SYSDATE(), SYSDATE()),
(333, 6, 205, 3, NULL, SYSDATE(), SYSDATE()),
(334, 6, 425, 2, NULL, SYSDATE(), SYSDATE()),
(335, 6, 209, 2, NULL, SYSDATE(), SYSDATE()),
(336, 6, 210, 3, NULL, SYSDATE(), SYSDATE()),
(337, 6, 426, 2, NULL, SYSDATE(), SYSDATE()),
(338, 6, 427, 2, NULL, SYSDATE(), SYSDATE()),
(339, 6, 211, 3, NULL, SYSDATE(), SYSDATE()),
(340, 6, 213, 3, NULL, SYSDATE(), SYSDATE()),
(341, 6, 212, 3, NULL, SYSDATE(), SYSDATE()),
(342, 6, 214, 3, NULL, SYSDATE(), SYSDATE()),
(343, 6, 215, 3, NULL, SYSDATE(), SYSDATE()),
(344, 6, 428, 3, NULL, SYSDATE(), SYSDATE()),
(345, 6, 429, 2, NULL, SYSDATE(), SYSDATE()),
(346, 6, 216, 2, NULL, SYSDATE(), SYSDATE()),
(347, 6, 218, 3, NULL, SYSDATE(), SYSDATE()),
(348, 6, 217, 3, NULL, SYSDATE(), SYSDATE()),
(349, 6, 432, 3, NULL, SYSDATE(), SYSDATE()),
(350, 6, 431, 2, NULL, SYSDATE(), SYSDATE()),
(351, 6, 430, 2, NULL, SYSDATE(), SYSDATE()),
(352, 6, 220, 3, NULL, SYSDATE(), SYSDATE()),
(353, 6, 434, 2, NULL, SYSDATE(), SYSDATE()),
(354, 6, 433, 1, NULL, SYSDATE(), SYSDATE()),
(355, 6, 435, 2, NULL, SYSDATE(), SYSDATE()),
(356, 6, 221, 3, NULL, SYSDATE(), SYSDATE()),
(357, 6, 223, 4, NULL, SYSDATE(), SYSDATE()),
(358, 6, 222, 2, NULL, SYSDATE(), SYSDATE()),
(359, 6, 225, 2, NULL, SYSDATE(), SYSDATE()),
(360, 6, 224, 3, NULL, SYSDATE(), SYSDATE()),
(361, 6, 436, 2, NULL, SYSDATE(), SYSDATE()),
(362, 6, 437, 3, NULL, SYSDATE(), SYSDATE()),
(363, 6, 226, 3, NULL, SYSDATE(), SYSDATE()),
(364, 6, 438, 2, NULL, SYSDATE(), SYSDATE()),
(365, 6, 439, 3, NULL, SYSDATE(), SYSDATE()),
(366, 6, 228, 3, NULL, SYSDATE(), SYSDATE()),
(367, 6, 440, 1, NULL, SYSDATE(), SYSDATE()),
(368, 6, 229, 2, NULL, SYSDATE(), SYSDATE()),
(369, 6, 441, 3, NULL, SYSDATE(), SYSDATE()),
(370, 6, 230, 3, NULL, SYSDATE(), SYSDATE()),
(371, 6, 231, 3, NULL, SYSDATE(), SYSDATE()),
(372, 6, 442, 2, NULL, SYSDATE(), SYSDATE()),
(373, 6, 443, 3, NULL, SYSDATE(), SYSDATE()),
(374, 6, 232, 3, NULL, SYSDATE(), SYSDATE()),
(375, 6, 444, 3, NULL, SYSDATE(), SYSDATE()),
(376, 6, 234, 2, NULL, SYSDATE(), SYSDATE()),
(377, 6, 445, 3, NULL, SYSDATE(), SYSDATE()),
(378, 6, 446, 2, NULL, SYSDATE(), SYSDATE()),
(379, 6, 447, 2, NULL, SYSDATE(), SYSDATE()),
(380, 6, 235, 2, NULL, SYSDATE(), SYSDATE()),
(381, 6, 236, 3, NULL, SYSDATE(), SYSDATE()),
(382, 6, 237, 2, NULL, SYSDATE(), SYSDATE()),
(383, 6, 449, 3, NULL, SYSDATE(), SYSDATE()),
(384, 6, 238, 3, NULL, SYSDATE(), SYSDATE()),
(385, 6, 448, 2, NULL, SYSDATE(), SYSDATE()),
(386, 6, 450, 2, NULL, SYSDATE(), SYSDATE()),
(387, 6, 451, 3, NULL, SYSDATE(), SYSDATE()),
(388, 6, 453, 3, NULL, SYSDATE(), SYSDATE()),
(389, 6, 452, 2, NULL, SYSDATE(), SYSDATE()),
(390, 6, 241, 2, NULL, SYSDATE(), SYSDATE()),
(391, 6, 455, 4, NULL, SYSDATE(), SYSDATE()),
(392, 6, 454, 2, NULL, SYSDATE(), SYSDATE()),
(393, 6, 456, 1, NULL, SYSDATE(), SYSDATE()),
(394, 6, 242, 2, NULL, SYSDATE(), SYSDATE()),
(395, 6, 243, 2, NULL, SYSDATE(), SYSDATE()),
(396, 6, 457, 4, NULL, SYSDATE(), SYSDATE()),
(397, 6, 244, 3, NULL, SYSDATE(), SYSDATE()),
(398, 6, 245, 2, NULL, SYSDATE(), SYSDATE()),
(399, 6, 246, 3, NULL, SYSDATE(), SYSDATE()),
(400, 6, 247, 2, NULL, SYSDATE(), SYSDATE()),
(401, 6, 248, 2, NULL, SYSDATE(), SYSDATE()),
(402, 6, 459, 2, NULL, SYSDATE(), SYSDATE()),
(403, 6, 250, 2, NULL, SYSDATE(), SYSDATE()),
(404, 6, 249, 3, NULL, SYSDATE(), SYSDATE()),
(405, 6, 461, 3, NULL, SYSDATE(), SYSDATE()),
(406, 6, 460, 2, NULL, SYSDATE(), SYSDATE()),
(407, 6, 251, 1, NULL, SYSDATE(), SYSDATE()),
(408, 6, 462, 2, NULL, SYSDATE(), SYSDATE()),
(409, 6, 252, 3, NULL, SYSDATE(), SYSDATE()),
(410, 6, 464, 2, NULL, SYSDATE(), SYSDATE()),
(411, 6, 463, 3, NULL, SYSDATE(), SYSDATE()),
(412, 6, 465, 3, NULL, SYSDATE(), SYSDATE()),
(413, 6, 254, 1, NULL, SYSDATE(), SYSDATE()),
(414, 6, 253, 2, NULL, SYSDATE(), SYSDATE()),
(415, 6, 255, 1, NULL, SYSDATE(), SYSDATE()),
(416, 6, 469, 3, NULL, SYSDATE(), SYSDATE()),
(417, 6, 468, 3, NULL, SYSDATE(), SYSDATE()),
(418, 6, 466, 3, NULL, SYSDATE(), SYSDATE()),
(419, 6, 256, 1, NULL, SYSDATE(), SYSDATE()),
(420, 6, 470, 2, NULL, SYSDATE(), SYSDATE()),
(421, 6, 257, 2, NULL, SYSDATE(), SYSDATE()),
(422, 6, 471, 3, NULL, SYSDATE(), SYSDATE()),
(423, 6, 472, 2, NULL, SYSDATE(), SYSDATE()),
(424, 6, 259, 3, NULL, SYSDATE(), SYSDATE()),
(425, 6, 258, 2, NULL, SYSDATE(), SYSDATE()),
(426, 6, 260, 2, NULL, SYSDATE(), SYSDATE()),
(427, 6, 473, 2, NULL, SYSDATE(), SYSDATE()),
(428, 6, 261, 3, NULL, SYSDATE(), SYSDATE()),
(429, 6, 262, 3, NULL, SYSDATE(), SYSDATE()),
(430, 6, 263, 2, NULL, SYSDATE(), SYSDATE()),
(431, 6, 265, 3, NULL, SYSDATE(), SYSDATE()),
(432, 6, 266, 2, NULL, SYSDATE(), SYSDATE()),
(433, 6, 474, 3, NULL, SYSDATE(), SYSDATE()),
(434, 6, 475, 4, NULL, SYSDATE(), SYSDATE()),
(435, 6, 476, 3, NULL, SYSDATE(), SYSDATE()),
(436, 6, 267, 2, NULL, SYSDATE(), SYSDATE()),
(437, 6, 270, 3, NULL, SYSDATE(), SYSDATE()),
(438, 6, 269, 3, NULL, SYSDATE(), SYSDATE()),
(439, 6, 268, 3, NULL, SYSDATE(), SYSDATE()),
(440, 6, 477, 2, NULL, SYSDATE(), SYSDATE()),
(441, 6, 271, 2, NULL, SYSDATE(), SYSDATE()),
(442, 6, 478, 2, NULL, SYSDATE(), SYSDATE()),
(443, 6, 273, 3, NULL, SYSDATE(), SYSDATE()),
(444, 6, 272, 3, NULL, SYSDATE(), SYSDATE()),
(445, 6, 274, 3, NULL, SYSDATE(), SYSDATE()),
(446, 6, 479, 3, NULL, SYSDATE(), SYSDATE()),
(447, 6, 276, 1, NULL, SYSDATE(), SYSDATE()),
(448, 6, 275, 2, NULL, SYSDATE(), SYSDATE()),
(449, 6, 277, 3, NULL, SYSDATE(), SYSDATE()),
(450, 6, 480, 2, NULL, SYSDATE(), SYSDATE()),
(451, 6, 481, 3, NULL, SYSDATE(), SYSDATE()),
(452, 6, 279, 2, NULL, SYSDATE(), SYSDATE()),
(453, 6, 278, 3, NULL, SYSDATE(), SYSDATE()),
(454, 6, 280, 3, NULL, SYSDATE(), SYSDATE()),
(455, 6, 281, 3, NULL, SYSDATE(), SYSDATE()),
(456, 6, 482, 2, NULL, SYSDATE(), SYSDATE()),
(457, 6, 282, 2, NULL, SYSDATE(), SYSDATE()),
(458, 6, 483, 2, NULL, SYSDATE(), SYSDATE()),
(459, 6, 485, 2, NULL, SYSDATE(), SYSDATE()),
(460, 6, 283, 2, NULL, SYSDATE(), SYSDATE()),
(461, 6, 486, 3, NULL, SYSDATE(), SYSDATE()),
(462, 6, 487, 2, NULL, SYSDATE(), SYSDATE()),
(463, 6, 488, 3, NULL, SYSDATE(), SYSDATE()),
(464, 6, 285, 2, NULL, SYSDATE(), SYSDATE()),
(465, 6, 286, 3, NULL, SYSDATE(), SYSDATE()),
(466, 6, 288, 3, NULL, SYSDATE(), SYSDATE()),
(467, 6, 287, 2, NULL, SYSDATE(), SYSDATE()),
(468, 6, 489, 2, NULL, SYSDATE(), SYSDATE()),
(469, 6, 289, 1, NULL, SYSDATE(), SYSDATE()),
(470, 6, 290, 3, NULL, SYSDATE(), SYSDATE()),
(471, 6, 490, 2, NULL, SYSDATE(), SYSDATE()),
(472, 6, 491, 3, NULL, SYSDATE(), SYSDATE()),
(473, 6, 291, 3, NULL, SYSDATE(), SYSDATE()),
(474, 6, 493, 3, NULL, SYSDATE(), SYSDATE()),
(475, 6, 494, 3, NULL, SYSDATE(), SYSDATE()),
(476, 6, 292, 3, NULL, SYSDATE(), SYSDATE()),
(477, 6, 294, 3, NULL, SYSDATE(), SYSDATE()),
(478, 6, 293, 3, NULL, SYSDATE(), SYSDATE()),
(479, 6, 296, 3, NULL, SYSDATE(), SYSDATE()),
(480, 6, 495, 3, NULL, SYSDATE(), SYSDATE()),
(481, 6, 496, 0, NULL, SYSDATE(), SYSDATE()),
(482, 6, 297, 3, NULL, SYSDATE(), SYSDATE()),
(483, 6, 497, 2, NULL, SYSDATE(), SYSDATE()),
(484, 6, 498, 2, NULL, SYSDATE(), SYSDATE()),
(485, 6, 298, 3, NULL, SYSDATE(), SYSDATE()),
(486, 6, 499, 2, NULL, SYSDATE(), SYSDATE()),
(487, 6, 500, 3, NULL, SYSDATE(), SYSDATE()),
(488, 6, 501, 2, NULL, SYSDATE(), SYSDATE()),
(489, 6, 502, 3, NULL, SYSDATE(), SYSDATE()),
(490, 6, 300, 3, NULL, SYSDATE(), SYSDATE()),
(491, 6, 301, 3, NULL, SYSDATE(), SYSDATE()),
(492, 6, 503, 2, NULL, SYSDATE(), SYSDATE()),
(493, 6, 504, 3, NULL, SYSDATE(), SYSDATE()),
(494, 6, 302, 3, NULL, SYSDATE(), SYSDATE()),
(495, 6, 505, 3, NULL, SYSDATE(), SYSDATE()),
(496, 6, 303, 2, NULL, SYSDATE(), SYSDATE()),
(497, 6, 506, 2, NULL, SYSDATE(), SYSDATE()),
(498, 6, 507, 3, NULL, SYSDATE(), SYSDATE()),
(499, 6, 508, 3, NULL, SYSDATE(), SYSDATE()),
(500, 6, 509, 3, NULL, SYSDATE(), SYSDATE()),
(501, 6, 510, 3, NULL, SYSDATE(), SYSDATE()),
(502, 6, 304, 3, NULL, SYSDATE(), SYSDATE()),
(503, 6, 511, 3, NULL, SYSDATE(), SYSDATE()),
(504, 6, 513, 3, NULL, SYSDATE(), SYSDATE()),
(505, 6, 305, 3, NULL, SYSDATE(), SYSDATE()),
(506, 6, 306, 3, NULL, SYSDATE(), SYSDATE()),
(507, 6, 307, 3, NULL, SYSDATE(), SYSDATE()),
(508, 6, 514, 4, NULL, SYSDATE(), SYSDATE()),
(509, 6, 308, 3, NULL, SYSDATE(), SYSDATE()),
(510, 6, 516, 2, NULL, SYSDATE(), SYSDATE()),
(511, 6, 515, 2, NULL, SYSDATE(), SYSDATE()),
(512, 6, 517, 1, NULL, SYSDATE(), SYSDATE()),
(513, 6, 309, 2, NULL, SYSDATE(), SYSDATE()),
(514, 6, 310, 3, NULL, SYSDATE(), SYSDATE()),
(515, 6, 518, 2, NULL, SYSDATE(), SYSDATE()),
(516, 6, 521, 3, NULL, SYSDATE(), SYSDATE()),
(517, 6, 520, 3, NULL, SYSDATE(), SYSDATE()),
(518, 6, 519, 2, NULL, SYSDATE(), SYSDATE()),
(519, 6, 311, 2, NULL, SYSDATE(), SYSDATE()),
(520, 6, 312, 3, NULL, SYSDATE(), SYSDATE()),
(521, 6, 313, 0, NULL, SYSDATE(), SYSDATE()),
(522, 6, 314, 2, NULL, SYSDATE(), SYSDATE()),
(523, 6, 315, 3, NULL, SYSDATE(), SYSDATE()),
(524, 6, 522, 2, NULL, SYSDATE(), SYSDATE()),
(525, 6, 523, 3, NULL, SYSDATE(), SYSDATE()),
(526, 6, 316, 3, NULL, SYSDATE(), SYSDATE()),
(527, 6, 524, 2, NULL, SYSDATE(), SYSDATE()),
(528, 6, 317, 3, NULL, SYSDATE(), SYSDATE()),
(529, 6, 318, 3, NULL, SYSDATE(), SYSDATE()),
(530, 6, 319, 3, NULL, SYSDATE(), SYSDATE()),
(531, 6, 526, 4, NULL, SYSDATE(), SYSDATE()),
(532, 6, 525, 3, NULL, SYSDATE(), SYSDATE()),
(533, 6, 321, 3, NULL, SYSDATE(), SYSDATE()),
(534, 6, 323, 3, NULL, SYSDATE(), SYSDATE()),
(535, 6, 322, 3, NULL, SYSDATE(), SYSDATE()),
(536, 6, 324, 3, NULL, SYSDATE(), SYSDATE()),
(537, 6, 527, 2, NULL, SYSDATE(), SYSDATE()),
(538, 6, 528, 3, NULL, SYSDATE(), SYSDATE()),
(539, 6, 529, 3, NULL, SYSDATE(), SYSDATE()),
(540, 6, 325, 2, NULL, SYSDATE(), SYSDATE()),
(541, 6, 327, 3, NULL, SYSDATE(), SYSDATE()),
(542, 6, 532, 2, NULL, SYSDATE(), SYSDATE()),
(543, 6, 531, 2, NULL, SYSDATE(), SYSDATE()),
(544, 6, 530, 3, NULL, SYSDATE(), SYSDATE()),
(545, 6, 328, 3, NULL, SYSDATE(), SYSDATE()),
(546, 6, 533, 3, NULL, SYSDATE(), SYSDATE()),
(547, 6, 329, 3, NULL, SYSDATE(), SYSDATE()),
(548, 6, 534, 3, NULL, SYSDATE(), SYSDATE()),
(549, 6, 535, 2, NULL, SYSDATE(), SYSDATE()),
(550, 7, 112, 2, NULL, SYSDATE(), SYSDATE()),
(551, 7, 116, 2, NULL, SYSDATE(), SYSDATE()),
(552, 7, 1021, 1, NULL, SYSDATE(), SYSDATE()),
(553, 7, 1014, 2, NULL, SYSDATE(), SYSDATE()),
(554, 7, 969, 2, NULL, SYSDATE(), SYSDATE()),
(555, 7, 995, 2, NULL, SYSDATE(), SYSDATE()),
(556, 7, 1019, 2, NULL, SYSDATE(), SYSDATE()),
(557, 7, 1016, 2, NULL, SYSDATE(), SYSDATE()),
(558, 7, 1010, 2, NULL, SYSDATE(), SYSDATE()),
(559, 7, 939, 2, NULL, SYSDATE(), SYSDATE()),
(560, 7, 937, 2, NULL, SYSDATE(), SYSDATE()),
(561, 7, 1050, 2, NULL, SYSDATE(), SYSDATE()),
(562, 7, 1048, 2, NULL, SYSDATE(), SYSDATE()),
(563, 7, 1043, 2, NULL, SYSDATE(), SYSDATE()),
(564, 7, 1041, 2, NULL, SYSDATE(), SYSDATE()),
(565, 7, 1036, 2, NULL, SYSDATE(), SYSDATE()),
(566, 7, 1027, 2, NULL, SYSDATE(), SYSDATE()),
(567, 7, 1029, 2, NULL, SYSDATE(), SYSDATE()),
(568, 7, 1025, 2, NULL, SYSDATE(), SYSDATE()),
(569, 7, 1009, 2, NULL, SYSDATE(), SYSDATE()),
(570, 7, 1033, 2, NULL, SYSDATE(), SYSDATE()),
(571, 7, 1032, 2, NULL, SYSDATE(), SYSDATE()),
(572, 7, 901, 2, NULL, SYSDATE(), SYSDATE()),
(573, 7, 915, 3, NULL, SYSDATE(), SYSDATE()),
(574, 7, 982, 3, NULL, SYSDATE(), SYSDATE()),
(575, 7, 1054, 4, NULL, SYSDATE(), SYSDATE()),
(576, 7, 1007, 2, NULL, SYSDATE(), SYSDATE()),
(577, 7, 959, 2, NULL, SYSDATE(), SYSDATE()),
(578, 7, 958, 2, NULL, SYSDATE(), SYSDATE()),
(579, 7, 964, 2, NULL, SYSDATE(), SYSDATE()),
(580, 7, 1013, 2, NULL, SYSDATE(), SYSDATE()),
(581, 7, 968, 1, NULL, SYSDATE(), SYSDATE()),
(582, 7, 931, 2, NULL, SYSDATE(), SYSDATE()),
(583, 7, 924, 1, NULL, SYSDATE(), SYSDATE()),
(584, 7, 977, 1, NULL, SYSDATE(), SYSDATE()),
(585, 7, 983, 2, NULL, SYSDATE(), SYSDATE()),
(586, 7, 979, 2, NULL, SYSDATE(), SYSDATE()),
(587, 7, 945, 2, NULL, SYSDATE(), SYSDATE()),
(588, 7, 1018, 0, NULL, SYSDATE(), SYSDATE()),
(589, 7, 1022, 2, NULL, SYSDATE(), SYSDATE()),
(590, 7, 1024, 0, NULL, SYSDATE(), SYSDATE()),
(591, 7, 988, 2, NULL, SYSDATE(), SYSDATE()),
(592, 7, 1017, 2, NULL, SYSDATE(), SYSDATE()),
(593, 7, 1006, 2, NULL, SYSDATE(), SYSDATE()),
(594, 7, 1004, 1, NULL, SYSDATE(), SYSDATE()),
(595, 7, 1012, 2, NULL, SYSDATE(), SYSDATE()),
(596, 7, 1034, 2, NULL, SYSDATE(), SYSDATE()),
(597, 7, 1051, 3, NULL, SYSDATE(), SYSDATE()),
(598, 7, 1039, 4, NULL, SYSDATE(), SYSDATE()),
(599, 7, 1044, 2, NULL, SYSDATE(), SYSDATE()),
(600, 7, 917, 2, NULL, SYSDATE(), SYSDATE()),
(601, 7, 918, 2, NULL, SYSDATE(), SYSDATE()),
(602, 7, 1031, 2, NULL, SYSDATE(), SYSDATE()),
(603, 7, 953, 2, NULL, SYSDATE(), SYSDATE()),
(604, 7, 944, 2, NULL, SYSDATE(), SYSDATE()),
(605, 7, 952, 2, NULL, SYSDATE(), SYSDATE()),
(606, 7, 946, 2, NULL, SYSDATE(), SYSDATE()),
(607, 7, 1052, 2, NULL, SYSDATE(), SYSDATE()),
(608, 7, 948, 2, NULL, SYSDATE(), SYSDATE()),
(609, 7, 1011, 2, NULL, SYSDATE(), SYSDATE()),
(610, 7, 950, 1, NULL, SYSDATE(), SYSDATE()),
(611, 7, 970, 4, NULL, SYSDATE(), SYSDATE()),
(612, 7, 908, 2, NULL, SYSDATE(), SYSDATE()),
(613, 7, 971, 2, NULL, SYSDATE(), SYSDATE()),
(614, 7, 909, 2, NULL, SYSDATE(), SYSDATE()),
(615, 7, 927, 3, NULL, SYSDATE(), SYSDATE()),
(616, 7, 947, 2, NULL, SYSDATE(), SYSDATE()),
(617, 7, 1042, 2, NULL, SYSDATE(), SYSDATE()),
(618, 7, 975, 2, NULL, SYSDATE(), SYSDATE()),
(619, 7, 1040, 2, NULL, SYSDATE(), SYSDATE()),
(620, 7, 907, 2, NULL, SYSDATE(), SYSDATE()),
(621, 7, 972, 2, NULL, SYSDATE(), SYSDATE()),
(622, 7, 973, 1, NULL, SYSDATE(), SYSDATE()),
(623, 7, 955, 2, NULL, SYSDATE(), SYSDATE()),
(624, 7, 954, 2, NULL, SYSDATE(), SYSDATE()),
(625, 7, 920, 1, NULL, SYSDATE(), SYSDATE()),
(626, 7, 1056, 3, NULL, SYSDATE(), SYSDATE()),
(627, 7, 1053, 1, NULL, SYSDATE(), SYSDATE()),
(628, 7, 1057, 2, NULL, SYSDATE(), SYSDATE()),
(629, 7, 1045, 2, NULL, SYSDATE(), SYSDATE()),
(630, 7, 1049, 1, NULL, SYSDATE(), SYSDATE()),
(631, 7, 916, 2, NULL, SYSDATE(), SYSDATE()),
(632, 7, 902, 3, NULL, SYSDATE(), SYSDATE()),
(633, 7, 1026, 1, NULL, SYSDATE(), SYSDATE()),
(634, 7, 934, 2, NULL, SYSDATE(), SYSDATE()),
(635, 7, 932, 3, NULL, SYSDATE(), SYSDATE()),
(636, 7, 1028, 2, NULL, SYSDATE(), SYSDATE()),
(637, 7, 912, 1, NULL, SYSDATE(), SYSDATE()),
(638, 7, 966, 3, NULL, SYSDATE(), SYSDATE()),
(639, 7, 910, 3, NULL, SYSDATE(), SYSDATE()),
(640, 7, 962, 4, NULL, SYSDATE(), SYSDATE()),
(641, 7, 906, 3, NULL, SYSDATE(), SYSDATE()),
(642, 7, 981, 1, NULL, SYSDATE(), SYSDATE()),
(643, 7, 997, 2, NULL, SYSDATE(), SYSDATE()),
(644, 7, 929, 2, NULL, SYSDATE(), SYSDATE()),
(645, 7, 986, 2, NULL, SYSDATE(), SYSDATE()),
(646, 7, 987, 2, NULL, SYSDATE(), SYSDATE()),
(647, 7, 991, 3, NULL, SYSDATE(), SYSDATE()),
(648, 7, 941, 2, NULL, SYSDATE(), SYSDATE()),
(649, 7, 990, 2, NULL, SYSDATE(), SYSDATE()),
(650, 7, 914, 1, NULL, SYSDATE(), SYSDATE()),
(651, 7, 1035, 2, NULL, SYSDATE(), SYSDATE()),
(652, 7, 992, 2, NULL, SYSDATE(), SYSDATE()),
(653, 7, 978, 2, NULL, SYSDATE(), SYSDATE()),
(654, 7, 1015, 2, NULL, SYSDATE(), SYSDATE()),
(655, 7, 998, 2, NULL, SYSDATE(), SYSDATE()),
(656, 7, 1005, 2, NULL, SYSDATE(), SYSDATE()),
(657, 7, 928, 2, NULL, SYSDATE(), SYSDATE()),
(658, 7, 956, 1, NULL, SYSDATE(), SYSDATE()),
(659, 7, 933, 2, NULL, SYSDATE(), SYSDATE()),
(660, 7, 903, 3, NULL, SYSDATE(), SYSDATE()),
(661, 7, 1000, 3, NULL, SYSDATE(), SYSDATE()),
(662, 7, 960, 1, NULL, SYSDATE(), SYSDATE()),
(663, 7, 974, 2, NULL, SYSDATE(), SYSDATE()),
(664, 7, 919, 1, NULL, SYSDATE(), SYSDATE()),
(665, 7, 961, 2, NULL, SYSDATE(), SYSDATE()),
(666, 7, 951, 2, NULL, SYSDATE(), SYSDATE()),
(667, 7, 1046, 1, NULL, SYSDATE(), SYSDATE()),
(668, 7, 905, 3, NULL, SYSDATE(), SYSDATE()),
(669, 7, 1003, 2, NULL, SYSDATE(), SYSDATE());

INSERT INTO `active_rule_parameters` (`id`, `active_rule_id`, `rules_parameter_id`, `value`, `rules_parameter_key`) VALUES
(1, 2, 80, '100', 'max'),
(2, 6, 55, '5', 'max'),
(3, 7, 91, '3', 'max'),
(4, 14, 51, '^(//|#)\\s*+[^\\s]++$', 'legalTrailingCommentPattern'),
(5, 16, 90, '1000', 'max'),
(6, 20, 78, '3', 'max'),
(7, 21, 93, '3', 'threshold'),
(8, 22, 81, '10', 'threshold'),
(9, 27, 50, '^[A-Z][a-zA-Z0-9]*$', 'format'),
(10, 29, 79, '3', 'max'),
(11, 31, 82, '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$', 'format'),
(12, 32, 54, '100', 'max'),
(13, 33, 88, 'true', 'countNonpublicMethods'),
(14, 33, 89, '20', 'maximumMethodThreshold'),
(15, 43, 84, '^[a-z][a-zA-Z0-9]*$', 'format'),
(16, 58, 94, '7', 'max'),
(17, 59, 57, 'true', 'extends_implements_line'),
(18, 59, 58, 'true', 'foreach_space'),
(19, 59, 59, 'true', 'closing_curly_brace'),
(20, 59, 60, 'true', 'one_space_for'),
(21, 59, 61, 'true', 'function_declaration_arguments_indentation'),
(22, 59, 62, 'true', 'open_curly_brace_classes_functions'),
(23, 59, 63, 'true', 'one_space_after'),
(24, 59, 64, 'true', 'use_after_namespace'),
(25, 59, 65, 'true', 'space_comma'),
(26, 59, 66, 'true', 'function_calls_arguments_indentation'),
(27, 59, 67, 'true', 'open_curly_brace_control_structures'),
(28, 59, 68, 'true', 'one_space_before'),
(29, 59, 69, 'true', 'no_space'),
(30, 59, 70, 'true', 'interfaces_indentation'),
(31, 59, 71, 'true', 'use_blank_line'),
(32, 59, 72, 'true', 'namespace_blank_line'),
(33, 59, 73, 'true', 'no_space_method_name'),
(34, 59, 74, 'true', 'closure_format'),
(35, 61, 50, '^[A-Z][a-zA-Z]*$', 'format'),
(36, 62, 82, '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$', 'format'),
(37, 63, 52, '^[a-z][a-zA-Z0-9]*$', 'format'),
(38, 65, 92, '120', 'maximumLineLength'),
(39, 79, 14, '10', 'maximumFunctionComplexityThreshold'),
(40, 99, 11, '7', 'maximumFunctionParameters'),
(41, 110, 7, '^//\\s*+[^\\s]++$', 'legalCommentPattern'),
(42, 118, 6, '^[a-z][a-zA-Z0-9]*$', 'format'),
(43, 122, 15, '1000', 'maximum'),
(44, 128, 2, '100', 'max'),
(45, 131, 13, '3', 'max'),
(46, 136, 5, '3', 'maximumNestingLevel'),
(47, 152, 8, 'false', 'considerJSDoc'),
(48, 153, 99, 'false', 'markAll'),
(49, 154, 97, '2', 'indentSize'),
(50, 154, 98, '2', 'tabSize'),
(51, 158, 31, '1000', 'maxLength'),
(52, 551, 18, '65.0', 'minimumBranchCoverageRatio'),
(53, 553, 123, '10', 'max'),
(54, 554, 115, '200', 'max'),
(55, 557, 124, '7', 'maximumMethodParameters'),
(56, 559, 109, '^[a-z][a-zA-Z0-9]*$', 'format'),
(57, 560, 108, '^[A-Z][a-zA-Z0-9]*$', 'format'),
(58, 561, 136, '^[A-Z][a-zA-Z0-9]*$', 'format'),
(59, 562, 134, '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$', 'format'),
(60, 563, 133, '^[a-z][a-zA-Z0-9]*$', 'format'),
(61, 564, 132, '^[a-z][a-zA-Z0-9]*$', 'format'),
(62, 565, 128, '^[A-Z]$', 'format'),
(63, 566, 127, '^[a-z]+(\\.[a-z][a-z0-9]*)*$', 'format'),
(64, 583, 106, '^\\s*+[^\\s]++$', 'legalCommentPattern'),
(65, 595, 122, '3', 'max'),
(66, 610, 113, '3', 'max'),
(67, 614, 104, '5', 'max'),
(68, 616, 110, 'java.lang.InterruptedException, java.lang.NumberFormatException, java.text.ParseException, java.net.MalformedURLException', 'exceptions'),
(69, 618, 116, '20', 'max'),
(70, 630, 135, '3', 'threshold'),
(71, 646, 119, 'LOG(?:GER)?', 'format');

INSERT INTO `activities` (`id`, `created_at`, `user_login`, `data_field`, `log_type`, `log_action`, `log_message`, `log_key`) VALUES
(1, SYSDATE(), NULL, 'ruleKey=php:S1523;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1523', 'QPROFILE', 'ACTIVATED', NULL, '74aa9695-5890-495d-8ea4-1dac8a162aaa'),
(2, SYSDATE(), NULL, 'param_max=100;ruleKey=php:S1479;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1479', 'QPROFILE', 'ACTIVATED', NULL, '0161df8c-bc80-4c2d-a4cf-71a7ff7ae3ba'),
(3, SYSDATE(), NULL, 'ruleKey=php:S1116;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1116', 'QPROFILE', 'ACTIVATED', NULL, 'b29eb204-32aa-41d5-96c0-6628dba9e911'),
(4, SYSDATE(), NULL, 'ruleKey=php:S1145;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1145', 'QPROFILE', 'ACTIVATED', NULL, '2f9c1e94-1203-4d29-82e3-a520a14cf713'),
(5, SYSDATE(), NULL, 'ruleKey=php:S1066;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1066', 'QPROFILE', 'ACTIVATED', NULL, 'c518d1a2-0769-4b17-9f5e-f7d96009a83b'),
(6, SYSDATE(), NULL, 'param_max=5;ruleKey=php:S1151;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1151', 'QPROFILE', 'ACTIVATED', NULL, 'a2357baa-00e3-449c-ab10-8849e4cea312'),
(7, SYSDATE(), NULL, 'param_max=3;ruleKey=php:S1142;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1142', 'QPROFILE', 'ACTIVATED', NULL, '02c1c859-e401-4fac-a7b9-767d10172ed3'),
(8, SYSDATE(), NULL, 'ruleKey=php:S1126;profileKey=php-sonar-way-68503;severity=MINOR;key=php-sonar-way-68503:php:S1126', 'QPROFILE', 'ACTIVATED', NULL, 'b3c4a93b-22a4-4688-9bb6-9f98cea0e266'),
(9, SYSDATE(), NULL, 'ruleKey=php:S1125;profileKey=php-sonar-way-68503;severity=MINOR;key=php-sonar-way-68503:php:S1125', 'QPROFILE', 'ACTIVATED', NULL, '878cae9e-0b56-405f-a401-ae661b85226b'),
(10, SYSDATE(), NULL, 'ruleKey=php:S1599;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1599', 'QPROFILE', 'ACTIVATED', NULL, '6025c02e-ade4-4eea-9724-513c45ea9e56'),
(11, SYSDATE(), NULL, 'ruleKey=php:S131;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S131', 'QPROFILE', 'ACTIVATED', NULL, '4d6acb58-4a92-4381-b332-c811e6a29e0d'),
(12, SYSDATE(), NULL, 'ruleKey=php:S1301;profileKey=php-sonar-way-68503;severity=MINOR;key=php-sonar-way-68503:php:S1301', 'QPROFILE', 'ACTIVATED', NULL, 'f609f8a8-6b4c-4ecd-b979-6dead638f8f9'),
(13, SYSDATE(), NULL, 'ruleKey=php:S1264;profileKey=php-sonar-way-68503;severity=MINOR;key=php-sonar-way-68503:php:S1264', 'QPROFILE', 'ACTIVATED', NULL, '75e66930-7628-4049-a6bb-731aec7d61a6'),
(14, SYSDATE(), NULL, 'param_legalTrailingCommentPattern=^(//|#)\\s*+[^\\s]++$;ruleKey=php:S139;profileKey=php-sonar-way-68503;severity=INFO;key=php-sonar-way-68503:php:S139', 'QPROFILE', 'ACTIVATED', NULL, '1e6c643c-8aec-4887-9f1f-8f267af83e76'),
(15, SYSDATE(), NULL, 'ruleKey=php:S126;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S126', 'QPROFILE', 'ACTIVATED', NULL, '2909cd68-3dd7-4915-98cf-ca412ac99647'),
(16, SYSDATE(), NULL, 'param_max=1000;ruleKey=php:S104;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S104', 'QPROFILE', 'ACTIVATED', NULL, '6f5e6c49-b8ba-48b8-af94-917ea5462635'),
(17, SYSDATE(), NULL, 'ruleKey=php:S108;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S108', 'QPROFILE', 'ACTIVATED', NULL, 'b1de6edc-faa8-42ff-8842-72059cc579ca'),
(18, SYSDATE(), NULL, 'ruleKey=php:S128;profileKey=php-sonar-way-68503;severity=CRITICAL;key=php-sonar-way-68503:php:S128', 'QPROFILE', 'ACTIVATED', NULL, 'dc21e8a0-a5da-4df0-acb6-6ccf0810aa72'),
(19, SYSDATE(), NULL, 'ruleKey=php:S1600;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1600', 'QPROFILE', 'ACTIVATED', NULL, '14541c9b-a445-4430-87b9-ff5609837540'),
(20, SYSDATE(), NULL, 'param_max=3;ruleKey=php:S134;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S134', 'QPROFILE', 'ACTIVATED', NULL, 'b51fd545-9e9b-4732-81a3-06aa02d176b2'),
(21, SYSDATE(), NULL, 'ruleKey=php:S1192;profileKey=php-sonar-way-68503;severity=MINOR;param_threshold=3;key=php-sonar-way-68503:php:S1192', 'QPROFILE', 'ACTIVATED', NULL, '0bb034e7-bfc5-4e46-854a-73ff9f3a3368'),
(22, SYSDATE(), NULL, 'ruleKey=php:S1541;profileKey=php-sonar-way-68503;severity=MAJOR;param_threshold=10;key=php-sonar-way-68503:php:S1541', 'QPROFILE', 'ACTIVATED', NULL, '77ce4370-7329-45ba-828d-18f704837a27'),
(23, SYSDATE(), NULL, 'ruleKey=php:S105;profileKey=php-sonar-way-68503;severity=MINOR;key=php-sonar-way-68503:php:S105', 'QPROFILE', 'ACTIVATED', NULL, '2713b93a-057c-414e-a2c1-364e27152094'),
(24, SYSDATE(), NULL, 'ruleKey=php:S121;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S121', 'QPROFILE', 'ACTIVATED', NULL, '5276f633-641a-4225-9442-f55ac3a1a345'),
(25, SYSDATE(), NULL, 'ruleKey=php:S1109;profileKey=php-sonar-way-68503;severity=MINOR;key=php-sonar-way-68503:php:S1109', 'QPROFILE', 'ACTIVATED', NULL, 'a816dc92-366f-4d40-95fb-0f4c630dfedc'),
(26, SYSDATE(), NULL, 'ruleKey=php:S907;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S907', 'QPROFILE', 'ACTIVATED', NULL, '38b2160e-15a3-45e9-b7e7-87b5bbb66f17'),
(27, SYSDATE(), NULL, 'param_format=^[A-Z][a-zA-Z0-9]*$;ruleKey=php:S101;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S101', 'QPROFILE', 'ACTIVATED', NULL, '06f31f1b-b0c2-4d48-a19b-d414fca21167'),
(28, SYSDATE(), NULL, 'ruleKey=php:S1172;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1172', 'QPROFILE', 'ACTIVATED', NULL, '16715e55-74a8-45db-b7c2-2660ccacd655'),
(29, SYSDATE(), NULL, 'param_max=3;ruleKey=php:S1067;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1067', 'QPROFILE', 'ACTIVATED', NULL, '2f965963-056b-416f-b360-caad25c3cf6c'),
(30, SYSDATE(), NULL, 'ruleKey=php:S127;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S127', 'QPROFILE', 'ACTIVATED', NULL, '6ccfdd13-9719-47a3-acbe-3b70539997cb'),
(31, SYSDATE(), NULL, 'param_format=^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$;ruleKey=php:S115;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S115', 'QPROFILE', 'ACTIVATED', NULL, '08f4d525-31f5-4c28-8657-8b5fe7306602'),
(32, SYSDATE(), NULL, 'param_max=100;ruleKey=php:S138;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S138', 'QPROFILE', 'ACTIVATED', NULL, '51d1c749-762d-4371-be52-e3811b34d3bf'),
(33, SYSDATE(), NULL, 'ruleKey=php:S1448;param_maximumMethodThreshold=20;profileKey=php-sonar-way-68503;severity=MAJOR;param_countNonpublicMethods=true;key=php-sonar-way-68503:php:S1448', 'QPROFILE', 'ACTIVATED', NULL, 'd32a3b19-5e17-4ac8-adf8-7284c009ba6a'),
(34, SYSDATE(), NULL, 'ruleKey=php:S1135;profileKey=php-sonar-way-68503;severity=INFO;key=php-sonar-way-68503:php:S1135', 'QPROFILE', 'ACTIVATED', NULL, 'b853f5b4-379f-4c33-8aff-ba0aaeb44c00'),
(35, SYSDATE(), NULL, 'ruleKey=php:S1134;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1134', 'QPROFILE', 'ACTIVATED', NULL, 'f5a413bb-5b0e-490e-a4e6-ac13213c8ce8'),
(36, SYSDATE(), NULL, 'ruleKey=php:S1603;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1603', 'QPROFILE', 'ACTIVATED', NULL, '83f081da-bd8d-47b1-9b16-09fe14c26176'),
(37, SYSDATE(), NULL, 'ruleKey=php:S1605;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1605', 'QPROFILE', 'ACTIVATED', NULL, '24fd3ec5-060f-4daf-9255-024f8ec09d13'),
(38, SYSDATE(), NULL, 'ruleKey=php:S1068;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1068', 'QPROFILE', 'ACTIVATED', NULL, 'e0031a0f-8e1c-4674-a70c-cff740234bbe'),
(39, SYSDATE(), NULL, 'ruleKey=php:S1481;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1481', 'QPROFILE', 'ACTIVATED', NULL, '8eb7c6b6-ef5b-4004-9a99-92ce72899d07'),
(40, SYSDATE(), NULL, 'ruleKey=php:S122;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S122', 'QPROFILE', 'ACTIVATED', NULL, '87439560-ed05-49b4-b204-ec891fb46bab'),
(41, SYSDATE(), NULL, 'ruleKey=php:S881;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S881', 'QPROFILE', 'ACTIVATED', NULL, '53d67a9b-3a07-485b-95ca-39e02e14cb67'),
(42, SYSDATE(), NULL, 'ruleKey=php:S1117;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1117', 'QPROFILE', 'ACTIVATED', NULL, 'a2f28ce7-9d11-4440-a32d-4cc3432a2a73'),
(43, SYSDATE(), NULL, 'param_format=^[a-z][a-zA-Z0-9]*$;ruleKey=php:S117;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S117', 'QPROFILE', 'ACTIVATED', NULL, 'd90e2fa7-1884-4b30-9935-812ca7cd81fe'),
(44, SYSDATE(), NULL, 'ruleKey=php:S1488;profileKey=php-sonar-way-68503;severity=MINOR;key=php-sonar-way-68503:php:S1488', 'QPROFILE', 'ACTIVATED', NULL, '311bba4f-0cae-4309-aea3-ecf73fa02893'),
(45, SYSDATE(), NULL, 'ruleKey=php:S125;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S125', 'QPROFILE', 'ACTIVATED', NULL, '0a370f16-dd0c-4f5b-a44e-89e1b215cfc7'),
(46, SYSDATE(), NULL, 'ruleKey=php:S1799;profileKey=php-sonar-way-68503;severity=CRITICAL;key=php-sonar-way-68503:php:S1799', 'QPROFILE', 'ACTIVATED', NULL, '894d4175-5ede-43da-9fec-b0f2c0268d1f'),
(47, SYSDATE(), NULL, 'ruleKey=php:S1788;profileKey=php-sonar-way-68503;severity=CRITICAL;key=php-sonar-way-68503:php:S1788', 'QPROFILE', 'ACTIVATED', NULL, 'c9d928c3-08ca-407a-bbe7-a66bee9b01d5'),
(48, SYSDATE(), NULL, 'ruleKey=php:S2041;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S2041', 'QPROFILE', 'ACTIVATED', NULL, '50130366-d9dd-4d9f-a6f6-c6ae7d52acdd'),
(49, SYSDATE(), NULL, 'ruleKey=php:S2014;profileKey=php-sonar-way-68503;severity=BLOCKER;key=php-sonar-way-68503:php:S2014', 'QPROFILE', 'ACTIVATED', NULL, '3b26a578-2307-4e2a-b1f3-b5eb4975c6be'),
(50, SYSDATE(), NULL, 'ruleKey=php:S1998;profileKey=php-sonar-way-68503;severity=CRITICAL;key=php-sonar-way-68503:php:S1998', 'QPROFILE', 'ACTIVATED', NULL, '97e79193-c37c-4ee4-8c31-b8a2b53663ab'),
(51, SYSDATE(), NULL, 'ruleKey=php:S2010;profileKey=php-sonar-way-68503;severity=CRITICAL;key=php-sonar-way-68503:php:S2010', 'QPROFILE', 'ACTIVATED', NULL, '18663dd5-b240-4105-b639-82ed5ce0f71f'),
(52, SYSDATE(), NULL, 'ruleKey=php:S1536;profileKey=php-sonar-way-68503;severity=CRITICAL;key=php-sonar-way-68503:php:S1536', 'QPROFILE', 'ACTIVATED', NULL, 'a55df310-c7c8-4a4b-b97a-9f1e9f87508f'),
(53, SYSDATE(), NULL, 'ruleKey=php:S1763;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1763', 'QPROFILE', 'ACTIVATED', NULL, '492c69c1-65db-4a39-b5ce-cf70e76257c5'),
(54, SYSDATE(), NULL, 'ruleKey=php:S1144;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S1144', 'QPROFILE', 'ACTIVATED', NULL, 'c6b19297-01e6-4d8f-81f6-ddc30a8d31c7'),
(55, SYSDATE(), NULL, 'ruleKey=php:S2037;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S2037', 'QPROFILE', 'ACTIVATED', NULL, 'ad7e07f9-1816-40e3-b77d-fce48e83c876'),
(56, SYSDATE(), NULL, 'ruleKey=php:S2000;profileKey=php-sonar-way-68503;severity=CRITICAL;key=php-sonar-way-68503:php:S2000', 'QPROFILE', 'ACTIVATED', NULL, '4e8a2556-2670-4bbd-8227-a9755ccd9d6d'),
(57, SYSDATE(), NULL, 'ruleKey=php:S1185;profileKey=php-sonar-way-68503;severity=MINOR;key=php-sonar-way-68503:php:S1185', 'QPROFILE', 'ACTIVATED', NULL, 'cc7b2c5f-9aaa-44ba-9250-a3995eb99c98'),
(58, SYSDATE(), NULL, 'param_max=7;ruleKey=php:S107;profileKey=php-sonar-way-68503;severity=MAJOR;key=php-sonar-way-68503:php:S107', 'QPROFILE', 'ACTIVATED', NULL, '4af1fe5e-f865-433e-8bbb-f34ab726590f'),
(59, SYSDATE(), NULL, 'param_namespace_blank_line=true;param_use_blank_line=true;param_closing_curly_brace=true;param_no_space_method_name=true;param_open_curly_brace_control_structures=true;param_interfaces_indentation=true;severity=MINOR;param_function_calls_arguments_indentation=true;param_function_declaration_arguments_indentation=true;param_use_after_namespace=true;param_open_curly_brace_classes_functions=true;param_no_space=true;param_one_space_before=true;param_closure_format=true;ruleKey=php:S1808;param_one_space_after=true;profileKey=php-psr-2-00147;param_extends_implements_line=true;param_one_space_for=true;key=php-psr-2-00147:php:S1808;param_foreach_space=true;param_space_comma=true', 'QPROFILE', 'ACTIVATED', NULL, '75308a04-3d99-41c2-8668-448df882eb6b'),
(60, SYSDATE(), NULL, 'ruleKey=php:S1757;profileKey=php-psr-2-00147;severity=MINOR;key=php-psr-2-00147:php:S1757', 'QPROFILE', 'ACTIVATED', NULL, '5f11f1a4-04d7-4ff2-aa55-7c58623555ad'),
(61, SYSDATE(), NULL, 'param_format=^[A-Z][a-zA-Z]*$;ruleKey=php:S101;profileKey=php-psr-2-00147;severity=MINOR;key=php-psr-2-00147:php:S101', 'QPROFILE', 'ACTIVATED', NULL, 'cbbcb53c-f1c4-40d5-99c4-08228ae8efc5'),
(62, SYSDATE(), NULL, 'param_format=^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$;ruleKey=php:S115;profileKey=php-psr-2-00147;severity=MINOR;key=php-psr-2-00147:php:S115', 'QPROFILE', 'ACTIVATED', NULL, '62664749-b55b-4f27-a70c-ddc7b5a78485'),
(63, SYSDATE(), NULL, 'param_format=^[a-z][a-zA-Z0-9]*$;ruleKey=php:S100;profileKey=php-psr-2-00147;severity=MINOR;key=php-psr-2-00147:php:S100', 'QPROFILE', 'ACTIVATED', NULL, '27a659c3-13fd-4ad1-9ecf-c50b6b970da1'),
(64, SYSDATE(), NULL, 'ruleKey=php:S105;profileKey=php-psr-2-00147;severity=MINOR;key=php-psr-2-00147:php:S105', 'QPROFILE', 'ACTIVATED', NULL, '7ceaf939-ec6b-46bd-9dc2-a66c8e1031b6'),
(65, SYSDATE(), NULL, 'ruleKey=php:S103;profileKey=php-psr-2-00147;severity=INFO;param_maximumLineLength=120;key=php-psr-2-00147:php:S103', 'QPROFILE', 'ACTIVATED', NULL, '97cdf235-30e1-42ef-bbbb-0482bd09b9fb'),
(66, SYSDATE(), NULL, 'ruleKey=php:S1784;profileKey=php-psr-2-00147;severity=MINOR;key=php-psr-2-00147:php:S1784', 'QPROFILE', 'ACTIVATED', NULL, 'b0f7719d-1941-453e-8d8b-83b37e20f2c4'),
(67, SYSDATE(), NULL, 'ruleKey=php:S1124;profileKey=php-psr-2-00147;severity=MINOR;key=php-psr-2-00147:php:S1124', 'QPROFILE', 'ACTIVATED', NULL, 'de99d393-c40e-4ea9-9794-f0f2b775e123'),
(68, SYSDATE(), NULL, 'ruleKey=php:S1779;profileKey=php-psr-2-00147;severity=MINOR;key=php-psr-2-00147:php:S1779', 'QPROFILE', 'ACTIVATED', NULL, 'ccdd8a85-8008-40df-a374-8bef7781a0ac'),
(69, SYSDATE(), NULL, 'ruleKey=php:S113;profileKey=php-psr-2-00147;severity=MINOR;key=php-psr-2-00147:php:S113', 'QPROFILE', 'ACTIVATED', NULL, '923c0ee4-9617-4a8d-a856-a16e9b87eca5'),
(70, SYSDATE(), NULL, 'ruleKey=php:S1780;profileKey=php-psr-2-00147;severity=MINOR;key=php-psr-2-00147:php:S1780', 'QPROFILE', 'ACTIVATED', NULL, '27dc755b-07e4-4b32-8e2b-57385f182580'),
(71, SYSDATE(), NULL, 'ruleKey=php:S1131;profileKey=php-psr-2-00147;severity=MAJOR;key=php-psr-2-00147:php:S1131', 'QPROFILE', 'ACTIVATED', NULL, 'ffd820fa-a42f-4c2c-9903-2c489388ebea'),
(72, SYSDATE(), NULL, 'ruleKey=php:S122;profileKey=php-psr-2-00147;severity=MAJOR;key=php-psr-2-00147:php:S122', 'QPROFILE', 'ACTIVATED', NULL, '1cfcc50e-7a1b-4a03-9487-79e175c45247'),
(73, SYSDATE(), NULL, 'ruleKey=php:S1781;profileKey=php-psr-2-00147;severity=MINOR;key=php-psr-2-00147:php:S1781', 'QPROFILE', 'ACTIVATED', NULL, 'be01a6ca-2c1d-4ba9-8716-443edfb3472a'),
(74, SYSDATE(), NULL, 'ruleKey=php:S1765;profileKey=php-psr-2-00147;severity=MAJOR;key=php-psr-2-00147:php:S1765', 'QPROFILE', 'ACTIVATED', NULL, '01b4e79c-b558-4391-845c-8d9248bd43c0'),
(75, SYSDATE(), NULL, 'ruleKey=php:S1766;profileKey=php-psr-2-00147;severity=MINOR;key=php-psr-2-00147:php:S1766', 'QPROFILE', 'ACTIVATED', NULL, '60eab309-8e49-4876-a591-ed887bdc996c'),
(76, SYSDATE(), NULL, 'ruleKey=php:S1793;profileKey=php-psr-2-00147;severity=MINOR;key=php-psr-2-00147:php:S1793', 'QPROFILE', 'ACTIVATED', NULL, 'ee43cf18-adc9-425a-9901-0fa54cfecc63'),
(77, SYSDATE(), NULL, 'ruleKey=php:S128;profileKey=php-psr-2-00147;severity=CRITICAL;key=php-psr-2-00147:php:S128', 'QPROFILE', 'ACTIVATED', NULL, '9776dd08-de2e-4cb6-869d-7ac82c4674a9'),
(78, SYSDATE(), NULL, 'ruleKey=javascript:CommentedCode;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:CommentedCode', 'QPROFILE', 'ACTIVATED', NULL, '1e7f95ea-6735-49e7-9d50-2ecb516c2dfa'),
(79, SYSDATE(), NULL, 'ruleKey=javascript:FunctionComplexity;profileKey=js-sonar-way-84449;severity=MAJOR;param_maximumFunctionComplexityThreshold=10;key=js-sonar-way-84449:javascript:FunctionComplexity', 'QPROFILE', 'ACTIVATED', NULL, 'fb6595c1-9898-48d4-a7d2-683ddd342fbf'),
(80, SYSDATE(), NULL, 'ruleKey=javascript:DebuggerStatement;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:DebuggerStatement', 'QPROFILE', 'ACTIVATED', NULL, 'fa919cdd-9b3d-440d-b178-b727ba4af75c'),
(81, SYSDATE(), NULL, 'ruleKey=javascript:WithStatement;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:WithStatement', 'QPROFILE', 'ACTIVATED', NULL, '9a92009d-9b92-45f8-a705-f21b14b89c99'),
(82, SYSDATE(), NULL, 'ruleKey=javascript:EqEqEq;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:EqEqEq', 'QPROFILE', 'ACTIVATED', NULL, '491de041-7a24-45bb-83cc-d3d52d5dc77b'),
(83, SYSDATE(), NULL, 'ruleKey=javascript:Eval;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:Eval', 'QPROFILE', 'ACTIVATED', NULL, '680d5a74-e173-47f5-ad2d-3185de6d2f0d'),
(84, SYSDATE(), NULL, 'ruleKey=javascript:OneStatementPerLine;profileKey=js-sonar-way-84449;severity=MINOR;key=js-sonar-way-84449:javascript:OneStatementPerLine', 'QPROFILE', 'ACTIVATED', NULL, '1ec4ae11-1829-4c92-8a45-f607e46d87a1'),
(85, SYSDATE(), NULL, 'ruleKey=javascript:Semicolon;profileKey=js-sonar-way-84449;severity=MINOR;key=js-sonar-way-84449:javascript:Semicolon', 'QPROFILE', 'ACTIVATED', NULL, 'e37330fb-5838-4299-ac53-9daec90fc988'),
(86, SYSDATE(), NULL, 'ruleKey=javascript:MultilineStringLiterals;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:MultilineStringLiterals', 'QPROFILE', 'ACTIVATED', NULL, '67aa6a16-40ea-4665-9f96-d5b85e8e5fc3'),
(87, SYSDATE(), NULL, 'ruleKey=javascript:ArrayAndObjectConstructors;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:ArrayAndObjectConstructors', 'QPROFILE', 'ACTIVATED', NULL, 'f7b8f122-e7c9-423d-ac44-f89726c30d2e'),
(88, SYSDATE(), NULL, 'ruleKey=javascript:BitwiseOperators;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:BitwiseOperators', 'QPROFILE', 'ACTIVATED', NULL, 'dbbc3387-937e-4420-8e24-788233ad1e13'),
(89, SYSDATE(), NULL, 'ruleKey=javascript:PrimitiveWrappers;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:PrimitiveWrappers', 'QPROFILE', 'ACTIVATED', NULL, '8e46b1f7-574d-401d-b555-a2edfba218cc'),
(90, SYSDATE(), NULL, 'ruleKey=javascript:ForIn;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:ForIn', 'QPROFILE', 'ACTIVATED', NULL, '5d979466-5d55-4284-adfd-2bd67e5192c0'),
(91, SYSDATE(), NULL, 'ruleKey=javascript:FunctionDeclarationsWithinBlocks;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:FunctionDeclarationsWithinBlocks', 'QPROFILE', 'ACTIVATED', NULL, 'da1cf5ab-d8c9-4ad8-89aa-4f6db719a858'),
(92, SYSDATE(), NULL, 'ruleKey=javascript:TrailingComma;profileKey=js-sonar-way-84449;severity=BLOCKER;key=js-sonar-way-84449:javascript:TrailingComma', 'QPROFILE', 'ACTIVATED', NULL, '54b73114-9e42-4558-89d6-7412d6aaedc5'),
(93, SYSDATE(), NULL, 'ruleKey=javascript:LabelPlacement;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:LabelPlacement', 'QPROFILE', 'ACTIVATED', NULL, '5b78f661-2796-471d-bd4a-3c6153c3d91f'),
(94, SYSDATE(), NULL, 'ruleKey=javascript:UnreachableCode;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:UnreachableCode', 'QPROFILE', 'ACTIVATED', NULL, '07d7f681-4726-4cb5-b99b-9df506f3daba'),
(95, SYSDATE(), NULL, 'ruleKey=javascript:SwitchWithoutDefault;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:SwitchWithoutDefault', 'QPROFILE', 'ACTIVATED', NULL, '689a0a19-f477-49f6-a5cb-cde3bd5ae236'),
(96, SYSDATE(), NULL, 'ruleKey=javascript:NonEmptyCaseWithoutBreak;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:NonEmptyCaseWithoutBreak', 'QPROFILE', 'ACTIVATED', NULL, '42472597-c92c-4b5f-ab07-516e1cf6f9c4'),
(97, SYSDATE(), NULL, 'ruleKey=javascript:HtmlComments;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:HtmlComments', 'QPROFILE', 'ACTIVATED', NULL, '83815718-8a0a-4e73-a398-50cfd796c8e0'),
(98, SYSDATE(), NULL, 'ruleKey=javascript:EmptyBlock;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:EmptyBlock', 'QPROFILE', 'ACTIVATED', NULL, '10b31618-b206-4111-b411-27631b2e0a90'),
(99, SYSDATE(), NULL, 'param_maximumFunctionParameters=7;ruleKey=javascript:ExcessiveParameterList;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:ExcessiveParameterList', 'QPROFILE', 'ACTIVATED', NULL, '5cf21c70-8d91-4050-8012-f5becb615518'),
(100, SYSDATE(), NULL, 'ruleKey=javascript:CollapsibleIfStatements;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:CollapsibleIfStatements', 'QPROFILE', 'ACTIVATED', NULL, '5c7fc41c-459c-494f-9781-f777e67e8c4a'),
(101, SYSDATE(), NULL, 'ruleKey=javascript:ConstructorFunctionsForSideEffects;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:ConstructorFunctionsForSideEffects', 'QPROFILE', 'ACTIVATED', NULL, '029f3c77-120f-4262-8412-38027d2ac69a'),
(102, SYSDATE(), NULL, 'ruleKey=javascript:FutureReservedWords;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:FutureReservedWords', 'QPROFILE', 'ACTIVATED', NULL, '9c71762c-e4e2-4468-9148-6dc85c60e675'),
(103, SYSDATE(), NULL, 'ruleKey=javascript:DuplicateFunctionArgument;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:DuplicateFunctionArgument', 'QPROFILE', 'ACTIVATED', NULL, '26192cc6-c00b-46e3-a6aa-1ffd1984a6eb'),
(104, SYSDATE(), NULL, 'ruleKey=javascript:DuplicatePropertyName;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:DuplicatePropertyName', 'QPROFILE', 'ACTIVATED', NULL, '8c918245-6d9c-4e2c-87dd-0c7d6cdc682f'),
(105, SYSDATE(), NULL, 'ruleKey=javascript:OctalNumber;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:OctalNumber', 'QPROFILE', 'ACTIVATED', NULL, '99d59418-d2bc-4c81-ab12-81c4c99f183a'),
(106, SYSDATE(), NULL, 'ruleKey=javascript:StrictMode;profileKey=js-sonar-way-84449;severity=INFO;key=js-sonar-way-84449:javascript:StrictMode', 'QPROFILE', 'ACTIVATED', NULL, '4e4af819-a0e9-49e3-8df0-b8b3b26fa19c'),
(107, SYSDATE(), NULL, 'ruleKey=javascript:ConditionalComment;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:ConditionalComment', 'QPROFILE', 'ACTIVATED', NULL, 'cede8d18-5ec2-45f5-964a-600a48fffac4'),
(108, SYSDATE(), NULL, 'ruleKey=javascript:TabCharacter;profileKey=js-sonar-way-84449;severity=MINOR;key=js-sonar-way-84449:javascript:TabCharacter', 'QPROFILE', 'ACTIVATED', NULL, '39269257-dde6-4efb-884e-4a284c66cae9'),
(109, SYSDATE(), NULL, 'ruleKey=javascript:TrailingWhitespace;profileKey=js-sonar-way-84449;severity=MINOR;key=js-sonar-way-84449:javascript:TrailingWhitespace', 'QPROFILE', 'ACTIVATED', NULL, '3e7c5b85-84b3-4513-8a25-2b68fd061cff'),
(110, SYSDATE(), NULL, 'param_legalCommentPattern=^//\\s*+[^\\s]++$;ruleKey=javascript:TrailingComment;profileKey=js-sonar-way-84449;severity=INFO;key=js-sonar-way-84449:javascript:TrailingComment', 'QPROFILE', 'ACTIVATED', NULL, '844d4a41-179e-4c8e-baed-2f06f91ce405'),
(111, SYSDATE(), NULL, 'ruleKey=javascript:BoundOrAssignedEvalOrArguments;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:BoundOrAssignedEvalOrArguments', 'QPROFILE', 'ACTIVATED', NULL, 'b50d60d0-75c8-448d-a4c4-deb2dd3bb63c'),
(112, SYSDATE(), NULL, 'ruleKey=javascript:NamedFunctionExpression;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:NamedFunctionExpression', 'QPROFILE', 'ACTIVATED', NULL, 'f07e8ea6-4b16-43f7-a10f-769109b5d8c7'),
(113, SYSDATE(), NULL, 'ruleKey=javascript:FunctionDefinitionInsideLoop;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:FunctionDefinitionInsideLoop', 'QPROFILE', 'ACTIVATED', NULL, 'afbd42a2-00a7-4434-b528-348824c1546c'),
(114, SYSDATE(), NULL, 'ruleKey=javascript:TooManyBreakOrContinueInLoop;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:TooManyBreakOrContinueInLoop', 'QPROFILE', 'ACTIVATED', NULL, '9f4ee938-706d-4368-8f93-c1a41cca60de'),
(115, SYSDATE(), NULL, 'ruleKey=javascript:UnusedVariable;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:UnusedVariable', 'QPROFILE', 'ACTIVATED', NULL, '00968d83-1eab-42d0-9d7b-5fa62a496c52'),
(116, SYSDATE(), NULL, 'ruleKey=javascript:UnusedFunctionArgument;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:UnusedFunctionArgument', 'QPROFILE', 'ACTIVATED', NULL, 'deeef762-9196-4dc2-82ea-1f79fd02ac58'),
(117, SYSDATE(), NULL, 'ruleKey=javascript:VariableDeclarationAfterUsage;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:VariableDeclarationAfterUsage', 'QPROFILE', 'ACTIVATED', NULL, '1190086f-66f5-43f3-9fb8-86c492f51a91'),
(118, SYSDATE(), NULL, 'param_format=^[a-z][a-zA-Z0-9]*$;ruleKey=javascript:S100;profileKey=js-sonar-way-84449;severity=MINOR;key=js-sonar-way-84449:javascript:S100', 'QPROFILE', 'ACTIVATED', NULL, 'a9c1d9e3-7757-48a9-8cf1-c01fa2ef805d'),
(119, SYSDATE(), NULL, 'ruleKey=javascript:S1442;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:S1442', 'QPROFILE', 'ACTIVATED', NULL, 'ffea660c-63a8-476d-a5fa-4640e82f11ba'),
(120, SYSDATE(), NULL, 'ruleKey=javascript:S1134;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:S1134', 'QPROFILE', 'ACTIVATED', NULL, '6639e3f1-3319-4baa-b617-840f7720a19d'),
(121, SYSDATE(), NULL, 'ruleKey=javascript:S1135;profileKey=js-sonar-way-84449;severity=INFO;key=js-sonar-way-84449:javascript:S1135', 'QPROFILE', 'ACTIVATED', NULL, 'c7d37d1f-7062-415f-a88d-c7e3010a3721'),
(122, SYSDATE(), NULL, 'param_maximum=1000;ruleKey=javascript:S104;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:S104', 'QPROFILE', 'ACTIVATED', NULL, '34f111c2-30c6-4726-8e95-04c7ebec2ffb'),
(123, SYSDATE(), NULL, 'ruleKey=javascript:S1301;profileKey=js-sonar-way-84449;severity=MINOR;key=js-sonar-way-84449:javascript:S1301', 'QPROFILE', 'ACTIVATED', NULL, '83d36e88-54a1-452c-b1ca-732ff75d6421'),
(124, SYSDATE(), NULL, 'ruleKey=javascript:S1145;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:S1145', 'QPROFILE', 'ACTIVATED', NULL, '4259c6d9-8e32-4457-8db0-ca01eb3c4d73'),
(125, SYSDATE(), NULL, 'ruleKey=javascript:S1126;profileKey=js-sonar-way-84449;severity=MINOR;key=js-sonar-way-84449:javascript:S1126', 'QPROFILE', 'ACTIVATED', NULL, 'e5f33b38-eb1d-40e0-9e9d-990ad7edb374'),
(126, SYSDATE(), NULL, 'ruleKey=javascript:S1264;profileKey=js-sonar-way-84449;severity=MINOR;key=js-sonar-way-84449:javascript:S1264', 'QPROFILE', 'ACTIVATED', NULL, '0fd8d635-718f-4e23-8b67-ce4f34c596d2'),
(127, SYSDATE(), NULL, 'ruleKey=javascript:S1472;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:S1472', 'QPROFILE', 'ACTIVATED', NULL, '4c70df47-bed4-4f4d-a19a-4c87300a644f'),
(128, SYSDATE(), NULL, 'param_max=100;ruleKey=javascript:S138;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:S138', 'QPROFILE', 'ACTIVATED', NULL, '4bcbd084-376f-4ed9-8820-6aeee544f490'),
(129, SYSDATE(), NULL, 'ruleKey=javascript:S1219;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:S1219', 'QPROFILE', 'ACTIVATED', NULL, '2a78aa71-2738-449a-b455-c4078e7939c3'),
(130, SYSDATE(), NULL, 'ruleKey=javascript:S1125;profileKey=js-sonar-way-84449;severity=MINOR;key=js-sonar-way-84449:javascript:S1125', 'QPROFILE', 'ACTIVATED', NULL, '7521ebcf-28be-4dfa-901b-15cc013a7d98'),
(131, SYSDATE(), NULL, 'param_max=3;ruleKey=javascript:S1067;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:S1067', 'QPROFILE', 'ACTIVATED', NULL, 'abb3f224-24f7-4ba4-9491-4741a9640aa7'),
(132, SYSDATE(), NULL, 'ruleKey=javascript:S1862;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:S1862', 'QPROFILE', 'ACTIVATED', NULL, '582cb599-119a-4cca-85c4-9ca3aeb9ecb3'),
(133, SYSDATE(), NULL, 'ruleKey=javascript:S1871;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:S1871', 'QPROFILE', 'ACTIVATED', NULL, '3964d24a-2540-4400-97de-92bc602e5d55'),
(134, SYSDATE(), NULL, 'ruleKey=javascript:S1764;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:S1764', 'QPROFILE', 'ACTIVATED', NULL, 'b6d2aab9-4ac0-46f0-9e22-48aee0a99538'),
(135, SYSDATE(), NULL, 'ruleKey=javascript:S2228;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:S2228', 'QPROFILE', 'ACTIVATED', NULL, '766e8431-47fb-477d-a840-fa4e9adbfc1f'),
(136, SYSDATE(), NULL, 'ruleKey=javascript:NestedIfDepth;profileKey=js-sonar-way-84449;severity=MAJOR;param_maximumNestingLevel=3;key=js-sonar-way-84449:javascript:NestedIfDepth', 'QPROFILE', 'ACTIVATED', NULL, 'cf53afd6-dda3-4e36-a633-43826e09a4c2'),
(137, SYSDATE(), NULL, 'ruleKey=javascript:S2688;profileKey=js-sonar-way-84449;severity=BLOCKER;key=js-sonar-way-84449:javascript:S2688', 'QPROFILE', 'ACTIVATED', NULL, '4d80fc8c-54e4-497a-9ff6-871e258a5c03'),
(138, SYSDATE(), NULL, 'ruleKey=javascript:S1656;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:S1656', 'QPROFILE', 'ACTIVATED', NULL, 'b085fa3b-b521-4bd7-8c67-40b756786f36'),
(139, SYSDATE(), NULL, 'ruleKey=javascript:S1697;profileKey=js-sonar-way-84449;severity=BLOCKER;key=js-sonar-way-84449:javascript:S1697', 'QPROFILE', 'ACTIVATED', NULL, '91e0c7a0-b5ba-4c72-9f8e-44ffba0424f9'),
(140, SYSDATE(), NULL, 'ruleKey=javascript:S2432;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:S2432', 'QPROFILE', 'ACTIVATED', NULL, '0174cdfc-07da-4ab3-982d-bf3143218233'),
(141, SYSDATE(), NULL, 'ruleKey=javascript:S2123;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:S2123', 'QPROFILE', 'ACTIVATED', NULL, '46761014-b99a-4a6d-85e5-f3b2a505c834'),
(142, SYSDATE(), NULL, 'ruleKey=javascript:S2137;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:S2137', 'QPROFILE', 'ACTIVATED', NULL, 'a00c3feb-daa8-47b4-80f9-01a1b15136da'),
(143, SYSDATE(), NULL, 'ruleKey=javascript:S1994;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:S1994', 'QPROFILE', 'ACTIVATED', NULL, 'ef1ebc2e-0cc0-417d-81dc-c3a3e01c2c21'),
(144, SYSDATE(), NULL, 'ruleKey=javascript:S2251;profileKey=js-sonar-way-84449;severity=BLOCKER;key=js-sonar-way-84449:javascript:S2251', 'QPROFILE', 'ACTIVATED', NULL, '4e34decf-0bdc-4927-b593-fb64e749a78f'),
(145, SYSDATE(), NULL, 'ruleKey=javascript:S888;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:S888', 'QPROFILE', 'ACTIVATED', NULL, '30480fa3-c760-48d2-ae84-eb7b7c876943'),
(146, SYSDATE(), NULL, 'ruleKey=javascript:S2703;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:S2703', 'QPROFILE', 'ACTIVATED', NULL, 'd51b1375-1fe4-458a-9c91-cfc9f4de0820'),
(147, SYSDATE(), NULL, 'ruleKey=javascript:S2814;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:S2814', 'QPROFILE', 'ACTIVATED', NULL, '32e59404-f861-488d-9da7-fc2decd8ff98'),
(148, SYSDATE(), NULL, 'ruleKey=javascript:S1854;profileKey=js-sonar-way-84449;severity=MAJOR;key=js-sonar-way-84449:javascript:S1854', 'QPROFILE', 'ACTIVATED', NULL, 'dde1c4a2-768e-4a43-9fb0-414af2c50491'),
(149, SYSDATE(), NULL, 'ruleKey=javascript:S2870;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:S2870', 'QPROFILE', 'ACTIVATED', NULL, 'f07dac8f-f819-48b0-8d0e-214497e6b75c'),
(150, SYSDATE(), NULL, 'ruleKey=javascript:S930;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:S930', 'QPROFILE', 'ACTIVATED', NULL, '87499db2-36d4-45ef-a193-86d88e0f84ba'),
(151, SYSDATE(), NULL, 'ruleKey=javascript:S2990;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:S2990', 'QPROFILE', 'ACTIVATED', NULL, '5c718966-2457-4104-92f8-470590529caf'),
(152, SYSDATE(), NULL, 'ruleKey=javascript:S2999;param_considerJSDoc=false;profileKey=js-sonar-way-84449;severity=CRITICAL;key=js-sonar-way-84449:javascript:S2999', 'QPROFILE', 'ACTIVATED', NULL, '825db5e8-48d4-49ee-88b8-2d432841d859'),
(153, SYSDATE(), NULL, 'param_markAll=false;ruleKey=xml:IllegalTabCheck;profileKey=xml-sonar-way-11830;severity=MINOR;key=xml-sonar-way-11830:xml:IllegalTabCheck', 'QPROFILE', 'ACTIVATED', NULL, 'd642d658-3e0d-4091-beda-f8926a5a7cd6'),
(154, SYSDATE(), NULL, 'ruleKey=xml:IndentCheck;param_indentSize=2;param_tabSize=2;profileKey=xml-sonar-way-11830;severity=MINOR;key=xml-sonar-way-11830:xml:IndentCheck', 'QPROFILE', 'ACTIVATED', NULL, '4c1e3f56-0d29-45fc-a651-0deb9a8baeb9'),
(155, SYSDATE(), NULL, 'ruleKey=xml:NewlineCheck;profileKey=xml-sonar-way-11830;severity=MINOR;key=xml-sonar-way-11830:xml:NewlineCheck', 'QPROFILE', 'ACTIVATED', NULL, '00c74afe-d34f-4425-90cb-4816c3a9f9b6'),
(156, SYSDATE(), NULL, 'ruleKey=xml:S1778;profileKey=xml-sonar-way-11830;severity=MAJOR;key=xml-sonar-way-11830:xml:S1778', 'QPROFILE', 'ACTIVATED', NULL, 'e7b90b60-f479-4387-95d9-5a754b64a8ba'),
(157, SYSDATE(), NULL, 'ruleKey=Web:S1827;profileKey=web-sonar-way-33055;severity=MAJOR;key=web-sonar-way-33055:Web:S1827', 'QPROFILE', 'ACTIVATED', NULL, '7d871a4f-e354-4744-9ebf-27b080ceae9a'),
(158, SYSDATE(), NULL, 'ruleKey=Web:FileLengthCheck;profileKey=web-sonar-way-33055;severity=MAJOR;param_maxLength=1000;key=web-sonar-way-33055:Web:FileLengthCheck', 'QPROFILE', 'ACTIVATED', NULL, 'cb93e078-4084-4a49-9b90-d3e7a3fa3232'),
(159, SYSDATE(), NULL, 'ruleKey=Web:AvoidCommentedOutCodeCheck;profileKey=web-sonar-way-33055;severity=MAJOR;key=web-sonar-way-33055:Web:AvoidCommentedOutCodeCheck', 'QPROFILE', 'ACTIVATED', NULL, 'd8f69aa9-cfd1-4dfd-a966-a41dce99c038'),
(160, SYSDATE(), NULL, 'ruleKey=Web:ImgWithoutAltCheck;profileKey=web-sonar-way-33055;severity=MAJOR;key=web-sonar-way-33055:Web:ImgWithoutAltCheck', 'QPROFILE', 'ACTIVATED', NULL, 'b8451bbd-1ad4-42fc-bca4-6c62e04b7aca'),
(161, SYSDATE(), NULL, 'ruleKey=Web:UnsupportedTagsInHtml5Check;profileKey=web-sonar-way-33055;severity=MAJOR;key=web-sonar-way-33055:Web:UnsupportedTagsInHtml5Check', 'QPROFILE', 'ACTIVATED', NULL, 'd888abb2-f63b-4875-ab5e-e222923d8d22'),
(162, SYSDATE(), NULL, 'ruleKey=Web:MetaRefreshCheck;profileKey=web-sonar-way-33055;severity=MAJOR;key=web-sonar-way-33055:Web:MetaRefreshCheck', 'QPROFILE', 'ACTIVATED', NULL, '44144b2a-fa83-4de1-874a-e2d5973528ac'),
(163, SYSDATE(), NULL, 'ruleKey=Web:LinkToImageCheck;profileKey=web-sonar-way-33055;severity=MAJOR;key=web-sonar-way-33055:Web:LinkToImageCheck', 'QPROFILE', 'ACTIVATED', NULL, '40821ca1-f572-48ae-9b2c-4e7b99994e9d'),
(164, SYSDATE(), NULL, 'ruleKey=Web:ServerSideImageMapsCheck;profileKey=web-sonar-way-33055;severity=MAJOR;key=web-sonar-way-33055:Web:ServerSideImageMapsCheck', 'QPROFILE', 'ACTIVATED', NULL, '5151fbcb-abbb-4445-b4b1-cb6c29bcc177'),
(165, SYSDATE(), NULL, 'ruleKey=Web:BoldAndItalicTagsCheck;profileKey=web-sonar-way-33055;severity=MAJOR;key=web-sonar-way-33055:Web:BoldAndItalicTagsCheck', 'QPROFILE', 'ACTIVATED', NULL, 'f1b70668-6e69-4bb1-8448-572e19ee8446'),
(166, SYSDATE(), NULL, 'ruleKey=Web:PageWithoutTitleCheck;profileKey=web-sonar-way-33055;severity=MAJOR;key=web-sonar-way-33055:Web:PageWithoutTitleCheck', 'QPROFILE', 'ACTIVATED', NULL, '5bddd341-dc96-4a9e-aabb-0df1e4e760c2'),
(167, SYSDATE(), NULL, 'ruleKey=Web:ItemTagNotWithinContainerTagCheck;profileKey=web-sonar-way-33055;severity=CRITICAL;key=web-sonar-way-33055:Web:ItemTagNotWithinContainerTagCheck', 'QPROFILE', 'ACTIVATED', NULL, '9b7e94b6-168c-44d0-9c41-5d40f5456077'),
(168, SYSDATE(), NULL, 'ruleKey=Web:FlashUsesBothObjectAndEmbedCheck;profileKey=web-sonar-way-33055;severity=MAJOR;key=web-sonar-way-33055:Web:FlashUsesBothObjectAndEmbedCheck', 'QPROFILE', 'ACTIVATED', NULL, 'e5ac488b-daea-4f21-95f4-1ffa8bc7bb79'),
(169, SYSDATE(), NULL, 'ruleKey=Web:DoctypePresenceCheck;profileKey=web-sonar-way-33055;severity=MAJOR;key=web-sonar-way-33055:Web:DoctypePresenceCheck', 'QPROFILE', 'ACTIVATED', NULL, 'fa4c5a6f-07eb-45d5-b378-3501ce236d5c'),
(170, SYSDATE(), NULL, 'ruleKey=Web:PageWithoutFaviconCheck;profileKey=web-sonar-way-33055;severity=MAJOR;key=web-sonar-way-33055:Web:PageWithoutFaviconCheck', 'QPROFILE', 'ACTIVATED', NULL, 'd5f70918-ed77-4075-b655-4b5b6cea8a2c'),
(171, SYSDATE(), NULL, 'ruleKey=findbugs:SA_LOCAL_SELF_COMPARISON;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SA_LOCAL_SELF_COMPARISON', 'QPROFILE', 'ACTIVATED', NULL, 'e97987c4-c723-4b8b-b09b-eb880d3171b0'),
(172, SYSDATE(), NULL, 'ruleKey=findbugs:UG_SYNC_SET_UNSYNC_GET;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:UG_SYNC_SET_UNSYNC_GET', 'QPROFILE', 'ACTIVATED', NULL, '8414f906-5ed0-463f-9a9c-03c6b3375bf3'),
(173, SYSDATE(), NULL, 'ruleKey=findbugs:IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION', 'QPROFILE', 'ACTIVATED', NULL, 'e22340fd-7411-46ed-b4d4-1ee52213612b'),
(174, SYSDATE(), NULL, 'ruleKey=findbugs:NM_FIELD_NAMING_CONVENTION;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NM_FIELD_NAMING_CONVENTION', 'QPROFILE', 'ACTIVATED', NULL, 'e1e899ad-8db8-450f-aa48-caddaaa73158'),
(175, SYSDATE(), NULL, 'ruleKey=findbugs:BC_IMPOSSIBLE_DOWNCAST;profileKey=java-findbugs-42626;severity=BLOCKER;key=java-findbugs-42626:findbugs:BC_IMPOSSIBLE_DOWNCAST', 'QPROFILE', 'ACTIVATED', NULL, '7751552c-1b6a-4552-8207-10b1c22fe8fc'),
(176, SYSDATE(), NULL, 'ruleKey=findbugs:RV_NEGATING_RESULT_OF_COMPARETO;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:RV_NEGATING_RESULT_OF_COMPARETO', 'QPROFILE', 'ACTIVATED', NULL, '50c6a30e-7e6d-4f29-9636-d6aabf170bd2'),
(177, SYSDATE(), NULL, 'ruleKey=findbugs:SA_FIELD_SELF_COMPUTATION;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SA_FIELD_SELF_COMPUTATION', 'QPROFILE', 'ACTIVATED', NULL, 'f5797691-c805-4550-8aec-eacce1f85e16'),
(178, SYSDATE(), NULL, 'ruleKey=findbugs:EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS', 'QPROFILE', 'ACTIVATED', NULL, 'ba28dda6-75f8-4f1f-a273-5efc2b6ed4d7'),
(179, SYSDATE(), NULL, 'ruleKey=findbugs:TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK', 'QPROFILE', 'ACTIVATED', NULL, 'ace4335b-2319-4cab-9d3c-3c03b93d4cac'),
(180, SYSDATE(), NULL, 'ruleKey=findbugs:NO_NOTIFY_NOT_NOTIFYALL;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NO_NOTIFY_NOT_NOTIFYALL', 'QPROFILE', 'ACTIVATED', NULL, 'a0c540c9-23ab-45cd-b54e-1cdf6d7e4fe6'),
(181, SYSDATE(), NULL, 'ruleKey=findbugs:BX_UNBOXING_IMMEDIATELY_REBOXED;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:BX_UNBOXING_IMMEDIATELY_REBOXED', 'QPROFILE', 'ACTIVATED', NULL, 'c593da7b-0807-4fc9-9984-2efc2531b5ca'),
(182, SYSDATE(), NULL, 'ruleKey=findbugs:VA_FORMAT_STRING_BAD_ARGUMENT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:VA_FORMAT_STRING_BAD_ARGUMENT', 'QPROFILE', 'ACTIVATED', NULL, 'de54c84d-b1b2-4a81-8cec-d1b2f2d09253'),
(183, SYSDATE(), NULL, 'ruleKey=findbugs:SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH', 'QPROFILE', 'ACTIVATED', NULL, 'c10b45da-ebb3-4bc9-a242-fe7f25fa4c49'),
(184, SYSDATE(), NULL, 'ruleKey=findbugs:LI_LAZY_INIT_UPDATE_STATIC;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:LI_LAZY_INIT_UPDATE_STATIC', 'QPROFILE', 'ACTIVATED', NULL, '71212d1a-88e9-4bd4-819a-8f2639925ed0'),
(185, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED', 'QPROFILE', 'ACTIVATED', NULL, '654264ab-87ef-4563-977c-b98ca500434b'),
(186, SYSDATE(), NULL, 'ruleKey=findbugs:SE_NONLONG_SERIALVERSIONID;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SE_NONLONG_SERIALVERSIONID', 'QPROFILE', 'ACTIVATED', NULL, 'aea59a71-d8bd-4591-b171-5388569601e0'),
(187, SYSDATE(), NULL, 'ruleKey=findbugs:BC_UNCONFIRMED_CAST_OF_RETURN_VALUE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:BC_UNCONFIRMED_CAST_OF_RETURN_VALUE', 'QPROFILE', 'ACTIVATED', NULL, 'c9ed2ff0-e4a6-4d35-a1d2-74c24b4e4eda'),
(188, SYSDATE(), NULL, 'ruleKey=findbugs:ODR_OPEN_DATABASE_RESOURCE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:ODR_OPEN_DATABASE_RESOURCE', 'QPROFILE', 'ACTIVATED', NULL, '9d193235-88e7-493d-ae9b-fb619d9d0396'),
(189, SYSDATE(), NULL, 'ruleKey=findbugs:RC_REF_COMPARISON_BAD_PRACTICE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:RC_REF_COMPARISON_BAD_PRACTICE', 'QPROFILE', 'ACTIVATED', NULL, '7f0bff8a-831b-4399-9b4e-79068c38c9c9'),
(190, SYSDATE(), NULL, 'ruleKey=findbugs:VO_VOLATILE_REFERENCE_TO_ARRAY;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:VO_VOLATILE_REFERENCE_TO_ARRAY', 'QPROFILE', 'ACTIVATED', NULL, 'b279d126-b67d-4c2c-a9bd-4b7e67d7782d'),
(191, SYSDATE(), NULL, 'ruleKey=findbugs:ITA_INEFFICIENT_TO_ARRAY;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:ITA_INEFFICIENT_TO_ARRAY', 'QPROFILE', 'ACTIVATED', NULL, '89030a2c-7b96-47d3-b4ad-cf6844e752c1'),
(192, SYSDATE(), NULL, 'ruleKey=findbugs:DM_NUMBER_CTOR;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DM_NUMBER_CTOR', 'QPROFILE', 'ACTIVATED', NULL, '1bf71b8d-42ff-4156-bff8-95a904b889f6'),
(193, SYSDATE(), NULL, 'ruleKey=findbugs:XSS_REQUEST_PARAMETER_TO_JSP_WRITER;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:XSS_REQUEST_PARAMETER_TO_JSP_WRITER', 'QPROFILE', 'ACTIVATED', NULL, '3eb79742-a365-47f9-ae21-cf4dddc76789'),
(194, SYSDATE(), NULL, 'ruleKey=findbugs:SIC_INNER_SHOULD_BE_STATIC;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SIC_INNER_SHOULD_BE_STATIC', 'QPROFILE', 'ACTIVATED', NULL, '4c9a0441-20c3-4973-a721-1563b9ec337a'),
(195, SYSDATE(), NULL, 'ruleKey=findbugs:IJU_TEARDOWN_NO_SUPER;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IJU_TEARDOWN_NO_SUPER', 'QPROFILE', 'ACTIVATED', NULL, '7eca3eff-1363-4653-9e36-0e0619bc1a7f'),
(196, SYSDATE(), NULL, 'ruleKey=findbugs:RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE', 'QPROFILE', 'ACTIVATED', NULL, 'c121c0aa-05d3-4e34-b775-e8190b00c9bb'),
(197, SYSDATE(), NULL, 'ruleKey=findbugs:NM_BAD_EQUAL;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NM_BAD_EQUAL', 'QPROFILE', 'ACTIVATED', NULL, 'acf8fd1d-58ee-49c0-bbc4-ab83f82aef2a'),
(198, SYSDATE(), NULL, 'ruleKey=findbugs:DM_BOXED_PRIMITIVE_TOSTRING;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DM_BOXED_PRIMITIVE_TOSTRING', 'QPROFILE', 'ACTIVATED', NULL, '45fe91b7-d1e4-4132-a000-b6e4accf1d44'),
(199, SYSDATE(), NULL, 'ruleKey=findbugs:IJU_SUITE_NOT_STATIC;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IJU_SUITE_NOT_STATIC', 'QPROFILE', 'ACTIVATED', NULL, '719defa8-bb61-4273-8d76-cba0632a8124'),
(200, SYSDATE(), NULL, 'ruleKey=findbugs:IM_MULTIPLYING_RESULT_OF_IREM;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IM_MULTIPLYING_RESULT_OF_IREM', 'QPROFILE', 'ACTIVATED', NULL, 'a38a1b87-3237-48be-acd6-bcf44026891f'),
(201, SYSDATE(), NULL, 'ruleKey=findbugs:IL_CONTAINER_ADDED_TO_ITSELF;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IL_CONTAINER_ADDED_TO_ITSELF', 'QPROFILE', 'ACTIVATED', NULL, '0f68d1be-a578-464c-aea8-54c4831c2261'),
(202, SYSDATE(), NULL, 'ruleKey=findbugs:ES_COMPARING_PARAMETER_STRING_WITH_EQ;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:ES_COMPARING_PARAMETER_STRING_WITH_EQ', 'QPROFILE', 'ACTIVATED', NULL, 'b93e392d-f864-429d-9e31-54f9509e2ac0'),
(203, SYSDATE(), NULL, 'ruleKey=findbugs:VA_FORMAT_STRING_BAD_CONVERSION;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:VA_FORMAT_STRING_BAD_CONVERSION', 'QPROFILE', 'ACTIVATED', NULL, 'cd6d2d8f-bce1-45d3-b7de-da08db2f3147'),
(204, SYSDATE(), NULL, 'ruleKey=findbugs:SR_NOT_CHECKED;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SR_NOT_CHECKED', 'QPROFILE', 'ACTIVATED', NULL, '1cd06bc3-8336-42d3-a333-84e449496645'),
(205, SYSDATE(), NULL, 'ruleKey=findbugs:DB_DUPLICATE_SWITCH_CLAUSES;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DB_DUPLICATE_SWITCH_CLAUSES', 'QPROFILE', 'ACTIVATED', NULL, '8c3b05ca-ac33-4afb-8602-c7e5b5bf5cae'),
(206, SYSDATE(), NULL, 'ruleKey=findbugs:NP_NULL_PARAM_DEREF_NONVIRTUAL;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_NULL_PARAM_DEREF_NONVIRTUAL', 'QPROFILE', 'ACTIVATED', NULL, 'ffaaa011-9126-441a-b94c-554da1c2e242'),
(207, SYSDATE(), NULL, 'ruleKey=findbugs:IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN', 'QPROFILE', 'ACTIVATED', NULL, '6471e17c-9c88-4be2-9233-44f185adb2b6'),
(208, SYSDATE(), NULL, 'ruleKey=findbugs:RV_RETURN_VALUE_IGNORED;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:RV_RETURN_VALUE_IGNORED', 'QPROFILE', 'ACTIVATED', NULL, 'eaec4a15-4854-4b74-8f35-c49760df1368'),
(209, SYSDATE(), NULL, 'ruleKey=findbugs:RV_EXCEPTION_NOT_THROWN;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:RV_EXCEPTION_NOT_THROWN', 'QPROFILE', 'ACTIVATED', NULL, 'b7859092-ecaf-4ef7-9ba4-d693a76cf13a'),
(210, SYSDATE(), NULL, 'ruleKey=findbugs:DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED', 'QPROFILE', 'ACTIVATED', NULL, 'f379ba8f-0b52-4865-888b-e8d37a682019'),
(211, SYSDATE(), NULL, 'ruleKey=findbugs:MS_SHOULD_BE_REFACTORED_TO_BE_FINAL;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:MS_SHOULD_BE_REFACTORED_TO_BE_FINAL', 'QPROFILE', 'ACTIVATED', NULL, 'b7057907-c880-412f-a8dd-b52f70b7e45d'),
(212, SYSDATE(), NULL, 'ruleKey=findbugs:CO_SELF_NO_OBJECT;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:CO_SELF_NO_OBJECT', 'QPROFILE', 'ACTIVATED', NULL, '5b16e55f-d8a1-4b7b-9ea5-31b34cbb7792');
INSERT INTO `activities` (`id`, `created_at`, `user_login`, `data_field`, `log_type`, `log_action`, `log_message`, `log_key`) VALUES
(213, SYSDATE(), NULL, 'ruleKey=findbugs:MS_MUTABLE_ARRAY;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:MS_MUTABLE_ARRAY', 'QPROFILE', 'ACTIVATED', NULL, 'fb262edd-8598-437a-b3c6-b504dd042966'),
(214, SYSDATE(), NULL, 'ruleKey=findbugs:DM_CONVERT_CASE;profileKey=java-findbugs-42626;severity=INFO;key=java-findbugs-42626:findbugs:DM_CONVERT_CASE', 'QPROFILE', 'ACTIVATED', NULL, '730b905a-4dd9-44c2-a580-fa1c53f79ad0'),
(215, SYSDATE(), NULL, 'ruleKey=findbugs:INT_VACUOUS_COMPARISON;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:INT_VACUOUS_COMPARISON', 'QPROFILE', 'ACTIVATED', NULL, '713251eb-9088-47f6-ba58-1d76da9e805c'),
(216, SYSDATE(), NULL, 'ruleKey=findbugs:UW_UNCOND_WAIT;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:UW_UNCOND_WAIT', 'QPROFILE', 'ACTIVATED', NULL, 'd3990333-5fa8-499a-bb37-1f80192f72c3'),
(217, SYSDATE(), NULL, 'ruleKey=findbugs:MS_FINAL_PKGPROTECT;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:MS_FINAL_PKGPROTECT', 'QPROFILE', 'ACTIVATED', NULL, '362df10c-c95b-4c7d-b41a-a0434271d438'),
(218, SYSDATE(), NULL, 'ruleKey=findbugs:VO_VOLATILE_INCREMENT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:VO_VOLATILE_INCREMENT', 'QPROFILE', 'ACTIVATED', NULL, 'efb7fa90-e2b7-4092-9d97-ae08183f8ff4'),
(219, SYSDATE(), NULL, 'ruleKey=findbugs:PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS', 'QPROFILE', 'ACTIVATED', NULL, 'ae44e27f-9b93-47ea-b4ae-38d2a8483a5e'),
(220, SYSDATE(), NULL, 'ruleKey=findbugs:DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD', 'QPROFILE', 'ACTIVATED', NULL, 'a8c2039a-17ad-4fe3-8ab9-95a8eb3aca2b'),
(221, SYSDATE(), NULL, 'ruleKey=findbugs:CO_COMPARETO_RESULTS_MIN_VALUE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:CO_COMPARETO_RESULTS_MIN_VALUE', 'QPROFILE', 'ACTIVATED', NULL, 'f7418bc0-7d13-4100-85e3-c61a6176af33'),
(222, SYSDATE(), NULL, 'ruleKey=findbugs:NP_BOOLEAN_RETURN_NULL;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NP_BOOLEAN_RETURN_NULL', 'QPROFILE', 'ACTIVATED', NULL, 'f9ec272e-3a43-41a4-a30f-4347a3e322fb'),
(223, SYSDATE(), NULL, 'ruleKey=findbugs:DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE', 'QPROFILE', 'ACTIVATED', NULL, '5d63e847-67f2-4ba5-bf72-bdd2167f9efd'),
(224, SYSDATE(), NULL, 'ruleKey=findbugs:TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK', 'QPROFILE', 'ACTIVATED', NULL, '9373c058-8dc9-4448-ad6b-e0ecb697b6c5'),
(225, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_RANDOM_USED_ONLY_ONCE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DMI_RANDOM_USED_ONLY_ONCE', 'QPROFILE', 'ACTIVATED', NULL, '956aecf1-e2c3-4e12-8d9a-08f14977371f'),
(226, SYSDATE(), NULL, 'ruleKey=findbugs:BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION', 'QPROFILE', 'ACTIVATED', NULL, '8b824c14-883d-49f1-9f29-8b26b2bf2c05'),
(227, SYSDATE(), NULL, 'ruleKey=findbugs:BIT_SIGNED_CHECK_HIGH_BIT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:BIT_SIGNED_CHECK_HIGH_BIT', 'QPROFILE', 'ACTIVATED', NULL, 'da854efb-8aff-41d5-bfa5-edb42deaad53'),
(228, SYSDATE(), NULL, 'ruleKey=findbugs:DE_MIGHT_DROP;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DE_MIGHT_DROP', 'QPROFILE', 'ACTIVATED', NULL, '87e39228-023e-4419-b949-3b93f9445fcf'),
(229, SYSDATE(), NULL, 'ruleKey=findbugs:DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE', 'QPROFILE', 'ACTIVATED', NULL, 'bbcfb30b-21df-4137-9409-073d62c41e83'),
(230, SYSDATE(), NULL, 'ruleKey=findbugs:RV_DONT_JUST_NULL_CHECK_READLINE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:RV_DONT_JUST_NULL_CHECK_READLINE', 'QPROFILE', 'ACTIVATED', NULL, '76659ccc-fc79-4259-af99-15ee5c5bddac'),
(231, SYSDATE(), NULL, 'ruleKey=findbugs:RV_CHECK_FOR_POSITIVE_INDEXOF;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:RV_CHECK_FOR_POSITIVE_INDEXOF', 'QPROFILE', 'ACTIVATED', NULL, '8a2a363d-3ec3-4bfe-81e5-290b248020fa'),
(232, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_USELESS_SUBSTRING;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DMI_USELESS_SUBSTRING', 'QPROFILE', 'ACTIVATED', NULL, '5eb39222-b092-4863-ba9e-394572b9cfcc'),
(233, SYSDATE(), NULL, 'ruleKey=findbugs:URF_UNREAD_FIELD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:URF_UNREAD_FIELD', 'QPROFILE', 'ACTIVATED', NULL, '728424cf-205a-4b4d-b4b3-778dd6fadd6d'),
(234, SYSDATE(), NULL, 'ruleKey=findbugs:NP_NULL_INSTANCEOF;profileKey=java-findbugs-42626;severity=BLOCKER;key=java-findbugs-42626:findbugs:NP_NULL_INSTANCEOF', 'QPROFILE', 'ACTIVATED', NULL, '6076c03e-5faa-4653-b301-b921b974c851'),
(235, SYSDATE(), NULL, 'ruleKey=findbugs:DM_MONITOR_WAIT_ON_CONDITION;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DM_MONITOR_WAIT_ON_CONDITION', 'QPROFILE', 'ACTIVATED', NULL, 'bd3095c9-d37e-4513-b41c-4ee3eeb16c5d'),
(236, SYSDATE(), NULL, 'ruleKey=findbugs:TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK', 'QPROFILE', 'ACTIVATED', NULL, '22f3df59-3e6c-475b-9c2d-2c1259559afe'),
(237, SYSDATE(), NULL, 'ruleKey=findbugs:MS_PKGPROTECT;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:MS_PKGPROTECT', 'QPROFILE', 'ACTIVATED', NULL, '2052d8b0-de67-4e1d-ad62-595353334b80'),
(238, SYSDATE(), NULL, 'ruleKey=findbugs:RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE', 'QPROFILE', 'ACTIVATED', NULL, 'e7e692ad-6cdf-4e1e-940c-91324d23f26c'),
(239, SYSDATE(), NULL, 'ruleKey=findbugs:ICAST_INT_2_LONG_AS_INSTANT;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:ICAST_INT_2_LONG_AS_INSTANT', 'QPROFILE', 'ACTIVATED', NULL, 'fc5e7f4e-8c3a-4833-900a-55151206e9cc'),
(240, SYSDATE(), NULL, 'ruleKey=findbugs:NP_LOAD_OF_KNOWN_NULL_VALUE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_LOAD_OF_KNOWN_NULL_VALUE', 'QPROFILE', 'ACTIVATED', NULL, '13fa3c7a-93a7-4ad3-b63c-68a8d9e595a4'),
(241, SYSDATE(), NULL, 'ruleKey=findbugs:EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC', 'QPROFILE', 'ACTIVATED', NULL, '38cf0ba0-1f90-40d7-a25b-4f2738006c82'),
(242, SYSDATE(), NULL, 'ruleKey=findbugs:SWL_SLEEP_WITH_LOCK_HELD;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SWL_SLEEP_WITH_LOCK_HELD', 'QPROFILE', 'ACTIVATED', NULL, '135083cf-8f7e-4f6b-9672-b991c7f651e8'),
(243, SYSDATE(), NULL, 'ruleKey=findbugs:EC_UNRELATED_INTERFACES;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:EC_UNRELATED_INTERFACES', 'QPROFILE', 'ACTIVATED', NULL, '4aa242de-cfef-42c9-bd9c-b6d3558e7ca0'),
(244, SYSDATE(), NULL, 'ruleKey=findbugs:DM_FP_NUMBER_CTOR;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DM_FP_NUMBER_CTOR', 'QPROFILE', 'ACTIVATED', NULL, '501b1de0-8bab-4f1a-bbc0-e25602127ea9'),
(245, SYSDATE(), NULL, 'ruleKey=findbugs:FI_PUBLIC_SHOULD_BE_PROTECTED;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:FI_PUBLIC_SHOULD_BE_PROTECTED', 'QPROFILE', 'ACTIVATED', NULL, '51ae75b4-c7aa-467c-a0f2-de0c5dc3a182'),
(246, SYSDATE(), NULL, 'ruleKey=findbugs:STI_INTERRUPTED_ON_CURRENTTHREAD;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:STI_INTERRUPTED_ON_CURRENTTHREAD', 'QPROFILE', 'ACTIVATED', NULL, '99535e5b-77b6-4446-9f3f-09d27a81a9d7'),
(247, SYSDATE(), NULL, 'ruleKey=findbugs:SE_COMPARATOR_SHOULD_BE_SERIALIZABLE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'QPROFILE', 'ACTIVATED', NULL, 'ed79e902-8a0e-4e70-8c56-1915fe218f14'),
(248, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_BAD_MONTH;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DMI_BAD_MONTH', 'QPROFILE', 'ACTIVATED', NULL, 'dbd62e8b-8de4-461e-be47-eb253ea26115'),
(249, SYSDATE(), NULL, 'ruleKey=findbugs:BIT_SIGNED_CHECK;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:BIT_SIGNED_CHECK', 'QPROFILE', 'ACTIVATED', NULL, '6977f24b-ebba-4bb5-9d52-7e17243da23c'),
(250, SYSDATE(), NULL, 'ruleKey=findbugs:DE_MIGHT_IGNORE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DE_MIGHT_IGNORE', 'QPROFILE', 'ACTIVATED', NULL, '8a7b2402-c951-40ee-80c6-b2d12bd68d35'),
(251, SYSDATE(), NULL, 'ruleKey=findbugs:UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'QPROFILE', 'ACTIVATED', NULL, '3d583c7e-6ad9-488e-a4f3-2f612c0a33f0'),
(252, SYSDATE(), NULL, 'ruleKey=findbugs:IJU_SETUP_NO_SUPER;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IJU_SETUP_NO_SUPER', 'QPROFILE', 'ACTIVATED', NULL, '16bbac09-ced7-45b0-8e79-e9b19c4c41a8'),
(253, SYSDATE(), NULL, 'ruleKey=findbugs:FI_MISSING_SUPER_CALL;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:FI_MISSING_SUPER_CALL', 'QPROFILE', 'ACTIVATED', NULL, '25c44fd1-c654-4226-ad5a-c0c707bc7c19'),
(254, SYSDATE(), NULL, 'ruleKey=findbugs:SQL_BAD_PREPARED_STATEMENT_ACCESS;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SQL_BAD_PREPARED_STATEMENT_ACCESS', 'QPROFILE', 'ACTIVATED', NULL, '57b82827-9b39-4fd2-a118-849781989ffe'),
(255, SYSDATE(), NULL, 'ruleKey=findbugs:NP_NONNULL_PARAM_VIOLATION;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_NONNULL_PARAM_VIOLATION', 'QPROFILE', 'ACTIVATED', NULL, '98135af2-904a-4c92-9b26-de87bf7582d5'),
(256, SYSDATE(), NULL, 'ruleKey=findbugs:EQ_UNUSUAL;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:EQ_UNUSUAL', 'QPROFILE', 'ACTIVATED', NULL, 'e6018ae7-afe1-4b83-9eee-afe2cb2457e9'),
(257, SYSDATE(), NULL, 'ruleKey=findbugs:FI_EMPTY;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:FI_EMPTY', 'QPROFILE', 'ACTIVATED', NULL, '4807c935-8520-4630-a073-de7783a66b7f'),
(258, SYSDATE(), NULL, 'ruleKey=findbugs:NP_CLOSING_NULL;profileKey=java-findbugs-42626;severity=BLOCKER;key=java-findbugs-42626:findbugs:NP_CLOSING_NULL', 'QPROFILE', 'ACTIVATED', NULL, '2581bb8b-60d6-4db9-9b4a-2a9f9910f9db'),
(259, SYSDATE(), NULL, 'ruleKey=findbugs:NN_NAKED_NOTIFY;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NN_NAKED_NOTIFY', 'QPROFILE', 'ACTIVATED', NULL, 'f2ebab4d-df7f-4502-b03f-1290e2300c76'),
(260, SYSDATE(), NULL, 'ruleKey=findbugs:SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS', 'QPROFILE', 'ACTIVATED', NULL, 'f27ae4d1-3627-49da-874b-7d9968e332d0'),
(261, SYSDATE(), NULL, 'ruleKey=findbugs:UWF_NULL_FIELD;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:UWF_NULL_FIELD', 'QPROFILE', 'ACTIVATED', NULL, '12a078f0-3bed-4140-9a98-7345583e00ec'),
(262, SYSDATE(), NULL, 'ruleKey=findbugs:OS_OPEN_STREAM;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:OS_OPEN_STREAM', 'QPROFILE', 'ACTIVATED', NULL, '7a1bd8a2-1c2b-4256-8977-0b417a5f5698'),
(263, SYSDATE(), NULL, 'ruleKey=findbugs:HE_USE_OF_UNHASHABLE_CLASS;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:HE_USE_OF_UNHASHABLE_CLASS', 'QPROFILE', 'ACTIVATED', NULL, 'f614b3d5-c9b2-4332-b7fc-f6fbde48dc7d'),
(264, SYSDATE(), NULL, 'ruleKey=findbugs:NM_SAME_SIMPLE_NAME_AS_SUPERCLASS;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NM_SAME_SIMPLE_NAME_AS_SUPERCLASS', 'QPROFILE', 'ACTIVATED', NULL, 'ce6d6d31-107d-4f91-8dfb-764b63c95f7e'),
(265, SYSDATE(), NULL, 'ruleKey=findbugs:J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION', 'QPROFILE', 'ACTIVATED', NULL, '1c6f4d2f-1d1d-469a-a70e-cd083052acc9'),
(266, SYSDATE(), NULL, 'ruleKey=findbugs:TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK', 'QPROFILE', 'ACTIVATED', NULL, '7ac31b02-14de-4479-b6ea-f3b93697f9a6'),
(267, SYSDATE(), NULL, 'ruleKey=findbugs:RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES', 'QPROFILE', 'ACTIVATED', NULL, '225cf85f-3151-4e71-893a-756ea8ceeb3a'),
(268, SYSDATE(), NULL, 'ruleKey=findbugs:INT_BAD_COMPARISON_WITH_INT_VALUE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:INT_BAD_COMPARISON_WITH_INT_VALUE', 'QPROFILE', 'ACTIVATED', NULL, '1ea67f36-ebfc-411f-bf89-6533036b245a'),
(269, SYSDATE(), NULL, 'ruleKey=findbugs:SIC_INNER_SHOULD_BE_STATIC_ANON;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SIC_INNER_SHOULD_BE_STATIC_ANON', 'QPROFILE', 'ACTIVATED', NULL, 'd0711620-1dea-464e-8fb3-5ec25fb950ec'),
(270, SYSDATE(), NULL, 'ruleKey=findbugs:JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS', 'QPROFILE', 'ACTIVATED', NULL, '579da015-3716-44c5-b202-70e889d2271f'),
(271, SYSDATE(), NULL, 'ruleKey=findbugs:NM_CLASS_NOT_EXCEPTION;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NM_CLASS_NOT_EXCEPTION', 'QPROFILE', 'ACTIVATED', NULL, '564bebd2-bc35-4e19-81b3-e36c6ee5974a'),
(272, SYSDATE(), NULL, 'ruleKey=findbugs:SE_METHOD_MUST_BE_PRIVATE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SE_METHOD_MUST_BE_PRIVATE', 'QPROFILE', 'ACTIVATED', NULL, 'f9fb9f80-a4f5-45e0-843d-3533b37d6278'),
(273, SYSDATE(), NULL, 'ruleKey=findbugs:RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'QPROFILE', 'ACTIVATED', NULL, '24727d11-c424-4175-9ed9-145eb47ade17'),
(274, SYSDATE(), NULL, 'ruleKey=findbugs:QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT', 'QPROFILE', 'ACTIVATED', NULL, '09cfcdda-ccaf-4cbb-8809-42fdee174327'),
(275, SYSDATE(), NULL, 'ruleKey=findbugs:EC_ARRAY_AND_NONARRAY;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:EC_ARRAY_AND_NONARRAY', 'QPROFILE', 'ACTIVATED', NULL, '76235d92-b4c4-4000-a786-736356e9b0ac'),
(276, SYSDATE(), NULL, 'ruleKey=findbugs:BC_IMPOSSIBLE_INSTANCEOF;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:BC_IMPOSSIBLE_INSTANCEOF', 'QPROFILE', 'ACTIVATED', NULL, '4883eba6-f22f-442a-8777-eeed15394378'),
(277, SYSDATE(), NULL, 'ruleKey=findbugs:SS_SHOULD_BE_STATIC;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SS_SHOULD_BE_STATIC', 'QPROFILE', 'ACTIVATED', NULL, 'b97cc2dc-771a-4a1f-86e7-f5cf5833aecc'),
(278, SYSDATE(), NULL, 'ruleKey=findbugs:BIT_IOR;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:BIT_IOR', 'QPROFILE', 'ACTIVATED', NULL, '375c5333-aa6e-4bcc-86ab-56cf827f21ed'),
(279, SYSDATE(), NULL, 'ruleKey=findbugs:SE_NONFINAL_SERIALVERSIONID;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SE_NONFINAL_SERIALVERSIONID', 'QPROFILE', 'ACTIVATED', NULL, 'be6c6439-0fc6-4789-a346-76cf71ffd681'),
(280, SYSDATE(), NULL, 'ruleKey=findbugs:SE_TRANSIENT_FIELD_NOT_RESTORED;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SE_TRANSIENT_FIELD_NOT_RESTORED', 'QPROFILE', 'ACTIVATED', NULL, '65166dd6-a536-4106-9916-e45a99beabe1'),
(281, SYSDATE(), NULL, 'ruleKey=findbugs:VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED', 'QPROFILE', 'ACTIVATED', NULL, 'd4243ecb-fe91-47b4-9ed6-1c2ab624190a'),
(282, SYSDATE(), NULL, 'ruleKey=findbugs:EQ_ALWAYS_FALSE;profileKey=java-findbugs-42626;severity=BLOCKER;key=java-findbugs-42626:findbugs:EQ_ALWAYS_FALSE', 'QPROFILE', 'ACTIVATED', NULL, 'a078bb0c-1cb3-4923-8e5a-58cef88d489c'),
(283, SYSDATE(), NULL, 'ruleKey=findbugs:EI_EXPOSE_REP2;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:EI_EXPOSE_REP2', 'QPROFILE', 'ACTIVATED', NULL, '3b046e42-df7f-4167-940c-2d5cdead7fd5'),
(284, SYSDATE(), NULL, 'ruleKey=findbugs:URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD;profileKey=java-findbugs-42626;severity=INFO;key=java-findbugs-42626:findbugs:URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'QPROFILE', 'ACTIVATED', NULL, '7c5e95e1-5c00-47cd-8c08-5bc8670b867b'),
(285, SYSDATE(), NULL, 'ruleKey=findbugs:RV_REM_OF_RANDOM_INT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:RV_REM_OF_RANDOM_INT', 'QPROFILE', 'ACTIVATED', NULL, '4de5ecde-f7e5-4b85-8975-e91d91ff90eb'),
(286, SYSDATE(), NULL, 'ruleKey=findbugs:INT_VACUOUS_BIT_OPERATION;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:INT_VACUOUS_BIT_OPERATION', 'QPROFILE', 'ACTIVATED', NULL, '5c83315c-cd30-43b5-8aae-ad2edeb20389'),
(287, SYSDATE(), NULL, 'ruleKey=findbugs:DM_BOXED_PRIMITIVE_FOR_PARSING;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DM_BOXED_PRIMITIVE_FOR_PARSING', 'QPROFILE', 'ACTIVATED', NULL, 'a99430ac-9752-40e9-b2ce-14e3a958444a'),
(288, SYSDATE(), NULL, 'ruleKey=findbugs:IL_INFINITE_LOOP;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IL_INFINITE_LOOP', 'QPROFILE', 'ACTIVATED', NULL, '1c1561e8-a77b-4687-84e4-6ee0a246922e'),
(289, SYSDATE(), NULL, 'ruleKey=findbugs:NP_NULL_PARAM_DEREF;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_NULL_PARAM_DEREF', 'QPROFILE', 'ACTIVATED', NULL, 'f02cc8bc-a7a1-4d4c-b407-ff151bc6ce6f'),
(290, SYSDATE(), NULL, 'ruleKey=findbugs:AM_CREATES_EMPTY_JAR_FILE_ENTRY;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:AM_CREATES_EMPTY_JAR_FILE_ENTRY', 'QPROFILE', 'ACTIVATED', NULL, 'b9fc707c-0ebc-440e-9f06-aa7e9bc20226'),
(291, SYSDATE(), NULL, 'ruleKey=findbugs:EQ_COMPARING_CLASS_NAMES;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:EQ_COMPARING_CLASS_NAMES', 'QPROFILE', 'ACTIVATED', NULL, '7540c095-fc49-4fc0-a066-d5a30fca69df'),
(292, SYSDATE(), NULL, 'ruleKey=findbugs:RV_RETURN_VALUE_IGNORED_INFERRED;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:RV_RETURN_VALUE_IGNORED_INFERRED', 'QPROFILE', 'ACTIVATED', NULL, 'bad9487b-63cf-46a9-afe5-42d94cab75d5'),
(293, SYSDATE(), NULL, 'ruleKey=findbugs:NP_ALWAYS_NULL_EXCEPTION;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_ALWAYS_NULL_EXCEPTION', 'QPROFILE', 'ACTIVATED', NULL, 'b14e0ef5-9928-48ee-adf1-cd803833e9c1'),
(294, SYSDATE(), NULL, 'ruleKey=findbugs:DB_DUPLICATE_BRANCHES;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DB_DUPLICATE_BRANCHES', 'QPROFILE', 'ACTIVATED', NULL, '8a45f6e1-4d28-4807-bf12-00838db42747'),
(295, SYSDATE(), NULL, 'ruleKey=findbugs:IMSE_DONT_CATCH_IMSE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:IMSE_DONT_CATCH_IMSE', 'QPROFILE', 'ACTIVATED', NULL, '45a2b520-9e19-4c01-a535-de57c5ac98ab'),
(296, SYSDATE(), NULL, 'ruleKey=findbugs:XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER', 'QPROFILE', 'ACTIVATED', NULL, 'b9751d66-281b-4a71-b45e-b59c808c3d4b'),
(297, SYSDATE(), NULL, 'ruleKey=findbugs:DM_STRING_CTOR;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DM_STRING_CTOR', 'QPROFILE', 'ACTIVATED', NULL, '3d42219a-9d0f-429a-9853-436132ebe292'),
(298, SYSDATE(), NULL, 'ruleKey=findbugs:SE_NO_SERIALVERSIONID;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SE_NO_SERIALVERSIONID', 'QPROFILE', 'ACTIVATED', NULL, 'ed623946-7ebf-4a3b-bb49-a023417cca5f'),
(299, SYSDATE(), NULL, 'ruleKey=findbugs:SE_BAD_FIELD_STORE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SE_BAD_FIELD_STORE', 'QPROFILE', 'ACTIVATED', NULL, 'b8b2c47c-64e8-4029-884b-16ad48f8041f'),
(300, SYSDATE(), NULL, 'ruleKey=findbugs:EC_UNRELATED_TYPES_USING_POINTER_EQUALITY;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:EC_UNRELATED_TYPES_USING_POINTER_EQUALITY', 'QPROFILE', 'ACTIVATED', NULL, '8fe19854-253b-4d7e-a3d7-572f102cf4cf'),
(301, SYSDATE(), NULL, 'ruleKey=findbugs:SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION', 'QPROFILE', 'ACTIVATED', NULL, '0e4f9f03-9cdf-4704-b3b6-588933b3f9dc'),
(302, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_HARDCODED_ABSOLUTE_FILENAME;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DMI_HARDCODED_ABSOLUTE_FILENAME', 'QPROFILE', 'ACTIVATED', NULL, 'ce621493-6f5b-488c-ab56-912e90dd3738'),
(303, SYSDATE(), NULL, 'ruleKey=findbugs:UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD;profileKey=java-findbugs-42626;severity=INFO;key=java-findbugs-42626:findbugs:UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD', 'QPROFILE', 'ACTIVATED', NULL, '8efe9f3c-38fa-43e5-bd44-88407a0acc1c'),
(304, SYSDATE(), NULL, 'ruleKey=findbugs:SQL_BAD_RESULTSET_ACCESS;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SQL_BAD_RESULTSET_ACCESS', 'QPROFILE', 'ACTIVATED', NULL, '1162b032-ba2d-485e-80a0-6c1cafa8fa51'),
(305, SYSDATE(), NULL, 'ruleKey=findbugs:IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD', 'QPROFILE', 'ACTIVATED', NULL, '6b0f83cf-c3fb-4282-b683-99b14599ae50'),
(306, SYSDATE(), NULL, 'ruleKey=findbugs:BX_BOXING_IMMEDIATELY_UNBOXED;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:BX_BOXING_IMMEDIATELY_UNBOXED', 'QPROFILE', 'ACTIVATED', NULL, '8cc0ce9b-9340-450d-8b79-48ed07557d26'),
(307, SYSDATE(), NULL, 'ruleKey=findbugs:VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY', 'QPROFILE', 'ACTIVATED', NULL, 'a4a842f5-d500-4613-9895-0894e404aa4d'),
(308, SYSDATE(), NULL, 'ruleKey=findbugs:SI_INSTANCE_BEFORE_FINALS_ASSIGNED;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SI_INSTANCE_BEFORE_FINALS_ASSIGNED', 'QPROFILE', 'ACTIVATED', NULL, '53312a2f-b08d-40a8-a0dc-262b7e76ac67'),
(309, SYSDATE(), NULL, 'ruleKey=findbugs:UI_INHERITANCE_UNSAFE_GETRESOURCE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:UI_INHERITANCE_UNSAFE_GETRESOURCE', 'QPROFILE', 'ACTIVATED', NULL, '86aedc38-36c0-48d5-abe3-effa6094ee2f'),
(310, SYSDATE(), NULL, 'ruleKey=findbugs:NP_SYNC_AND_NULL_CHECK_FIELD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NP_SYNC_AND_NULL_CHECK_FIELD', 'QPROFILE', 'ACTIVATED', NULL, '3ca92a74-a0c6-4eb0-ac4e-8d058ed055f5'),
(311, SYSDATE(), NULL, 'ruleKey=findbugs:RpC_REPEATED_CONDITIONAL_TEST;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:RpC_REPEATED_CONDITIONAL_TEST', 'QPROFILE', 'ACTIVATED', NULL, 'cf680940-e1b7-41a9-9f65-a82822237470'),
(312, SYSDATE(), NULL, 'ruleKey=findbugs:DLS_DEAD_LOCAL_STORE_IN_RETURN;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DLS_DEAD_LOCAL_STORE_IN_RETURN', 'QPROFILE', 'ACTIVATED', NULL, 'a7e19cd7-5b74-48d7-9a47-8d88b68bd16a'),
(313, SYSDATE(), NULL, 'ruleKey=findbugs:EC_UNRELATED_CLASS_AND_INTERFACE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:EC_UNRELATED_CLASS_AND_INTERFACE', 'QPROFILE', 'ACTIVATED', NULL, '05bca072-a63c-491b-a6e0-58125193bbcc'),
(314, SYSDATE(), NULL, 'ruleKey=findbugs:RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION', 'QPROFILE', 'ACTIVATED', NULL, 'f79823d0-a2e4-4ac6-8b1b-1a356f427714'),
(315, SYSDATE(), NULL, 'ruleKey=findbugs:HE_INHERITS_EQUALS_USE_HASHCODE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:HE_INHERITS_EQUALS_USE_HASHCODE', 'QPROFILE', 'ACTIVATED', NULL, '5cf9a249-4a46-49c3-8f98-4e9948802ad3'),
(316, SYSDATE(), NULL, 'ruleKey=findbugs:NP_DEREFERENCE_OF_READLINE_VALUE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_DEREFERENCE_OF_READLINE_VALUE', 'QPROFILE', 'ACTIVATED', NULL, '244e1fcd-7bcb-4e52-98bc-67b44232ed1e'),
(317, SYSDATE(), NULL, 'ruleKey=findbugs:WA_NOT_IN_LOOP;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:WA_NOT_IN_LOOP', 'QPROFILE', 'ACTIVATED', NULL, 'cb92800c-5105-4c6b-88b5-760686f0bf7c'),
(318, SYSDATE(), NULL, 'ruleKey=findbugs:BC_IMPOSSIBLE_CAST;profileKey=java-findbugs-42626;severity=BLOCKER;key=java-findbugs-42626:findbugs:BC_IMPOSSIBLE_CAST', 'QPROFILE', 'ACTIVATED', NULL, 'a25d2251-4191-4c67-a109-b66e0b90413d'),
(319, SYSDATE(), NULL, 'ruleKey=findbugs:OS_OPEN_STREAM_EXCEPTION_PATH;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:OS_OPEN_STREAM_EXCEPTION_PATH', 'QPROFILE', 'ACTIVATED', NULL, 'adf83fb2-667e-4fa9-b99f-5af5cb38b538'),
(320, SYSDATE(), NULL, 'ruleKey=findbugs:ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT', 'QPROFILE', 'ACTIVATED', NULL, '6af95202-a406-4fd1-b4d7-b390918277b5'),
(321, SYSDATE(), NULL, 'ruleKey=findbugs:NP_NULL_ON_SOME_PATH_EXCEPTION;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_NULL_ON_SOME_PATH_EXCEPTION', 'QPROFILE', 'ACTIVATED', NULL, '898eacb4-e624-44eb-9bbc-480af50caa06'),
(322, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION', 'QPROFILE', 'ACTIVATED', NULL, '351b37ff-c8a2-406f-a4fa-329787693eeb'),
(323, SYSDATE(), NULL, 'ruleKey=findbugs:IC_INIT_CIRCULARITY;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IC_INIT_CIRCULARITY', 'QPROFILE', 'ACTIVATED', NULL, 'ea2fe65f-d93a-4fe1-b295-0667b8e561e6'),
(324, SYSDATE(), NULL, 'ruleKey=findbugs:UM_UNNECESSARY_MATH;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:UM_UNNECESSARY_MATH', 'QPROFILE', 'ACTIVATED', NULL, '88e9fbc9-b3cb-4a86-80d5-c9bb1aeead35'),
(325, SYSDATE(), NULL, 'ruleKey=findbugs:STCAL_STATIC_CALENDAR_INSTANCE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:STCAL_STATIC_CALENDAR_INSTANCE', 'QPROFILE', 'ACTIVATED', NULL, 'c762fa0d-3fed-4783-bc20-9851d79bba15'),
(326, SYSDATE(), NULL, 'ruleKey=findbugs:NP_ALWAYS_NULL;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_ALWAYS_NULL', 'QPROFILE', 'ACTIVATED', NULL, '4164849f-e2d0-4c12-9e64-9226c329604e'),
(327, SYSDATE(), NULL, 'ruleKey=findbugs:RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE', 'QPROFILE', 'ACTIVATED', NULL, '9e242a4f-1d61-463f-b81d-850e9fbb6fb2'),
(328, SYSDATE(), NULL, 'ruleKey=findbugs:NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH', 'QPROFILE', 'ACTIVATED', NULL, '36a6bb2d-68a8-4f90-af0b-f8cf9846d3bd'),
(329, SYSDATE(), NULL, 'ruleKey=findbugs:UUF_UNUSED_FIELD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:UUF_UNUSED_FIELD', 'QPROFILE', 'ACTIVATED', NULL, '88f5aef0-ff00-44d5-9958-85de85498ac0'),
(330, SYSDATE(), NULL, 'ruleKey=findbugs:EQ_DOESNT_OVERRIDE_EQUALS;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:EQ_DOESNT_OVERRIDE_EQUALS', 'QPROFILE', 'ACTIVATED', NULL, 'a92eb45d-645f-4fde-9ba7-7768f51a8eef'),
(331, SYSDATE(), NULL, 'ruleKey=findbugs:INT_BAD_COMPARISON_WITH_SIGNED_BYTE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:INT_BAD_COMPARISON_WITH_SIGNED_BYTE', 'QPROFILE', 'ACTIVATED', NULL, '39a8470f-b567-4299-b39f-f82ab9857874'),
(332, SYSDATE(), NULL, 'ruleKey=findbugs:NP_CLONE_COULD_RETURN_NULL;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_CLONE_COULD_RETURN_NULL', 'QPROFILE', 'ACTIVATED', NULL, 'fa4b1f0c-952c-433e-ac84-c81282688b1c'),
(333, SYSDATE(), NULL, 'ruleKey=findbugs:IS_FIELD_NOT_GUARDED;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IS_FIELD_NOT_GUARDED', 'QPROFILE', 'ACTIVATED', NULL, 'e5a7d0bd-89d2-4add-9123-edf050b7dbf9'),
(334, SYSDATE(), NULL, 'ruleKey=findbugs:NM_LCASE_TOSTRING;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NM_LCASE_TOSTRING', 'QPROFILE', 'ACTIVATED', NULL, '12e3ccba-bf0f-4fee-af48-c67a5f6d6fbd'),
(335, SYSDATE(), NULL, 'ruleKey=findbugs:NM_WRONG_PACKAGE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NM_WRONG_PACKAGE', 'QPROFILE', 'ACTIVATED', NULL, '951fe852-b865-4a74-b3b5-f7f58b586465'),
(336, SYSDATE(), NULL, 'ruleKey=findbugs:UCF_USELESS_CONTROL_FLOW;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:UCF_USELESS_CONTROL_FLOW', 'QPROFILE', 'ACTIVATED', NULL, '713d74a8-88fa-4f8b-8809-26af651c73f6'),
(337, SYSDATE(), NULL, 'ruleKey=findbugs:DM_USELESS_THREAD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DM_USELESS_THREAD', 'QPROFILE', 'ACTIVATED', NULL, '097676d4-815a-47b5-92ea-797ab8407a4b'),
(338, SYSDATE(), NULL, 'ruleKey=findbugs:JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT', 'QPROFILE', 'ACTIVATED', NULL, '05d72ee9-ea8e-45df-9797-05cf90791c95'),
(339, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION', 'QPROFILE', 'ACTIVATED', NULL, '6fa934d6-a820-4c82-834a-dae7cf2b84ef'),
(340, SYSDATE(), NULL, 'ruleKey=findbugs:SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING', 'QPROFILE', 'ACTIVATED', NULL, '6e502a35-e76d-415d-a313-c5ecca3b4f79'),
(341, SYSDATE(), NULL, 'ruleKey=findbugs:NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT', 'QPROFILE', 'ACTIVATED', NULL, '25ef50f8-b7cd-4bb4-9d23-7a74ea79bdf3'),
(342, SYSDATE(), NULL, 'ruleKey=findbugs:ICAST_BAD_SHIFT_AMOUNT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:ICAST_BAD_SHIFT_AMOUNT', 'QPROFILE', 'ACTIVATED', NULL, 'c3ab5ca8-becf-4855-a22b-6245f68d0949'),
(343, SYSDATE(), NULL, 'ruleKey=findbugs:ICAST_IDIV_CAST_TO_DOUBLE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:ICAST_IDIV_CAST_TO_DOUBLE', 'QPROFILE', 'ACTIVATED', NULL, 'ee715c54-5075-46e6-b6c7-cf0516a7e7de'),
(344, SYSDATE(), NULL, 'ruleKey=findbugs:FI_NULLIFY_SUPER;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:FI_NULLIFY_SUPER', 'QPROFILE', 'ACTIVATED', NULL, '18c5cc71-f634-49aa-9d8b-73ef8bf0c5c8'),
(345, SYSDATE(), NULL, 'ruleKey=findbugs:MS_MUTABLE_HASHTABLE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:MS_MUTABLE_HASHTABLE', 'QPROFILE', 'ACTIVATED', NULL, '68841196-314e-4c1f-be3e-30c5368b17d9'),
(346, SYSDATE(), NULL, 'ruleKey=findbugs:SE_READ_RESOLVE_MUST_RETURN_OBJECT;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SE_READ_RESOLVE_MUST_RETURN_OBJECT', 'QPROFILE', 'ACTIVATED', NULL, 'fa2a846f-2861-40ed-a8de-eb2f8432c209'),
(347, SYSDATE(), NULL, 'ruleKey=findbugs:SIO_SUPERFLUOUS_INSTANCEOF;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SIO_SUPERFLUOUS_INSTANCEOF', 'QPROFILE', 'ACTIVATED', NULL, '24b829ff-fa67-4211-a46f-5a78842e9e7a'),
(348, SYSDATE(), NULL, 'ruleKey=findbugs:BOA_BADLY_OVERRIDDEN_ADAPTER;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:BOA_BADLY_OVERRIDDEN_ADAPTER', 'QPROFILE', 'ACTIVATED', NULL, 'c7166e2d-75ab-4957-9a36-5990b3131791'),
(349, SYSDATE(), NULL, 'ruleKey=findbugs:IM_AVERAGE_COMPUTATION_COULD_OVERFLOW;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IM_AVERAGE_COMPUTATION_COULD_OVERFLOW', 'QPROFILE', 'ACTIVATED', NULL, 'f570bd03-6543-45ff-a657-ac3d3931ee15'),
(350, SYSDATE(), NULL, 'ruleKey=findbugs:DM_NEW_FOR_GETCLASS;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DM_NEW_FOR_GETCLASS', 'QPROFILE', 'ACTIVATED', NULL, '6be40258-0a6a-4ffa-94f8-8d2f8f1e29d5'),
(351, SYSDATE(), NULL, 'ruleKey=findbugs:NM_CONFUSING;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NM_CONFUSING', 'QPROFILE', 'ACTIVATED', NULL, '93b6698e-e296-418f-997d-84be80f2e5fc'),
(352, SYSDATE(), NULL, 'ruleKey=findbugs:WMI_WRONG_MAP_ITERATOR;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:WMI_WRONG_MAP_ITERATOR', 'QPROFILE', 'ACTIVATED', NULL, 'ef688a59-0931-49d6-8a1f-d10a2c522240'),
(353, SYSDATE(), NULL, 'ruleKey=findbugs:NP_UNWRITTEN_FIELD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NP_UNWRITTEN_FIELD', 'QPROFILE', 'ACTIVATED', NULL, '8fb7b229-d9fd-4601-80fa-05526a1ef92b'),
(354, SYSDATE(), NULL, 'ruleKey=findbugs:SE_BAD_FIELD_INNER_CLASS;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:SE_BAD_FIELD_INNER_CLASS', 'QPROFILE', 'ACTIVATED', NULL, '9728632c-cd37-4740-8c03-f58496f14f68'),
(355, SYSDATE(), NULL, 'ruleKey=findbugs:RV_RETURN_VALUE_IGNORED_BAD_PRACTICE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'QPROFILE', 'ACTIVATED', NULL, 'c6395d88-9f1c-4987-af27-6bdddb0b424a'),
(356, SYSDATE(), NULL, 'ruleKey=findbugs:UCF_USELESS_CONTROL_FLOW_NEXT_LINE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:UCF_USELESS_CONTROL_FLOW_NEXT_LINE', 'QPROFILE', 'ACTIVATED', NULL, '16aacd4e-ac55-40be-8231-bbfc33e43ae7'),
(357, SYSDATE(), NULL, 'ruleKey=findbugs:NP_GUARANTEED_DEREF;profileKey=java-findbugs-42626;severity=BLOCKER;key=java-findbugs-42626:findbugs:NP_GUARANTEED_DEREF', 'QPROFILE', 'ACTIVATED', NULL, '71b84e17-6d86-49d9-877a-939d175e1e3c'),
(358, SYSDATE(), NULL, 'ruleKey=findbugs:EI_EXPOSE_STATIC_REP2;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:EI_EXPOSE_STATIC_REP2', 'QPROFILE', 'ACTIVATED', NULL, '59a67992-516e-4388-a6dc-f841f6536ba8'),
(359, SYSDATE(), NULL, 'ruleKey=findbugs:NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER', 'QPROFILE', 'ACTIVATED', NULL, '6a7fd495-7864-4a48-acae-a0144d6fba69'),
(360, SYSDATE(), NULL, 'ruleKey=findbugs:WA_AWAIT_NOT_IN_LOOP;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:WA_AWAIT_NOT_IN_LOOP', 'QPROFILE', 'ACTIVATED', NULL, '8cc73cf0-8407-4496-9a4b-68260a61cbb0'),
(361, SYSDATE(), NULL, 'ruleKey=findbugs:TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS', 'QPROFILE', 'ACTIVATED', NULL, '9b3cf6e6-5d7e-4d7b-a7b1-8e9daece712c'),
(362, SYSDATE(), NULL, 'ruleKey=findbugs:RC_REF_COMPARISON;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:RC_REF_COMPARISON', 'QPROFILE', 'ACTIVATED', NULL, '3123ebc0-e067-450f-911d-664b9b9ff069'),
(363, SYSDATE(), NULL, 'ruleKey=findbugs:SC_START_IN_CTOR;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SC_START_IN_CTOR', 'QPROFILE', 'ACTIVATED', NULL, '3fc6ba85-915b-4e23-a313-a99f5faf057f'),
(364, SYSDATE(), NULL, 'ruleKey=findbugs:MF_CLASS_MASKS_FIELD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:MF_CLASS_MASKS_FIELD', 'QPROFILE', 'ACTIVATED', NULL, '9920e59b-64f6-45c2-a3d7-6037ee08f632'),
(365, SYSDATE(), NULL, 'ruleKey=findbugs:PS_PUBLIC_SEMAPHORES;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:PS_PUBLIC_SEMAPHORES', 'QPROFILE', 'ACTIVATED', NULL, '765ae549-8ee9-4b90-97d4-22ca5ca1c247'),
(366, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_INVOKING_HASHCODE_ON_ARRAY;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DMI_INVOKING_HASHCODE_ON_ARRAY', 'QPROFILE', 'ACTIVATED', NULL, '9411faca-e51d-442e-8209-ac11cf9f390c'),
(367, SYSDATE(), NULL, 'ruleKey=findbugs:SKIPPED_CLASS_TOO_BIG;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:SKIPPED_CLASS_TOO_BIG', 'QPROFILE', 'ACTIVATED', NULL, 'aab82660-7027-4cdc-ba10-295bc47ba080'),
(368, SYSDATE(), NULL, 'ruleKey=findbugs:UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR', 'QPROFILE', 'ACTIVATED', NULL, '10320fa6-c5ac-4f01-846f-3ae1b274b240'),
(369, SYSDATE(), NULL, 'ruleKey=findbugs:HSC_HUGE_SHARED_STRING_CONSTANT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:HSC_HUGE_SHARED_STRING_CONSTANT', 'QPROFILE', 'ACTIVATED', NULL, 'e56e7047-488d-4371-8baf-290aa3a67c7e'),
(370, SYSDATE(), NULL, 'ruleKey=findbugs:SA_LOCAL_SELF_COMPUTATION;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SA_LOCAL_SELF_COMPUTATION', 'QPROFILE', 'ACTIVATED', NULL, '4ea77f0c-973f-46e1-93cd-26a65229937b'),
(371, SYSDATE(), NULL, 'ruleKey=findbugs:VA_FORMAT_STRING_ILLEGAL;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:VA_FORMAT_STRING_ILLEGAL', 'QPROFILE', 'ACTIVATED', NULL, '9383d579-e4d9-4e2b-b3fd-eae76dce8466'),
(372, SYSDATE(), NULL, 'ruleKey=findbugs:SE_NO_SUITABLE_CONSTRUCTOR;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SE_NO_SUITABLE_CONSTRUCTOR', 'QPROFILE', 'ACTIVATED', NULL, '62d32c86-caec-4957-ada9-4a86c9096713'),
(373, SYSDATE(), NULL, 'ruleKey=findbugs:MWN_MISMATCHED_NOTIFY;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:MWN_MISMATCHED_NOTIFY', 'QPROFILE', 'ACTIVATED', NULL, '7fd45356-b4ac-4f05-9efb-0bc1406d47b3'),
(374, SYSDATE(), NULL, 'ruleKey=findbugs:NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS', 'QPROFILE', 'ACTIVATED', NULL, 'f70b6a5b-f00e-4f41-abca-8eb6c806ea7f'),
(375, SYSDATE(), NULL, 'ruleKey=findbugs:STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE', 'QPROFILE', 'ACTIVATED', NULL, '431b9280-32a0-4261-ac6f-7d9f12e67b4c'),
(376, SYSDATE(), NULL, 'ruleKey=findbugs:SE_READ_RESOLVE_IS_STATIC;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SE_READ_RESOLVE_IS_STATIC', 'QPROFILE', 'ACTIVATED', NULL, 'e110d67e-ad38-46b7-b2b6-28e4776b9bf1'),
(377, SYSDATE(), NULL, 'ruleKey=findbugs:SA_LOCAL_DOUBLE_ASSIGNMENT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SA_LOCAL_DOUBLE_ASSIGNMENT', 'QPROFILE', 'ACTIVATED', NULL, 'f964521b-c716-49e6-b55b-875f213ca4f4'),
(378, SYSDATE(), NULL, 'ruleKey=findbugs:DP_DO_INSIDE_DO_PRIVILEGED;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DP_DO_INSIDE_DO_PRIVILEGED', 'QPROFILE', 'ACTIVATED', NULL, 'b838ba35-5e26-40a6-be18-699456c75d10'),
(379, SYSDATE(), NULL, 'ruleKey=findbugs:RV_RETURN_VALUE_IGNORED2;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:RV_RETURN_VALUE_IGNORED2', 'QPROFILE', 'ACTIVATED', NULL, 'a1eabe29-c0ff-4c64-b61c-b3f2e6e0f948'),
(380, SYSDATE(), NULL, 'ruleKey=findbugs:RI_REDUNDANT_INTERFACES;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:RI_REDUNDANT_INTERFACES', 'QPROFILE', 'ACTIVATED', NULL, 'a2d01704-2c4a-4e40-b47e-904bf7a0246a'),
(381, SYSDATE(), NULL, 'ruleKey=findbugs:MTIA_SUSPECT_SERVLET_INSTANCE_FIELD;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:MTIA_SUSPECT_SERVLET_INSTANCE_FIELD', 'QPROFILE', 'ACTIVATED', NULL, '04f01a03-8365-484b-b9d7-0a7479d98cc1'),
(382, SYSDATE(), NULL, 'ruleKey=findbugs:FI_FINALIZER_ONLY_NULLS_FIELDS;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:FI_FINALIZER_ONLY_NULLS_FIELDS', 'QPROFILE', 'ACTIVATED', NULL, '29af6f2f-f67d-4d54-894b-fd2ed7d91266'),
(383, SYSDATE(), NULL, 'ruleKey=findbugs:IO_APPENDING_TO_OBJECT_OUTPUT_STREAM;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IO_APPENDING_TO_OBJECT_OUTPUT_STREAM', 'QPROFILE', 'ACTIVATED', NULL, '5bceb11f-f8f2-40c7-86b0-7531bad904a9'),
(384, SYSDATE(), NULL, 'ruleKey=findbugs:VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT', 'QPROFILE', 'ACTIVATED', NULL, 'f77fdb56-6038-4178-90ed-ba7eac59fd57'),
(385, SYSDATE(), NULL, 'ruleKey=findbugs:NM_VERY_CONFUSING;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NM_VERY_CONFUSING', 'QPROFILE', 'ACTIVATED', NULL, '21a4d538-18a2-408c-b00a-a6f8f2c897b8'),
(386, SYSDATE(), NULL, 'ruleKey=findbugs:DM_RUN_FINALIZERS_ON_EXIT;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DM_RUN_FINALIZERS_ON_EXIT', 'QPROFILE', 'ACTIVATED', NULL, 'b2861093-6a11-43b3-b1f0-02cc07cbc294'),
(387, SYSDATE(), NULL, 'ruleKey=findbugs:STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE', 'QPROFILE', 'ACTIVATED', NULL, '14434d9f-467b-452f-9b5b-c55b98687f08'),
(388, SYSDATE(), NULL, 'ruleKey=findbugs:FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER', 'QPROFILE', 'ACTIVATED', NULL, 'd74b9fdb-d522-401d-9660-c235e95a81ae'),
(389, SYSDATE(), NULL, 'ruleKey=findbugs:FI_FINALIZER_NULLS_FIELDS;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:FI_FINALIZER_NULLS_FIELDS', 'QPROFILE', 'ACTIVATED', NULL, 'c3516f4c-ef78-4b59-b03b-d0517b9827ca'),
(390, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_UNSUPPORTED_METHOD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DMI_UNSUPPORTED_METHOD', 'QPROFILE', 'ACTIVATED', NULL, 'd45634ee-9811-41b5-91c2-1d763451a4c4'),
(391, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_CONSTANT_DB_PASSWORD;profileKey=java-findbugs-42626;severity=BLOCKER;key=java-findbugs-42626:findbugs:DMI_CONSTANT_DB_PASSWORD', 'QPROFILE', 'ACTIVATED', NULL, '14da1dc5-861c-4e6b-853e-a8301335f142'),
(392, SYSDATE(), NULL, 'ruleKey=findbugs:TLW_TWO_LOCK_WAIT;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:TLW_TWO_LOCK_WAIT', 'QPROFILE', 'ACTIVATED', NULL, '170f76cc-1ba1-43e9-abe0-ae1c15c19c9f'),
(393, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_ARGUMENTS_WRONG_ORDER;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:DMI_ARGUMENTS_WRONG_ORDER', 'QPROFILE', 'ACTIVATED', NULL, '973a43df-8c24-4ccb-b9e7-232e101a61ce'),
(394, SYSDATE(), NULL, 'ruleKey=findbugs:RV_01_TO_INT;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:RV_01_TO_INT', 'QPROFILE', 'ACTIVATED', NULL, '077cca07-9386-4d45-bf1d-1627c71c7835'),
(395, SYSDATE(), NULL, 'ruleKey=findbugs:IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD', 'QPROFILE', 'ACTIVATED', NULL, '34ed58fe-bc0a-4a15-a607-270df85cd103'),
(396, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_COLLECTION_OF_URLS;profileKey=java-findbugs-42626;severity=BLOCKER;key=java-findbugs-42626:findbugs:DMI_COLLECTION_OF_URLS', 'QPROFILE', 'ACTIVATED', NULL, '9f05ac64-260e-4ae5-83a9-6c53e2f3ba03'),
(397, SYSDATE(), NULL, 'ruleKey=findbugs:BIT_AND_ZZ;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:BIT_AND_ZZ', 'QPROFILE', 'ACTIVATED', NULL, 'ecd0daf6-7d01-444b-933e-a39351b4b420'),
(398, SYSDATE(), NULL, 'ruleKey=findbugs:DM_STRING_VOID_CTOR;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DM_STRING_VOID_CTOR', 'QPROFILE', 'ACTIVATED', NULL, '46ef9321-6679-4613-a032-150fc4109f8c'),
(399, SYSDATE(), NULL, 'ruleKey=findbugs:UL_UNRELEASED_LOCK;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:UL_UNRELEASED_LOCK', 'QPROFILE', 'ACTIVATED', NULL, 'f9f890ef-cb29-42b0-9ae9-5ff7365e6da5'),
(400, SYSDATE(), NULL, 'ruleKey=findbugs:HRS_REQUEST_PARAMETER_TO_HTTP_HEADER;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:HRS_REQUEST_PARAMETER_TO_HTTP_HEADER', 'QPROFILE', 'ACTIVATED', NULL, '3e8a68db-0f17-49df-94e2-5246c5a77f52'),
(401, SYSDATE(), NULL, 'ruleKey=findbugs:CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE', 'QPROFILE', 'ACTIVATED', NULL, 'c318213a-12a9-4c65-b8c1-8132c0def74b'),
(402, SYSDATE(), NULL, 'ruleKey=findbugs:SIC_THREADLOCAL_DEADLY_EMBRACE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SIC_THREADLOCAL_DEADLY_EMBRACE', 'QPROFILE', 'ACTIVATED', NULL, '66c16a56-3442-4aac-bbc3-72e1ddd9dec3');
INSERT INTO `activities` (`id`, `created_at`, `user_login`, `data_field`, `log_type`, `log_action`, `log_message`, `log_key`) VALUES
(403, SYSDATE(), NULL, 'ruleKey=findbugs:MF_METHOD_MASKS_FIELD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:MF_METHOD_MASKS_FIELD', 'QPROFILE', 'ACTIVATED', NULL, 'f4a80a34-bf07-4894-8069-6a0a9a0815c5'),
(404, SYSDATE(), NULL, 'ruleKey=findbugs:DL_SYNCHRONIZATION_ON_SHARED_CONSTANT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DL_SYNCHRONIZATION_ON_SHARED_CONSTANT', 'QPROFILE', 'ACTIVATED', NULL, 'f32c04f9-56be-4eb8-a8bd-ead1cb810c15'),
(405, SYSDATE(), NULL, 'ruleKey=findbugs:INT_BAD_REM_BY_1;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:INT_BAD_REM_BY_1', 'QPROFILE', 'ACTIVATED', NULL, '37460303-aa34-41ce-ae3e-8f83f83c438a'),
(406, SYSDATE(), NULL, 'ruleKey=findbugs:NM_WRONG_PACKAGE_INTENTIONAL;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NM_WRONG_PACKAGE_INTENTIONAL', 'QPROFILE', 'ACTIVATED', NULL, '15ed0b16-a6b0-4d27-9cd8-913e6c810b79'),
(407, SYSDATE(), NULL, 'ruleKey=findbugs:UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'QPROFILE', 'ACTIVATED', NULL, '84333299-3510-4197-9c9e-6b929e1c9793'),
(408, SYSDATE(), NULL, 'ruleKey=findbugs:ES_COMPARING_STRINGS_WITH_EQ;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:ES_COMPARING_STRINGS_WITH_EQ', 'QPROFILE', 'ACTIVATED', NULL, '8a0a32ab-0c8d-4526-a051-c830ab996179'),
(409, SYSDATE(), NULL, 'ruleKey=findbugs:SA_FIELD_SELF_COMPARISON;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SA_FIELD_SELF_COMPARISON', 'QPROFILE', 'ACTIVATED', NULL, 'f1b2f4e4-7ad1-4ca3-adcc-dbdad8c2e829'),
(410, SYSDATE(), NULL, 'ruleKey=findbugs:VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN', 'QPROFILE', 'ACTIVATED', NULL, '5570c08c-b64c-4476-9527-a573bbff32a8'),
(411, SYSDATE(), NULL, 'ruleKey=findbugs:QF_QUESTIONABLE_FOR_LOOP;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:QF_QUESTIONABLE_FOR_LOOP', 'QPROFILE', 'ACTIVATED', NULL, '0e350757-5642-4138-b3c7-06807837189b'),
(412, SYSDATE(), NULL, 'ruleKey=findbugs:XFB_XML_FACTORY_BYPASS;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:XFB_XML_FACTORY_BYPASS', 'QPROFILE', 'ACTIVATED', NULL, '43a8ae27-e1dc-4d4e-a647-6b59b19cc73b'),
(413, SYSDATE(), NULL, 'ruleKey=findbugs:CI_CONFUSED_INHERITANCE;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:CI_CONFUSED_INHERITANCE', 'QPROFILE', 'ACTIVATED', NULL, 'cfd38540-7b09-44f6-b587-3726751f5d8a'),
(414, SYSDATE(), NULL, 'ruleKey=findbugs:SE_INNER_CLASS;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SE_INNER_CLASS', 'QPROFILE', 'ACTIVATED', NULL, '2e1ef05f-e555-4633-bb73-c823d3ade930'),
(415, SYSDATE(), NULL, 'ruleKey=findbugs:UWF_UNWRITTEN_FIELD;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:UWF_UNWRITTEN_FIELD', 'QPROFILE', 'ACTIVATED', NULL, '7719cce0-be32-49f4-bfce-8111f0648eb9'),
(416, SYSDATE(), NULL, 'ruleKey=findbugs:BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS', 'QPROFILE', 'ACTIVATED', NULL, '0120b21e-b22e-4bf3-8517-8d4ee8bdf2e6'),
(417, SYSDATE(), NULL, 'ruleKey=findbugs:DLS_DEAD_STORE_OF_CLASS_LITERAL;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DLS_DEAD_STORE_OF_CLASS_LITERAL', 'QPROFILE', 'ACTIVATED', NULL, '999d80a0-2afd-460d-a1d7-9c94083bdf6b'),
(418, SYSDATE(), NULL, 'ruleKey=findbugs:WS_WRITEOBJECT_SYNC;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:WS_WRITEOBJECT_SYNC', 'QPROFILE', 'ACTIVATED', NULL, '66efbc8a-a893-4828-892f-2b91d4fbda09'),
(419, SYSDATE(), NULL, 'ruleKey=findbugs:FI_USELESS;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:FI_USELESS', 'QPROFILE', 'ACTIVATED', NULL, '9bf3e251-4f2c-4066-9ee7-0ff9ffbc44d8'),
(420, SYSDATE(), NULL, 'ruleKey=findbugs:ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD', 'QPROFILE', 'ACTIVATED', NULL, 'e895a766-c099-4783-8b5d-55a901b6a82e'),
(421, SYSDATE(), NULL, 'ruleKey=findbugs:NM_METHOD_CONSTRUCTOR_CONFUSION;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NM_METHOD_CONSTRUCTOR_CONFUSION', 'QPROFILE', 'ACTIVATED', NULL, 'e9ab6e84-886e-4dfc-891d-cea427bff61a'),
(422, SYSDATE(), NULL, 'ruleKey=findbugs:MWN_MISMATCHED_WAIT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:MWN_MISMATCHED_WAIT', 'QPROFILE', 'ACTIVATED', NULL, '545e8d43-d164-4eb2-aaa3-b9c8d40a9f96'),
(423, SYSDATE(), NULL, 'ruleKey=findbugs:DM_NEXTINT_VIA_NEXTDOUBLE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DM_NEXTINT_VIA_NEXTDOUBLE', 'QPROFILE', 'ACTIVATED', NULL, '14065a22-a2b8-45f7-aaf2-2ac51bd0a85c'),
(424, SYSDATE(), NULL, 'ruleKey=findbugs:FL_MATH_USING_FLOAT_PRECISION;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:FL_MATH_USING_FLOAT_PRECISION', 'QPROFILE', 'ACTIVATED', NULL, '5c7931ea-ada9-4aaa-9a0a-0dd6ee26741f'),
(425, SYSDATE(), NULL, 'ruleKey=findbugs:ML_SYNC_ON_UPDATED_FIELD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:ML_SYNC_ON_UPDATED_FIELD', 'QPROFILE', 'ACTIVATED', NULL, '19d6434d-5c32-4c27-a676-6d3be7338258'),
(426, SYSDATE(), NULL, 'ruleKey=findbugs:VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED', 'QPROFILE', 'ACTIVATED', NULL, 'e0916e4f-1b29-4f09-b1e0-cab4005c943a'),
(427, SYSDATE(), NULL, 'ruleKey=findbugs:AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION', 'QPROFILE', 'ACTIVATED', NULL, 'e7346eb2-ff4c-4562-b53d-e0d6337e0816'),
(428, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_NONSERIALIZABLE_OBJECT_WRITTEN;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DMI_NONSERIALIZABLE_OBJECT_WRITTEN', 'QPROFILE', 'ACTIVATED', NULL, '5bb8ed1d-1f22-4be7-ae21-d5bc26608e54'),
(429, SYSDATE(), NULL, 'ruleKey=findbugs:MTIA_SUSPECT_STRUTS_INSTANCE_FIELD;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:MTIA_SUSPECT_STRUTS_INSTANCE_FIELD', 'QPROFILE', 'ACTIVATED', NULL, '726ca4e9-b240-40b7-9217-6e76b2f7799c'),
(430, SYSDATE(), NULL, 'ruleKey=findbugs:EQ_OTHER_USE_OBJECT;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:EQ_OTHER_USE_OBJECT', 'QPROFILE', 'ACTIVATED', NULL, '2577003d-14c6-48e6-bfea-7530bf6deb39'),
(431, SYSDATE(), NULL, 'ruleKey=findbugs:RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE', 'QPROFILE', 'ACTIVATED', NULL, '0cc0d922-52d1-4c78-a9ab-fe31044d18a2'),
(432, SYSDATE(), NULL, 'ruleKey=findbugs:VA_FORMAT_STRING_USES_NEWLINE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:VA_FORMAT_STRING_USES_NEWLINE', 'QPROFILE', 'ACTIVATED', NULL, 'a89eb277-d4dd-4900-9d83-c85826ba1eed'),
(433, SYSDATE(), NULL, 'ruleKey=findbugs:DLS_DEAD_LOCAL_STORE_OF_NULL;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DLS_DEAD_LOCAL_STORE_OF_NULL', 'QPROFILE', 'ACTIVATED', NULL, '7f4f68eb-9746-4e30-acc7-85ac571575a2'),
(434, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_BLOCKING_METHODS_ON_URL;profileKey=java-findbugs-42626;severity=BLOCKER;key=java-findbugs-42626:findbugs:DMI_BLOCKING_METHODS_ON_URL', 'QPROFILE', 'ACTIVATED', NULL, '8bb9e1c2-e543-4099-80b1-269375bdd789'),
(435, SYSDATE(), NULL, 'ruleKey=findbugs:NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE', 'QPROFILE', 'ACTIVATED', NULL, 'bee6fd9c-4df4-4d81-8bf6-210f8e928204'),
(436, SYSDATE(), NULL, 'ruleKey=findbugs:MS_CANNOT_BE_FINAL;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:MS_CANNOT_BE_FINAL', 'QPROFILE', 'ACTIVATED', NULL, '8d5b51b8-5d2f-43a8-a661-9ddeea9b268f'),
(437, SYSDATE(), NULL, 'ruleKey=findbugs:IM_BAD_CHECK_FOR_ODD;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IM_BAD_CHECK_FOR_ODD', 'QPROFILE', 'ACTIVATED', NULL, '7e0750ba-10d1-49f2-b008-f6fedf909c41'),
(438, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY', 'QPROFILE', 'ACTIVATED', NULL, 'e4af861e-205c-4b43-a29b-5803c6152703'),
(439, SYSDATE(), NULL, 'ruleKey=findbugs:NP_STORE_INTO_NONNULL_FIELD;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_STORE_INTO_NONNULL_FIELD', 'QPROFILE', 'ACTIVATED', NULL, 'c999c9d6-1335-4409-9e85-3cc7fe25186b'),
(440, SYSDATE(), NULL, 'ruleKey=findbugs:PT_ABSOLUTE_PATH_TRAVERSAL;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:PT_ABSOLUTE_PATH_TRAVERSAL', 'QPROFILE', 'ACTIVATED', NULL, 'be93dd2a-172f-4be3-9401-921ac26586c7'),
(441, SYSDATE(), NULL, 'ruleKey=findbugs:SP_SPIN_ON_FIELD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SP_SPIN_ON_FIELD', 'QPROFILE', 'ACTIVATED', NULL, 'f6629749-7e31-457b-bca7-7335c102a9c7'),
(442, SYSDATE(), NULL, 'ruleKey=findbugs:NM_VERY_CONFUSING_INTENTIONAL;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NM_VERY_CONFUSING_INTENTIONAL', 'QPROFILE', 'ACTIVATED', NULL, '6d2781fd-05ee-424a-a0e1-ce4ad56b94f3'),
(443, SYSDATE(), NULL, 'ruleKey=findbugs:ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL', 'QPROFILE', 'ACTIVATED', NULL, '3db33a34-5662-4cbf-a289-f613b5e82023'),
(444, SYSDATE(), NULL, 'ruleKey=findbugs:IS2_INCONSISTENT_SYNC;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IS2_INCONSISTENT_SYNC', 'QPROFILE', 'ACTIVATED', NULL, '00b924f9-22d6-4dc4-ae64-80e957241092'),
(445, SYSDATE(), NULL, 'ruleKey=findbugs:ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH', 'QPROFILE', 'ACTIVATED', NULL, '64afbb93-8998-4962-aaa9-6238d56dc758'),
(446, SYSDATE(), NULL, 'ruleKey=findbugs:XSS_REQUEST_PARAMETER_TO_SEND_ERROR;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:XSS_REQUEST_PARAMETER_TO_SEND_ERROR', 'QPROFILE', 'ACTIVATED', NULL, '637f47c0-58de-43fa-97ba-642ceb25f1c7'),
(447, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS', 'QPROFILE', 'ACTIVATED', NULL, '1c97dc04-086f-4eba-8b12-ce2c8ae37262'),
(448, SYSDATE(), NULL, 'ruleKey=findbugs:CN_IDIOM;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:CN_IDIOM', 'QPROFILE', 'ACTIVATED', NULL, 'a2177690-3f73-431d-a2ec-02c774457d9d'),
(449, SYSDATE(), NULL, 'ruleKey=findbugs:GC_UNCHECKED_TYPE_IN_GENERIC_CALL;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:GC_UNCHECKED_TYPE_IN_GENERIC_CALL', 'QPROFILE', 'ACTIVATED', NULL, 'f19b90ce-61bc-4d20-9371-9510e73a258d'),
(450, SYSDATE(), NULL, 'ruleKey=findbugs:SE_PRIVATE_READ_RESOLVE_NOT_INHERITED;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SE_PRIVATE_READ_RESOLVE_NOT_INHERITED', 'QPROFILE', 'ACTIVATED', NULL, 'edd367c0-7ce8-4606-901c-0568d377e883'),
(451, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_INVOKING_TOSTRING_ON_ARRAY;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DMI_INVOKING_TOSTRING_ON_ARRAY', 'QPROFILE', 'ACTIVATED', NULL, '96c753df-94fe-4697-9175-acb2aa04e988'),
(452, SYSDATE(), NULL, 'ruleKey=findbugs:SW_SWING_METHODS_INVOKED_IN_SWING_THREAD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SW_SWING_METHODS_INVOKED_IN_SWING_THREAD', 'QPROFILE', 'ACTIVATED', NULL, 'dbef43ff-a0fd-483e-acb6-28eec933014f'),
(453, SYSDATE(), NULL, 'ruleKey=findbugs:DL_SYNCHRONIZATION_ON_BOOLEAN;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DL_SYNCHRONIZATION_ON_BOOLEAN', 'QPROFILE', 'ACTIVATED', NULL, '4fe88a8c-b6ef-4390-9a69-687f4f0cb265'),
(454, SYSDATE(), NULL, 'ruleKey=findbugs:SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW', 'QPROFILE', 'ACTIVATED', NULL, '49fadb70-7df1-43c3-83e9-b2c377d798fb'),
(455, SYSDATE(), NULL, 'ruleKey=findbugs:NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE', 'QPROFILE', 'ACTIVATED', NULL, '4086dd90-12ad-4363-9916-4dd278142eba'),
(456, SYSDATE(), NULL, 'ruleKey=findbugs:NP_ARGUMENT_MIGHT_BE_NULL;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NP_ARGUMENT_MIGHT_BE_NULL', 'QPROFILE', 'ACTIVATED', NULL, '1d65407c-4451-47d7-bd1d-468595d8e6ed'),
(457, SYSDATE(), NULL, 'ruleKey=findbugs:DM_DEFAULT_ENCODING;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DM_DEFAULT_ENCODING', 'QPROFILE', 'ACTIVATED', NULL, 'c95f3d6b-14e1-4e04-baaa-9e787523d76d'),
(458, SYSDATE(), NULL, 'ruleKey=findbugs:CO_ABSTRACT_SELF;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:CO_ABSTRACT_SELF', 'QPROFILE', 'ACTIVATED', NULL, 'dc2d59e7-74ac-4154-9f1b-05b0db1706ea'),
(459, SYSDATE(), NULL, 'ruleKey=findbugs:RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED', 'QPROFILE', 'ACTIVATED', NULL, 'e024f4d8-0a7c-4297-8f21-4b904d2d8fac'),
(460, SYSDATE(), NULL, 'ruleKey=findbugs:DC_DOUBLECHECK;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DC_DOUBLECHECK', 'QPROFILE', 'ACTIVATED', NULL, 'f06244b5-68ae-4d1a-9ea3-a7824edd21b6'),
(461, SYSDATE(), NULL, 'ruleKey=findbugs:UL_UNRELEASED_LOCK_EXCEPTION_PATH;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:UL_UNRELEASED_LOCK_EXCEPTION_PATH', 'QPROFILE', 'ACTIVATED', NULL, 'aac88720-5519-49fa-8098-40a01d0eb664'),
(462, SYSDATE(), NULL, 'ruleKey=findbugs:SE_BAD_FIELD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SE_BAD_FIELD', 'QPROFILE', 'ACTIVATED', NULL, '3597b6e9-8fe4-40de-a26b-fc07fa73d16c'),
(463, SYSDATE(), NULL, 'ruleKey=findbugs:SA_LOCAL_SELF_ASSIGNMENT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SA_LOCAL_SELF_ASSIGNMENT', 'QPROFILE', 'ACTIVATED', NULL, '37478a1e-7995-4f96-a539-32ba28bc9655'),
(464, SYSDATE(), NULL, 'ruleKey=findbugs:REC_CATCH_EXCEPTION;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:REC_CATCH_EXCEPTION', 'QPROFILE', 'ACTIVATED', NULL, 'c8fe186b-1a55-4adf-beba-d0465f77c57b'),
(465, SYSDATE(), NULL, 'ruleKey=findbugs:TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED', 'QPROFILE', 'ACTIVATED', NULL, 'a6d14fa1-ae6f-449f-82df-eda1a1748501'),
(466, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_VACUOUS_SELF_COLLECTION_CALL;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DMI_VACUOUS_SELF_COLLECTION_CALL', 'QPROFILE', 'ACTIVATED', NULL, 'b91c825f-5223-4d66-8f4f-ff90d20601d8'),
(467, SYSDATE(), NULL, 'ruleKey=findbugs:UR_UNINIT_READ;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:UR_UNINIT_READ', 'QPROFILE', 'ACTIVATED', NULL, 'fe248f79-debb-4047-a51c-01f1b42b9a1c'),
(468, SYSDATE(), NULL, 'ruleKey=findbugs:NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'QPROFILE', 'ACTIVATED', NULL, '14ac07aa-aa1a-437d-be3d-51ca6993fc85'),
(469, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR', 'QPROFILE', 'ACTIVATED', NULL, 'dfb8831a-a83b-4080-bf6d-3bcab74fbf3c'),
(470, SYSDATE(), NULL, 'ruleKey=findbugs:BIT_AND;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:BIT_AND', 'QPROFILE', 'ACTIVATED', NULL, '9511c279-5211-454c-87c3-23f488e8fd58'),
(471, SYSDATE(), NULL, 'ruleKey=findbugs:RR_NOT_CHECKED;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:RR_NOT_CHECKED', 'QPROFILE', 'ACTIVATED', NULL, '0ec584eb-617f-48bf-9c6e-cafe5963257a'),
(472, SYSDATE(), NULL, 'ruleKey=findbugs:ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD', 'QPROFILE', 'ACTIVATED', NULL, '3e90733d-5638-4809-81a7-1876152f8db5'),
(473, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES', 'QPROFILE', 'ACTIVATED', NULL, '3c00b62a-6842-4b31-ba20-52f97ae421c8'),
(474, SYSDATE(), NULL, 'ruleKey=findbugs:NP_TOSTRING_COULD_RETURN_NULL;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_TOSTRING_COULD_RETURN_NULL', 'QPROFILE', 'ACTIVATED', NULL, 'db0b2b27-77fc-4805-9150-95763ca2dc96'),
(475, SYSDATE(), NULL, 'ruleKey=findbugs:GC_UNRELATED_TYPES;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:GC_UNRELATED_TYPES', 'QPROFILE', 'ACTIVATED', NULL, 'f0b7f694-39df-4ecd-aab0-960ccf279b70'),
(476, SYSDATE(), NULL, 'ruleKey=findbugs:OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE', 'QPROFILE', 'ACTIVATED', NULL, '0db0064a-8759-4885-8067-0007c9402ff6'),
(477, SYSDATE(), NULL, 'ruleKey=findbugs:EC_NULL_ARG;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:EC_NULL_ARG', 'QPROFILE', 'ACTIVATED', NULL, '2d0860bc-d089-4d02-ad39-fe7c76b0423e'),
(478, SYSDATE(), NULL, 'ruleKey=findbugs:HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS', 'QPROFILE', 'ACTIVATED', NULL, 'b245288b-dc90-4ab1-bb03-2d1b6d78ea0f'),
(479, SYSDATE(), NULL, 'ruleKey=findbugs:NP_NONNULL_RETURN_VIOLATION;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_NONNULL_RETURN_VIOLATION', 'QPROFILE', 'ACTIVATED', NULL, '8cc48b79-3bee-4a3f-a06b-19de5b248dd9'),
(480, SYSDATE(), NULL, 'ruleKey=findbugs:IL_INFINITE_RECURSIVE_LOOP;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IL_INFINITE_RECURSIVE_LOOP', 'QPROFILE', 'ACTIVATED', NULL, '73da1a20-468e-410b-8e1d-927d01c463af'),
(481, SYSDATE(), NULL, 'ruleKey=findbugs:DM_STRING_TOSTRING;profileKey=java-findbugs-42626;severity=INFO;key=java-findbugs-42626:findbugs:DM_STRING_TOSTRING', 'QPROFILE', 'ACTIVATED', NULL, 'cb9d8652-a3a6-4a9a-a70b-42b956abb6c0'),
(482, SYSDATE(), NULL, 'ruleKey=findbugs:VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG', 'QPROFILE', 'ACTIVATED', NULL, 'ee6d092a-f3f5-4fd1-8e51-205f3510a8ae'),
(483, SYSDATE(), NULL, 'ruleKey=findbugs:AM_CREATES_EMPTY_ZIP_FILE_ENTRY;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:AM_CREATES_EMPTY_ZIP_FILE_ENTRY', 'QPROFILE', 'ACTIVATED', NULL, '6ace84fc-86a1-49c7-ad96-32d17de2d570'),
(484, SYSDATE(), NULL, 'ruleKey=findbugs:NS_NON_SHORT_CIRCUIT;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NS_NON_SHORT_CIRCUIT', 'QPROFILE', 'ACTIVATED', NULL, 'f9988cd4-5978-418d-ae04-e3b06f83ad2c'),
(485, SYSDATE(), NULL, 'ruleKey=findbugs:DLS_DEAD_LOCAL_STORE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DLS_DEAD_LOCAL_STORE', 'QPROFILE', 'ACTIVATED', NULL, '9fc5796e-e7cf-4c6d-adf1-90af11b46e28'),
(486, SYSDATE(), NULL, 'ruleKey=findbugs:DM_BOOLEAN_CTOR;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DM_BOOLEAN_CTOR', 'QPROFILE', 'ACTIVATED', NULL, '9fcff4c1-65b6-4843-a737-37625065bd01'),
(487, SYSDATE(), NULL, 'ruleKey=findbugs:BC_BAD_CAST_TO_CONCRETE_COLLECTION;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:BC_BAD_CAST_TO_CONCRETE_COLLECTION', 'QPROFILE', 'ACTIVATED', NULL, '71103431-fad2-49a2-8e83-ebd3af52d1b6'),
(488, SYSDATE(), NULL, 'ruleKey=findbugs:SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS', 'QPROFILE', 'ACTIVATED', NULL, 'e814a32a-dc1d-4ec8-9f40-2b5c1f7871c8'),
(489, SYSDATE(), NULL, 'ruleKey=findbugs:LI_LAZY_INIT_STATIC;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:LI_LAZY_INIT_STATIC', 'QPROFILE', 'ACTIVATED', NULL, '7e8b3cdc-8a29-4d73-9a43-ccdb2efd1c09'),
(490, SYSDATE(), NULL, 'ruleKey=findbugs:RV_ABSOLUTE_VALUE_OF_RANDOM_INT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:RV_ABSOLUTE_VALUE_OF_RANDOM_INT', 'QPROFILE', 'ACTIVATED', NULL, '56ee7776-b584-45e4-b776-8075b1588855'),
(491, SYSDATE(), NULL, 'ruleKey=findbugs:FE_FLOATING_POINT_EQUALITY;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:FE_FLOATING_POINT_EQUALITY', 'QPROFILE', 'ACTIVATED', NULL, '96f1737f-cc29-4033-91aa-e6833cf68edc'),
(492, SYSDATE(), NULL, 'ruleKey=findbugs:NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER', 'QPROFILE', 'ACTIVATED', NULL, '4e42d375-6dac-4f03-9074-89234c0bae44'),
(493, SYSDATE(), NULL, 'ruleKey=findbugs:ICAST_INTEGER_MULTIPLY_CAST_TO_LONG;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:ICAST_INTEGER_MULTIPLY_CAST_TO_LONG', 'QPROFILE', 'ACTIVATED', NULL, '4a1402fe-0c00-4aa6-9a3f-ece48453fb15'),
(494, SYSDATE(), NULL, 'ruleKey=findbugs:NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'QPROFILE', 'ACTIVATED', NULL, '7ed1e72b-709f-4f6e-98e0-86f0fa751fce'),
(495, SYSDATE(), NULL, 'ruleKey=findbugs:STI_INTERRUPTED_ON_UNKNOWNTHREAD;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:STI_INTERRUPTED_ON_UNKNOWNTHREAD', 'QPROFILE', 'ACTIVATED', NULL, 'a6d2e703-c1c9-456d-a51d-4dc0080d7da1'),
(496, SYSDATE(), NULL, 'ruleKey=findbugs:NM_SAME_SIMPLE_NAME_AS_INTERFACE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:NM_SAME_SIMPLE_NAME_AS_INTERFACE', 'QPROFILE', 'ACTIVATED', NULL, 'cb39dad3-fa93-46c0-b6e9-f18378488bed'),
(497, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_DOH;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DMI_DOH', 'QPROFILE', 'ACTIVATED', NULL, 'c612a6ca-d383-4dab-b936-c9cb2ac16bbf'),
(498, SYSDATE(), NULL, 'ruleKey=findbugs:SA_FIELD_SELF_ASSIGNMENT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SA_FIELD_SELF_ASSIGNMENT', 'QPROFILE', 'ACTIVATED', NULL, '248aefc8-7b49-439f-b920-b3dd8dc070eb'),
(499, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_EMPTY_DB_PASSWORD;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DMI_EMPTY_DB_PASSWORD', 'QPROFILE', 'ACTIVATED', NULL, 'c40ede00-e495-4a29-b854-72c3d006569e'),
(500, SYSDATE(), NULL, 'ruleKey=findbugs:IJU_BAD_SUITE_METHOD;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IJU_BAD_SUITE_METHOD', 'QPROFILE', 'ACTIVATED', NULL, 'a1ff6f9b-f438-4d29-92b3-2dda28530ed8'),
(501, SYSDATE(), NULL, 'ruleKey=findbugs:VA_FORMAT_STRING_MISSING_ARGUMENT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:VA_FORMAT_STRING_MISSING_ARGUMENT', 'QPROFILE', 'ACTIVATED', NULL, 'a378a6bd-0313-44a9-82ed-615593ead411'),
(502, SYSDATE(), NULL, 'ruleKey=findbugs:WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL', 'QPROFILE', 'ACTIVATED', NULL, 'a94f494e-6fb3-43c9-ab48-58c0d63a9de9'),
(503, SYSDATE(), NULL, 'ruleKey=findbugs:BIT_ADD_OF_SIGNED_BYTE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:BIT_ADD_OF_SIGNED_BYTE', 'QPROFILE', 'ACTIVATED', NULL, '0cf3fb63-e0bd-4e56-ab0b-291319899766'),
(504, SYSDATE(), NULL, 'ruleKey=findbugs:TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED', 'QPROFILE', 'ACTIVATED', NULL, 'ea89c666-fbe5-4087-886e-733457bd80f9'),
(505, SYSDATE(), NULL, 'ruleKey=findbugs:SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE', 'QPROFILE', 'ACTIVATED', NULL, '4c64ac17-fb5d-4c9c-81d2-ca0fababf527'),
(506, SYSDATE(), NULL, 'ruleKey=findbugs:RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION', 'QPROFILE', 'ACTIVATED', NULL, '4af2a81c-3a67-428d-86df-4675076ef974'),
(507, SYSDATE(), NULL, 'ruleKey=findbugs:NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE', 'QPROFILE', 'ACTIVATED', NULL, '4ee36a28-5f14-48a4-9333-cba5362c091e'),
(508, SYSDATE(), NULL, 'ruleKey=findbugs:EQ_ALWAYS_TRUE;profileKey=java-findbugs-42626;severity=BLOCKER;key=java-findbugs-42626:findbugs:EQ_ALWAYS_TRUE', 'QPROFILE', 'ACTIVATED', NULL, 'afefb2ac-d603-42e6-a46a-307b4bc4a631'),
(509, SYSDATE(), NULL, 'ruleKey=findbugs:STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE', 'QPROFILE', 'ACTIVATED', NULL, '423b1611-6f72-4799-8e9f-326c868accd0'),
(510, SYSDATE(), NULL, 'ruleKey=findbugs:BC_BAD_CAST_TO_ABSTRACT_COLLECTION;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:BC_BAD_CAST_TO_ABSTRACT_COLLECTION', 'QPROFILE', 'ACTIVATED', NULL, 'dcac63ad-5722-4c7a-87d3-1bb485f9fdf0'),
(511, SYSDATE(), NULL, 'ruleKey=findbugs:ISC_INSTANTIATE_STATIC_CLASS;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:ISC_INSTANTIATE_STATIC_CLASS', 'QPROFILE', 'ACTIVATED', NULL, 'a95df8a9-5251-44a4-b851-a1cfcbea40c9'),
(512, SYSDATE(), NULL, 'ruleKey=findbugs:IT_NO_SUCH_ELEMENT;profileKey=java-findbugs-42626;severity=MINOR;key=java-findbugs-42626:findbugs:IT_NO_SUCH_ELEMENT', 'QPROFILE', 'ACTIVATED', NULL, '08070ab5-c8e8-4f0f-9ceb-4891a4e57707'),
(513, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE', 'QPROFILE', 'ACTIVATED', NULL, '1b3d91b4-9527-4bfe-a36e-8640f8e8014d'),
(514, SYSDATE(), NULL, 'ruleKey=findbugs:INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE', 'QPROFILE', 'ACTIVATED', NULL, '1f1a0382-1698-418e-bb10-00c43588c3ff'),
(515, SYSDATE(), NULL, 'ruleKey=findbugs:EI_EXPOSE_REP;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:EI_EXPOSE_REP', 'QPROFILE', 'ACTIVATED', NULL, '05c7b2a6-89db-4b08-9f12-4c777f10fb53'),
(516, SYSDATE(), NULL, 'ruleKey=findbugs:JLM_JSR166_LOCK_MONITORENTER;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:JLM_JSR166_LOCK_MONITORENTER', 'QPROFILE', 'ACTIVATED', NULL, '6fabad70-8fbf-4205-a359-9d06b088c1ae'),
(517, SYSDATE(), NULL, 'ruleKey=findbugs:BIT_IOR_OF_SIGNED_BYTE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:BIT_IOR_OF_SIGNED_BYTE', 'QPROFILE', 'ACTIVATED', NULL, '4375595d-287f-4ece-b291-09d0dc84839a'),
(518, SYSDATE(), NULL, 'ruleKey=findbugs:MSF_MUTABLE_SERVLET_FIELD;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:MSF_MUTABLE_SERVLET_FIELD', 'QPROFILE', 'ACTIVATED', NULL, 'fbe0d0b2-cf6a-4a5a-b7c3-acd7af8cf2a8'),
(519, SYSDATE(), NULL, 'ruleKey=findbugs:IS_INCONSISTENT_SYNC;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:IS_INCONSISTENT_SYNC', 'QPROFILE', 'ACTIVATED', NULL, 'd461d1b1-83fc-4f74-b6c7-6beb0ed0259a'),
(520, SYSDATE(), NULL, 'ruleKey=findbugs:RV_REM_OF_HASHCODE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:RV_REM_OF_HASHCODE', 'QPROFILE', 'ACTIVATED', NULL, 'f93a63f8-e8b6-4fe5-82a1-dd878e3b119d'),
(521, SYSDATE(), NULL, 'ruleKey=findbugs:LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE;profileKey=java-findbugs-42626;severity=INFO;key=java-findbugs-42626:findbugs:LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE', 'QPROFILE', 'ACTIVATED', NULL, '0e59846d-a896-4f52-84be-20ddff61af1b'),
(522, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS', 'QPROFILE', 'ACTIVATED', NULL, 'f3a57263-8e09-44c8-bd70-a86d76e77f98'),
(523, SYSDATE(), NULL, 'ruleKey=findbugs:ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND', 'QPROFILE', 'ACTIVATED', NULL, '73cbfd6d-50f4-4227-a28b-c0af9a6a72ac'),
(524, SYSDATE(), NULL, 'ruleKey=findbugs:SE_NONSTATIC_SERIALVERSIONID;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:SE_NONSTATIC_SERIALVERSIONID', 'QPROFILE', 'ACTIVATED', NULL, '35554057-df27-45c6-a6ea-db1d92aada87'),
(525, SYSDATE(), NULL, 'ruleKey=findbugs:BC_VACUOUS_INSTANCEOF;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:BC_VACUOUS_INSTANCEOF', 'QPROFILE', 'ACTIVATED', NULL, '515a6e25-1a37-4daf-b168-1134d91bf11e'),
(526, SYSDATE(), NULL, 'ruleKey=findbugs:RV_ABSOLUTE_VALUE_OF_HASHCODE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:RV_ABSOLUTE_VALUE_OF_HASHCODE', 'QPROFILE', 'ACTIVATED', NULL, '5db29df2-d6e3-4352-9c5b-19d352dae080'),
(527, SYSDATE(), NULL, 'ruleKey=findbugs:RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN', 'QPROFILE', 'ACTIVATED', NULL, 'f225eab7-00dc-49bc-b4fc-3b7a387e8f1f'),
(528, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_CALLING_NEXT_FROM_HASNEXT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DMI_CALLING_NEXT_FROM_HASNEXT', 'QPROFILE', 'ACTIVATED', NULL, '5e200a0c-ff09-4562-95df-32764b7a795e'),
(529, SYSDATE(), NULL, 'ruleKey=findbugs:NP_NULL_ON_SOME_PATH;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_NULL_ON_SOME_PATH', 'QPROFILE', 'ACTIVATED', NULL, 'e38e33d6-df67-4aa0-b7b3-3a6f3e143db7'),
(530, SYSDATE(), NULL, 'ruleKey=findbugs:RS_READOBJECT_SYNC;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:RS_READOBJECT_SYNC', 'QPROFILE', 'ACTIVATED', NULL, '3201d45d-843c-4df5-aee7-c052f2f50009'),
(531, SYSDATE(), NULL, 'ruleKey=findbugs:BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY;profileKey=java-findbugs-42626;severity=BLOCKER;key=java-findbugs-42626:findbugs:BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY', 'QPROFILE', 'ACTIVATED', NULL, '6623a46c-05d4-4e0a-a335-58742be56731'),
(532, SYSDATE(), NULL, 'ruleKey=findbugs:NS_DANGEROUS_NON_SHORT_CIRCUIT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NS_DANGEROUS_NON_SHORT_CIRCUIT', 'QPROFILE', 'ACTIVATED', NULL, '66b0c118-cdb9-42da-b16a-3d1b7dc75809'),
(533, SYSDATE(), NULL, 'ruleKey=findbugs:BC_UNCONFIRMED_CAST;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:BC_UNCONFIRMED_CAST', 'QPROFILE', 'ACTIVATED', NULL, 'a11b0991-049e-4634-8b80-806671df5f53'),
(534, SYSDATE(), NULL, 'ruleKey=findbugs:SA_FIELD_DOUBLE_ASSIGNMENT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:SA_FIELD_DOUBLE_ASSIGNMENT', 'QPROFILE', 'ACTIVATED', NULL, '64f89531-9eea-49d0-9042-2091d7a8bd76'),
(535, SYSDATE(), NULL, 'ruleKey=findbugs:EQ_GETCLASS_AND_CLASS_CONSTANT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:EQ_GETCLASS_AND_CLASS_CONSTANT', 'QPROFILE', 'ACTIVATED', NULL, '5fad26d1-c5a0-40c5-9285-b861e512f295'),
(536, SYSDATE(), NULL, 'ruleKey=findbugs:VA_FORMAT_STRING_ARG_MISMATCH;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:VA_FORMAT_STRING_ARG_MISMATCH', 'QPROFILE', 'ACTIVATED', NULL, '820222cd-fb5b-48fd-99df-930fa50a5004'),
(537, SYSDATE(), NULL, 'ruleKey=findbugs:MS_OOI_PKGPROTECT;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:MS_OOI_PKGPROTECT', 'QPROFILE', 'ACTIVATED', NULL, '9954399d-908f-4b7a-9a47-58b1ee5c3add'),
(538, SYSDATE(), NULL, 'ruleKey=findbugs:EC_UNRELATED_TYPES;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:EC_UNRELATED_TYPES', 'QPROFILE', 'ACTIVATED', NULL, '09513f54-5a9e-4c24-98b7-77686651cd69'),
(539, SYSDATE(), NULL, 'ruleKey=findbugs:MS_EXPOSE_REP;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:MS_EXPOSE_REP', 'QPROFILE', 'ACTIVATED', NULL, '05e75190-e153-4873-ac21-f4ce89a9bd85'),
(540, SYSDATE(), NULL, 'ruleKey=findbugs:BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR', 'QPROFILE', 'ACTIVATED', NULL, '896a8cf9-1b72-424e-8210-a80fa54a3ec6'),
(541, SYSDATE(), NULL, 'ruleKey=findbugs:DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT', 'QPROFILE', 'ACTIVATED', NULL, '9d1b99fc-a8a2-4128-a720-ac3945087de8'),
(542, SYSDATE(), NULL, 'ruleKey=findbugs:HRS_REQUEST_PARAMETER_TO_COOKIE;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:HRS_REQUEST_PARAMETER_TO_COOKIE', 'QPROFILE', 'ACTIVATED', NULL, 'a81786ff-fc0e-4911-a748-2caea991ce2e'),
(543, SYSDATE(), NULL, 'ruleKey=findbugs:ESync_EMPTY_SYNC;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:ESync_EMPTY_SYNC', 'QPROFILE', 'ACTIVATED', NULL, 'e81c4286-45ec-4e3f-8c60-1539c2d5d501'),
(544, SYSDATE(), NULL, 'ruleKey=findbugs:NP_IMMEDIATE_DEREFERENCE_OF_READLINE;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:NP_IMMEDIATE_DEREFERENCE_OF_READLINE', 'QPROFILE', 'ACTIVATED', NULL, 'd28f9709-2e88-4121-901e-239f26f5ab57'),
(545, SYSDATE(), NULL, 'ruleKey=findbugs:IJU_NO_TESTS;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:IJU_NO_TESTS', 'QPROFILE', 'ACTIVATED', NULL, '3f289fdb-b235-4989-9146-38db7ee03fbc'),
(546, SYSDATE(), NULL, 'ruleKey=findbugs:UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS', 'QPROFILE', 'ACTIVATED', NULL, '3ddfe9d7-0cf0-40d6-b055-2305365f9d62'),
(547, SYSDATE(), NULL, 'ruleKey=findbugs:RE_POSSIBLE_UNINTENDED_PATTERN;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:RE_POSSIBLE_UNINTENDED_PATTERN', 'QPROFILE', 'ACTIVATED', NULL, '9d13f16a-9c99-48f4-8bc3-698ed78e186a'),
(548, SYSDATE(), NULL, 'ruleKey=findbugs:DLS_OVERWRITTEN_INCREMENT;profileKey=java-findbugs-42626;severity=CRITICAL;key=java-findbugs-42626:findbugs:DLS_OVERWRITTEN_INCREMENT', 'QPROFILE', 'ACTIVATED', NULL, '3224092f-0bdb-4450-8531-d2aaabf8abf6'),
(549, SYSDATE(), NULL, 'ruleKey=findbugs:PT_RELATIVE_PATH_TRAVERSAL;profileKey=java-findbugs-42626;severity=MAJOR;key=java-findbugs-42626:findbugs:PT_RELATIVE_PATH_TRAVERSAL', 'QPROFILE', 'ACTIVATED', NULL, '1a7b1125-f0c4-4784-aca2-153c4b5eacf2'),
(550, SYSDATE(), NULL, 'ruleKey=common-java:DuplicatedBlocks;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:common-java:DuplicatedBlocks', 'QPROFILE', 'ACTIVATED', NULL, 'd251c00b-5810-4e09-9d53-16aaa5b3ee25'),
(551, SYSDATE(), NULL, 'ruleKey=common-java:InsufficientBranchCoverage;param_minimumBranchCoverageRatio=65.0;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:common-java:InsufficientBranchCoverage', 'QPROFILE', 'ACTIVATED', NULL, '5e209e82-ae4b-4147-bf86-4bfd1d4a515d'),
(552, SYSDATE(), NULL, 'ruleKey=squid:S00105;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:S00105', 'QPROFILE', 'ACTIVATED', NULL, 'ec1f7764-74e8-4aa9-8405-fb79bc31a3df'),
(553, SYSDATE(), NULL, 'param_max=10;ruleKey=squid:MethodCyclomaticComplexity;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:MethodCyclomaticComplexity', 'QPROFILE', 'ACTIVATED', NULL, '0a00e658-7818-4c73-b5f7-48bb39ff1747'),
(554, SYSDATE(), NULL, 'param_max=200;ruleKey=squid:ClassCyclomaticComplexity;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:ClassCyclomaticComplexity', 'QPROFILE', 'ACTIVATED', NULL, 'bc5f94ef-1857-43cf-a19d-5fd2e3e57635'),
(555, SYSDATE(), NULL, 'ruleKey=squid:CommentedOutCodeLine;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:CommentedOutCodeLine', 'QPROFILE', 'ACTIVATED', NULL, '621e5c8f-cdc4-4727-9542-e2ac1c147626'),
(556, SYSDATE(), NULL, 'ruleKey=squid:S00108;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S00108', 'QPROFILE', 'ACTIVATED', NULL, '9fbf31d9-cdab-4780-aa01-7c7380011acd'),
(557, SYSDATE(), NULL, 'param_maximumMethodParameters=7;ruleKey=squid:S00107;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S00107', 'QPROFILE', 'ACTIVATED', NULL, '2dc544ab-8f79-44a9-8497-7d98277c1638'),
(558, SYSDATE(), NULL, 'ruleKey=squid:S00112;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S00112', 'QPROFILE', 'ACTIVATED', NULL, '78d7065c-29c8-4b14-b4a2-f025ad350c67'),
(559, SYSDATE(), NULL, 'param_format=^[a-z][a-zA-Z0-9]*$;ruleKey=squid:S00100;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S00100', 'QPROFILE', 'ACTIVATED', NULL, 'fc232eb5-57a5-430c-a2bc-54947dd8c646'),
(560, SYSDATE(), NULL, 'param_format=^[A-Z][a-zA-Z0-9]*$;ruleKey=squid:S00101;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S00101', 'QPROFILE', 'ACTIVATED', NULL, 'd762fdde-200a-4e3e-bcb6-d46a6c5b2982'),
(561, SYSDATE(), NULL, 'param_format=^[A-Z][a-zA-Z0-9]*$;ruleKey=squid:S00114;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S00114', 'QPROFILE', 'ACTIVATED', NULL, 'c1e13824-b396-47ca-a7c6-d195a237a426'),
(562, SYSDATE(), NULL, 'param_format=^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$;ruleKey=squid:S00115;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S00115', 'QPROFILE', 'ACTIVATED', NULL, '93c3dfe8-0d25-49f9-8988-a9c50b012883'),
(563, SYSDATE(), NULL, 'param_format=^[a-z][a-zA-Z0-9]*$;ruleKey=squid:S00116;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S00116', 'QPROFILE', 'ACTIVATED', NULL, '9aed4111-9212-47d5-aab5-34ae9b8236ea'),
(564, SYSDATE(), NULL, 'param_format=^[a-z][a-zA-Z0-9]*$;ruleKey=squid:S00117;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S00117', 'QPROFILE', 'ACTIVATED', NULL, '22fd079c-fa4b-4da9-8f35-00b4a00c6e47'),
(565, SYSDATE(), NULL, 'param_format=^[A-Z]$;ruleKey=squid:S00119;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S00119', 'QPROFILE', 'ACTIVATED', NULL, '73981f5e-655f-433d-b15c-0e7df0369b18'),
(566, SYSDATE(), NULL, 'param_format=^[a-z]+(\\.[a-z][a-z0-9]*)*$;ruleKey=squid:S00120;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S00120', 'QPROFILE', 'ACTIVATED', NULL, '003f7d41-2234-498a-8460-c858b03a8332'),
(567, SYSDATE(), NULL, 'ruleKey=squid:S00121;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S00121', 'QPROFILE', 'ACTIVATED', NULL, '442f52b3-8839-454c-a985-32fed39ba460'),
(568, SYSDATE(), NULL, 'ruleKey=squid:S00122;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S00122', 'QPROFILE', 'ACTIVATED', NULL, '522dc61b-853e-4009-87d5-6555668b79c7'),
(569, SYSDATE(), NULL, 'ruleKey=squid:RightCurlyBraceSameLineAsNextBlockCheck;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:RightCurlyBraceSameLineAsNextBlockCheck', 'QPROFILE', 'ACTIVATED', NULL, '84a9ae4e-2cea-44b5-b8d5-6bc432da8093'),
(570, SYSDATE(), NULL, 'ruleKey=squid:RightCurlyBraceStartLineCheck;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:RightCurlyBraceStartLineCheck', 'QPROFILE', 'ACTIVATED', NULL, 'dcd88b2b-5b4d-4d10-b2f2-310e98bd25a8'),
(571, SYSDATE(), NULL, 'ruleKey=squid:LeftCurlyBraceEndLineCheck;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:LeftCurlyBraceEndLineCheck', 'QPROFILE', 'ACTIVATED', NULL, '8f400cd7-e241-4b0b-9d9a-662ff0c35477'),
(572, SYSDATE(), NULL, 'ruleKey=squid:UselessParenthesesCheck;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:UselessParenthesesCheck', 'QPROFILE', 'ACTIVATED', NULL, '34a0844a-a6e6-490e-8c51-9fa4809b61dd'),
(573, SYSDATE(), NULL, 'ruleKey=squid:ObjectFinalizeCheck;profileKey=java-sonar-way-67562;severity=CRITICAL;key=java-sonar-way-67562:squid:ObjectFinalizeCheck', 'QPROFILE', 'ACTIVATED', NULL, '3730cc32-2359-49e4-be27-068d75bb3cd3'),
(574, SYSDATE(), NULL, 'ruleKey=squid:ObjectFinalizeOverridenCheck;profileKey=java-sonar-way-67562;severity=CRITICAL;key=java-sonar-way-67562:squid:ObjectFinalizeOverridenCheck', 'QPROFILE', 'ACTIVATED', NULL, 'f9dc30a5-11bc-43da-a24e-cb98450da8a2'),
(575, SYSDATE(), NULL, 'ruleKey=squid:ObjectFinalizeOverridenCallsSuperFinalizeCheck;profileKey=java-sonar-way-67562;severity=BLOCKER;key=java-sonar-way-67562:squid:ObjectFinalizeOverridenCallsSuperFinalizeCheck', 'QPROFILE', 'ACTIVATED', NULL, '2a4f53fd-b685-46ad-8375-a127cd9480c4'),
(576, SYSDATE(), NULL, 'ruleKey=squid:ClassVariableVisibilityCheck;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:ClassVariableVisibilityCheck', 'QPROFILE', 'ACTIVATED', NULL, '1912fa5d-0e8e-4e64-886b-f6d393f6717e'),
(577, SYSDATE(), NULL, 'ruleKey=squid:ForLoopCounterChangedCheck;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:ForLoopCounterChangedCheck', 'QPROFILE', 'ACTIVATED', NULL, '400bcd0c-1103-4b9d-b2f9-3701f572a159'),
(578, SYSDATE(), NULL, 'ruleKey=squid:LabelsShouldNotBeUsedCheck;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:LabelsShouldNotBeUsedCheck', 'QPROFILE', 'ACTIVATED', NULL, '6b89790b-b260-4ab3-a300-0d4200c184dd'),
(579, SYSDATE(), NULL, 'ruleKey=squid:SwitchLastCaseIsDefaultCheck;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:SwitchLastCaseIsDefaultCheck', 'QPROFILE', 'ACTIVATED', NULL, '24ac7f3f-7765-42ad-9f1f-bdb36f5882a9'),
(580, SYSDATE(), NULL, 'ruleKey=squid:EmptyStatementUsageCheck;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:EmptyStatementUsageCheck', 'QPROFILE', 'ACTIVATED', NULL, '466cb346-04ca-4584-b52f-8f55d8e768f6'),
(581, SYSDATE(), NULL, 'ruleKey=squid:ModifiersOrderCheck;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:ModifiersOrderCheck', 'QPROFILE', 'ACTIVATED', NULL, 'e3bb7bcc-99b0-4138-829b-edfdf0090852'),
(582, SYSDATE(), NULL, 'ruleKey=squid:AssignmentInSubExpressionCheck;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:AssignmentInSubExpressionCheck', 'QPROFILE', 'ACTIVATED', NULL, 'fa5598d3-05f2-4497-b609-f08fadddaf8e'),
(583, SYSDATE(), NULL, 'param_legalCommentPattern=^\\s*+[^\\s]++$;ruleKey=squid:TrailingCommentCheck;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:TrailingCommentCheck', 'QPROFILE', 'ACTIVATED', NULL, 'daec8a8c-5c50-4883-b51e-350084b0f796'),
(584, SYSDATE(), NULL, 'ruleKey=squid:UselessImportCheck;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:UselessImportCheck', 'QPROFILE', 'ACTIVATED', NULL, 'ef1d2ad9-0951-40a5-8da3-9e3a528c9836'),
(585, SYSDATE(), NULL, 'ruleKey=squid:LowerCaseLongSuffixCheck;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:LowerCaseLongSuffixCheck', 'QPROFILE', 'ACTIVATED', NULL, 'fd8f4cc7-79c4-4626-9d71-a43fdb8220f6'),
(586, SYSDATE(), NULL, 'ruleKey=squid:MissingDeprecatedCheck;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:MissingDeprecatedCheck', 'QPROFILE', 'ACTIVATED', NULL, '50bccd1e-adec-494e-aaed-9d27a40f3d79'),
(587, SYSDATE(), NULL, 'ruleKey=squid:HiddenFieldCheck;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:HiddenFieldCheck', 'QPROFILE', 'ACTIVATED', NULL, 'bb5d66a5-2bc7-48f2-91f5-280bb88b4816'),
(588, SYSDATE(), NULL, 'ruleKey=squid:S1133;profileKey=java-sonar-way-67562;severity=INFO;key=java-sonar-way-67562:squid:S1133', 'QPROFILE', 'ACTIVATED', NULL, 'f420214e-0890-4a71-b0f1-1c767349f047'),
(589, SYSDATE(), NULL, 'ruleKey=squid:S1134;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1134', 'QPROFILE', 'ACTIVATED', NULL, '07424648-166a-42d3-aa99-61bf22a758ef'),
(590, SYSDATE(), NULL, 'ruleKey=squid:S1135;profileKey=java-sonar-way-67562;severity=INFO;key=java-sonar-way-67562:squid:S1135', 'QPROFILE', 'ACTIVATED', NULL, '878ef707-b3eb-49d4-96a6-c4783ad019e1'),
(591, SYSDATE(), NULL, 'ruleKey=squid:S1118;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1118', 'QPROFILE', 'ACTIVATED', NULL, 'e37b899f-1c10-436d-8b24-5bf9bbc809eb'),
(592, SYSDATE(), NULL, 'ruleKey=squid:S1132;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1132', 'QPROFILE', 'ACTIVATED', NULL, '19fc63d5-92db-47c8-b06c-84103dba2894'),
(593, SYSDATE(), NULL, 'ruleKey=squid:S1126;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1126', 'QPROFILE', 'ACTIVATED', NULL, '0b4e20e6-ef2d-47e0-bebf-fd46f23e6f37');
INSERT INTO `activities` (`id`, `created_at`, `user_login`, `data_field`, `log_type`, `log_action`, `log_message`, `log_key`) VALUES
(594, SYSDATE(), NULL, 'ruleKey=squid:S1125;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:S1125', 'QPROFILE', 'ACTIVATED', NULL, '8f7e0d70-240e-4135-9ae9-8e4caaaa1ae1'),
(595, SYSDATE(), NULL, 'param_max=3;ruleKey=squid:S1067;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1067', 'QPROFILE', 'ACTIVATED', NULL, 'a6fcb614-ab70-4e24-98bb-06f271a8b944'),
(596, SYSDATE(), NULL, 'ruleKey=squid:S1141;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1141', 'QPROFILE', 'ACTIVATED', NULL, '658e4996-1e95-4a52-83a3-bbd777f245d3'),
(597, SYSDATE(), NULL, 'ruleKey=squid:S1147;profileKey=java-sonar-way-67562;severity=CRITICAL;key=java-sonar-way-67562:squid:S1147', 'QPROFILE', 'ACTIVATED', NULL, '82979091-82ad-4587-b753-72f16eada3ba'),
(598, SYSDATE(), NULL, 'ruleKey=squid:S1143;profileKey=java-sonar-way-67562;severity=BLOCKER;key=java-sonar-way-67562:squid:S1143', 'QPROFILE', 'ACTIVATED', NULL, 'fbe72002-3046-4653-bbaa-768b7d247688'),
(599, SYSDATE(), NULL, 'ruleKey=squid:S1145;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1145', 'QPROFILE', 'ACTIVATED', NULL, '4841ab7d-c0b6-4943-9534-337603da6df3'),
(600, SYSDATE(), NULL, 'ruleKey=squid:S1157;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1157', 'QPROFILE', 'ACTIVATED', NULL, 'b0602000-8fe6-4b60-a7a1-2397909c6b87'),
(601, SYSDATE(), NULL, 'ruleKey=squid:S1155;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1155', 'QPROFILE', 'ACTIVATED', NULL, '9cff1e5f-5bb7-47ed-a76c-ed27b9ff3f83'),
(602, SYSDATE(), NULL, 'ruleKey=squid:S1149;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1149', 'QPROFILE', 'ACTIVATED', NULL, '5537c218-7806-4e22-9a54-8990d0d48706'),
(603, SYSDATE(), NULL, 'ruleKey=squid:S1171;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1171', 'QPROFILE', 'ACTIVATED', NULL, '68e9f3a9-f608-4f42-80a5-1f6064d8e0fb'),
(604, SYSDATE(), NULL, 'ruleKey=squid:S1168;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1168', 'QPROFILE', 'ACTIVATED', NULL, 'c703d394-6bc1-4d0b-8b14-d115a1c00c54'),
(605, SYSDATE(), NULL, 'ruleKey=squid:S1170;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1170', 'QPROFILE', 'ACTIVATED', NULL, 'df13116a-f850-4cab-b1d8-1dd32a84cbf9'),
(606, SYSDATE(), NULL, 'ruleKey=squid:S1163;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1163', 'QPROFILE', 'ACTIVATED', NULL, '888c36f3-f9b4-4138-ade8-755da158846c'),
(607, SYSDATE(), NULL, 'ruleKey=squid:S106;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S106', 'QPROFILE', 'ACTIVATED', NULL, '56599938-e6be-4397-8604-c7058fac9005'),
(608, SYSDATE(), NULL, 'ruleKey=squid:S1165;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1165', 'QPROFILE', 'ACTIVATED', NULL, '434cd905-2ddd-458f-b065-62c5f9b47b8d'),
(609, SYSDATE(), NULL, 'ruleKey=squid:S1066;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1066', 'QPROFILE', 'ACTIVATED', NULL, 'f54c422c-9429-4700-bbe3-59c47473c1e8'),
(610, SYSDATE(), NULL, 'param_max=3;ruleKey=squid:S134;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:S134', 'QPROFILE', 'ACTIVATED', NULL, '6e4cd9c6-f943-4131-9c55-beb08227a25f'),
(611, SYSDATE(), NULL, 'ruleKey=squid:S1181;profileKey=java-sonar-way-67562;severity=BLOCKER;key=java-sonar-way-67562:squid:S1181', 'QPROFILE', 'ACTIVATED', NULL, '03588ec9-be0f-42df-89c6-c5098ae6dbf2'),
(612, SYSDATE(), NULL, 'ruleKey=squid:S1150;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1150', 'QPROFILE', 'ACTIVATED', NULL, '142b49fb-770d-48fa-bba3-88853fb3303c'),
(613, SYSDATE(), NULL, 'ruleKey=squid:S1182;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1182', 'QPROFILE', 'ACTIVATED', NULL, '3a561af0-d40c-454c-803c-878ba150e52b'),
(614, SYSDATE(), NULL, 'param_max=5;ruleKey=squid:S1151;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1151', 'QPROFILE', 'ACTIVATED', NULL, 'c4b66fe1-235a-438d-92cd-7144e1942b34'),
(615, SYSDATE(), NULL, 'ruleKey=squid:S128;profileKey=java-sonar-way-67562;severity=CRITICAL;key=java-sonar-way-67562:squid:S128', 'QPROFILE', 'ACTIVATED', NULL, '646b7a3d-55a5-40b4-8564-49d34c2496f2'),
(616, SYSDATE(), NULL, 'ruleKey=squid:S1166;profileKey=java-sonar-way-67562;severity=MAJOR;param_exceptions=java.lang.InterruptedException, java.lang.NumberFormatException, java.text.ParseException, java.net.MalformedURLException;key=java-sonar-way-67562:squid:S1166', 'QPROFILE', 'ACTIVATED', NULL, 'c654da61-8640-4ae0-9721-015b943da85c'),
(617, SYSDATE(), NULL, 'ruleKey=squid:S1190;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1190', 'QPROFILE', 'ACTIVATED', NULL, '7c6df390-08d9-4281-9892-6350b49a9515'),
(618, SYSDATE(), NULL, 'param_max=20;ruleKey=squid:S1188;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1188', 'QPROFILE', 'ACTIVATED', NULL, '6d0478df-a1e5-4d0a-83e7-112ddd2cb06d'),
(619, SYSDATE(), NULL, 'ruleKey=squid:S1191;profileKey=java-sonar-way-67562;severity=MAJOR;param_exclude=;key=java-sonar-way-67562:squid:S1191', 'QPROFILE', 'ACTIVATED', NULL, '56e75960-620b-4b6f-8839-dc475f0ef835'),
(620, SYSDATE(), NULL, 'ruleKey=squid:S135;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S135', 'QPROFILE', 'ACTIVATED', NULL, '81e5f2c5-f81e-456e-8f01-d5b68b233407'),
(621, SYSDATE(), NULL, 'ruleKey=squid:S1186;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1186', 'QPROFILE', 'ACTIVATED', NULL, 'be1e3fa5-7238-4d56-84fc-77a76262a632'),
(622, SYSDATE(), NULL, 'ruleKey=squid:S1185;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:S1185', 'QPROFILE', 'ACTIVATED', NULL, '1b8da39f-3384-4786-9224-6d985b4151b3'),
(623, SYSDATE(), NULL, 'ruleKey=squid:S1174;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1174', 'QPROFILE', 'ACTIVATED', NULL, 'b93d2dad-be66-4d36-98cb-47fbf9c8fa56'),
(624, SYSDATE(), NULL, 'ruleKey=squid:S1175;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1175', 'QPROFILE', 'ACTIVATED', NULL, 'f7613103-ce2c-4fa1-81b3-e0e3bad406f2'),
(625, SYSDATE(), NULL, 'ruleKey=squid:S1153;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:S1153', 'QPROFILE', 'ACTIVATED', NULL, '4295570b-e405-4291-b8ad-d4d01baee797'),
(626, SYSDATE(), NULL, 'ruleKey=squid:S1148;profileKey=java-sonar-way-67562;severity=CRITICAL;key=java-sonar-way-67562:squid:S1148', 'QPROFILE', 'ACTIVATED', NULL, '1f59bfaf-50e0-46dd-8f1b-3893e76a6b92'),
(627, SYSDATE(), NULL, 'ruleKey=squid:S1195;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:S1195', 'QPROFILE', 'ACTIVATED', NULL, '76ccf34c-1494-4932-b98d-cdb3a626e4e8'),
(628, SYSDATE(), NULL, 'ruleKey=squid:S1194;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1194', 'QPROFILE', 'ACTIVATED', NULL, 'd2b5862b-bd14-4304-a659-e57517ab795d'),
(629, SYSDATE(), NULL, 'ruleKey=squid:S1193;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1193', 'QPROFILE', 'ACTIVATED', NULL, '4ef55943-259e-4d5b-b170-fa827fc6af7f'),
(630, SYSDATE(), NULL, 'ruleKey=squid:S1192;profileKey=java-sonar-way-67562;severity=MINOR;param_threshold=3;key=java-sonar-way-67562:squid:S1192', 'QPROFILE', 'ACTIVATED', NULL, '27705678-ea65-4446-bb6a-4dd5fd8f5b10'),
(631, SYSDATE(), NULL, 'ruleKey=squid:S1158;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1158', 'QPROFILE', 'ACTIVATED', NULL, '15fdf8cf-1d90-4601-8f7a-4eeedad93d15'),
(632, SYSDATE(), NULL, 'ruleKey=squid:S1215;profileKey=java-sonar-way-67562;severity=CRITICAL;key=java-sonar-way-67562:squid:S1215', 'QPROFILE', 'ACTIVATED', NULL, 'bf98604f-ad18-4701-a732-c080127daba6'),
(633, SYSDATE(), NULL, 'ruleKey=squid:S1197;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:S1197', 'QPROFILE', 'ACTIVATED', NULL, '97b2e350-dea7-41a8-b6f3-72ef4249b1e9'),
(634, SYSDATE(), NULL, 'ruleKey=squid:S1220;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1220', 'QPROFILE', 'ACTIVATED', NULL, 'b79c7892-1a3e-47da-85ee-628ce0b124e0'),
(635, SYSDATE(), NULL, 'ruleKey=squid:S1221;profileKey=java-sonar-way-67562;severity=CRITICAL;key=java-sonar-way-67562:squid:S1221', 'QPROFILE', 'ACTIVATED', NULL, 'ae2f0679-1eb4-414e-a8c0-22a1f41fc546'),
(636, SYSDATE(), NULL, 'ruleKey=squid:S1199;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1199', 'QPROFILE', 'ACTIVATED', NULL, '0d72faeb-e23e-4fca-927b-a098ef41eaf4'),
(637, SYSDATE(), NULL, 'ruleKey=squid:S1214;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:S1214', 'QPROFILE', 'ACTIVATED', NULL, 'b7554480-3597-4b4a-b8d3-7255ab6f3fd9'),
(638, SYSDATE(), NULL, 'ruleKey=squid:S1201;profileKey=java-sonar-way-67562;severity=CRITICAL;key=java-sonar-way-67562:squid:S1201', 'QPROFILE', 'ACTIVATED', NULL, '66b6e19a-5977-4b0d-a1bf-474ad721996f'),
(639, SYSDATE(), NULL, 'ruleKey=squid:S1210;profileKey=java-sonar-way-67562;severity=CRITICAL;key=java-sonar-way-67562:squid:S1210', 'QPROFILE', 'ACTIVATED', NULL, 'cb21e651-87c7-4756-ab91-dfa4b5e25ec8'),
(640, SYSDATE(), NULL, 'ruleKey=squid:S1206;profileKey=java-sonar-way-67562;severity=BLOCKER;key=java-sonar-way-67562:squid:S1206', 'QPROFILE', 'ACTIVATED', NULL, 'd4a663a5-d57a-4e3b-84c5-1e1c5829172f'),
(641, SYSDATE(), NULL, 'ruleKey=squid:S1219;profileKey=java-sonar-way-67562;severity=CRITICAL;key=java-sonar-way-67562:squid:S1219', 'QPROFILE', 'ACTIVATED', NULL, 'c5ec1c29-961f-43b8-8c6a-b019643fafe4'),
(642, SYSDATE(), NULL, 'ruleKey=squid:S1301;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:S1301', 'QPROFILE', 'ACTIVATED', NULL, '7caed476-60b4-4c10-8067-b7026c712f44'),
(643, SYSDATE(), NULL, 'ruleKey=squid:S1314;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1314', 'QPROFILE', 'ACTIVATED', NULL, '73adab7f-9310-4f38-8739-a241b17b7d82'),
(644, SYSDATE(), NULL, 'ruleKey=squid:S1226;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1226', 'QPROFILE', 'ACTIVATED', NULL, '6ebab6a2-c82e-4a2e-af12-9997f5c3a10f'),
(645, SYSDATE(), NULL, 'ruleKey=squid:S1313;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1313', 'QPROFILE', 'ACTIVATED', NULL, '5d9aef6c-5901-4323-87f3-7c1ea65bb53b'),
(646, SYSDATE(), NULL, 'param_format=LOG(?:GER)?;ruleKey=squid:S1312;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1312', 'QPROFILE', 'ACTIVATED', NULL, 'f13fec24-eaa7-4905-9a62-0c1a72d586e8'),
(647, SYSDATE(), NULL, 'ruleKey=squid:S1318;profileKey=java-sonar-way-67562;severity=CRITICAL;key=java-sonar-way-67562:squid:S1318', 'QPROFILE', 'ACTIVATED', NULL, 'e335642d-94d0-4159-9e8d-4978b243b264'),
(648, SYSDATE(), NULL, 'ruleKey=squid:S1223;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1223', 'QPROFILE', 'ACTIVATED', NULL, '28985f61-933a-4c81-a789-898dc2be0b53'),
(649, SYSDATE(), NULL, 'ruleKey=squid:S1319;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1319', 'QPROFILE', 'ACTIVATED', NULL, '00650502-0a7c-4f8d-8342-ff17f20b5a20'),
(650, SYSDATE(), NULL, 'ruleKey=squid:S1213;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:S1213', 'QPROFILE', 'ACTIVATED', NULL, '5c3e9e36-9a2a-4209-a269-78ed152f7905'),
(651, SYSDATE(), NULL, 'ruleKey=squid:S1444;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1444', 'QPROFILE', 'ACTIVATED', NULL, '03d70e97-c602-4242-a3ed-2a1f90df25b0'),
(652, SYSDATE(), NULL, 'ruleKey=squid:S1452;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1452', 'QPROFILE', 'ACTIVATED', NULL, '34358549-8fb0-47bf-83d7-1920595cbf43'),
(653, SYSDATE(), NULL, 'ruleKey=squid:S1481;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1481', 'QPROFILE', 'ACTIVATED', NULL, '4673198b-b85f-4f66-8d63-228b7586b46b'),
(654, SYSDATE(), NULL, 'ruleKey=squid:S1068;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1068', 'QPROFILE', 'ACTIVATED', NULL, 'cb139a20-bcc6-4faa-9c35-506ce79226ea'),
(655, SYSDATE(), NULL, 'ruleKey=squid:S1317;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1317', 'QPROFILE', 'ACTIVATED', NULL, 'a77a525d-7b55-4aa1-807c-9f4e04fb8536'),
(656, SYSDATE(), NULL, 'ruleKey=squid:S1596;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1596', 'QPROFILE', 'ACTIVATED', NULL, '339e7efd-d9cf-4405-b8ca-cfcc6a7bd83f'),
(657, SYSDATE(), NULL, 'ruleKey=squid:UnusedPrivateMethod;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:UnusedPrivateMethod', 'QPROFILE', 'ACTIVATED', NULL, '4e267fc4-1e75-4fba-baee-ad11bcb02bc1'),
(658, SYSDATE(), NULL, 'ruleKey=squid:RedundantThrowsDeclarationCheck;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:RedundantThrowsDeclarationCheck', 'QPROFILE', 'ACTIVATED', NULL, '18454d9d-b04c-429c-b3ea-f1cc11cec283'),
(659, SYSDATE(), NULL, 'ruleKey=squid:S1160;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1160', 'QPROFILE', 'ACTIVATED', NULL, 'f80139c4-7e28-47c4-8a31-152d7ef2fdf1'),
(660, SYSDATE(), NULL, 'ruleKey=squid:S1217;profileKey=java-sonar-way-67562;severity=CRITICAL;key=java-sonar-way-67562:squid:S1217', 'QPROFILE', 'ACTIVATED', NULL, '8f48ff7c-185c-4021-96ba-fe265d5a4e82'),
(661, SYSDATE(), NULL, 'ruleKey=squid:S1862;profileKey=java-sonar-way-67562;severity=CRITICAL;key=java-sonar-way-67562:squid:S1862', 'QPROFILE', 'ACTIVATED', NULL, 'bcae1408-3233-4dd5-bb04-6bcecc3fdd2f'),
(662, SYSDATE(), NULL, 'ruleKey=squid:S1488;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:S1488', 'QPROFILE', 'ACTIVATED', NULL, '784cf337-fc52-4cf1-a1cf-9b492d39c426'),
(663, SYSDATE(), NULL, 'ruleKey=squid:S1602;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1602', 'QPROFILE', 'ACTIVATED', NULL, 'af91944d-abeb-489c-b3bb-a1bf8267bab8'),
(664, SYSDATE(), NULL, 'ruleKey=squid:S1611;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:S1611', 'QPROFILE', 'ACTIVATED', NULL, 'ee84cbae-20d9-4f0c-a67b-ecbc576fdb5b'),
(665, SYSDATE(), NULL, 'ruleKey=squid:S1700;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1700', 'QPROFILE', 'ACTIVATED', NULL, 'afb62dd2-b417-4a60-8346-bc8949d3c702'),
(666, SYSDATE(), NULL, 'ruleKey=squid:S1172;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1172', 'QPROFILE', 'ACTIVATED', NULL, 'd4e1ba62-9ec7-4fe4-9c40-f54b6a690cef'),
(667, SYSDATE(), NULL, 'ruleKey=squid:S109;profileKey=java-sonar-way-67562;severity=MINOR;key=java-sonar-way-67562:squid:S109', 'QPROFILE', 'ACTIVATED', NULL, '4b14c955-71ad-4d6d-bd0a-14455f8cdbe4'),
(668, SYSDATE(), NULL, 'ruleKey=squid:S1294;profileKey=java-sonar-way-67562;severity=CRITICAL;key=java-sonar-way-67562:squid:S1294', 'QPROFILE', 'ACTIVATED', NULL, 'eaab02fe-49ea-432a-a087-15eca7944a48'),
(669, SYSDATE(), NULL, 'ruleKey=squid:S1598;profileKey=java-sonar-way-67562;severity=MAJOR;key=java-sonar-way-67562:squid:S1598', 'QPROFILE', 'ACTIVATED', NULL, 'eae5879a-3aa1-4c85-8b7b-9b3803f97c4d');

INSERT INTO `characteristics` (`id`, `kee`, `name`, `rule_id`, `characteristic_order`, `enabled`, `parent_id`, `root_id`, `function_key`, `factor_value`, `factor_unit`, `offset_value`, `offset_unit`, `created_at`, `updated_at`) VALUES
(1, 'REUSABILITY', 'Reusability', NULL, 1, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(2, 'MODULARITY', 'Modularity', NULL, NULL, 1, 1, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(3, 'REUSABILITY_COMPLIANCE', 'Reusability Compliance', NULL, NULL, 1, 1, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(4, 'TRANSPORTABILITY', 'Transportability', NULL, NULL, 1, 1, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(5, 'PORTABILITY', 'Portability', NULL, 2, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(6, 'COMPILER_RELATED_PORTABILITY', 'Compiler', NULL, NULL, 1, 5, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(7, 'HARDWARE_RELATED_PORTABILITY', 'Hardware', NULL, NULL, 1, 5, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(8, 'LANGUAGE_RELATED_PORTABILITY', 'Language', NULL, NULL, 1, 5, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(9, 'OS_RELATED_PORTABILITY', 'OS', NULL, NULL, 1, 5, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(10, 'PORTABILITY_COMPLIANCE', 'Portability Compliance', NULL, NULL, 1, 5, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(11, 'SOFTWARE_RELATED_PORTABILITY', 'Software', NULL, NULL, 1, 5, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(12, 'TIME_ZONE_RELATED_PORTABILITY', 'Time zone', NULL, NULL, 1, 5, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(13, 'MAINTAINABILITY', 'Maintainability', NULL, 3, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(14, 'MAINTAINABILITY_COMPLIANCE', 'Maintainability Compliance', NULL, NULL, 1, 13, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(15, 'READABILITY', 'Readability', NULL, NULL, 1, 13, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(16, 'UNDERSTANDABILITY', 'Understandability', NULL, NULL, 1, 13, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(17, 'SECURITY', 'Security', NULL, 4, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(18, 'API_ABUSE', 'API abuse', NULL, NULL, 1, 17, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(19, 'ERRORS', 'Errors', NULL, NULL, 1, 17, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(20, 'INPUT_VALIDATION_AND_REPRESENTATION', 'Input validation and representation', NULL, NULL, 1, 17, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(21, 'SECURITY_COMPLIANCE', 'Security Compliance', NULL, NULL, 1, 17, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(22, 'SECURITY_FEATURES', 'Security features', NULL, NULL, 1, 17, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(23, 'USABILITY', 'Usability', NULL, 5, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(24, 'USABILITY_ACCESSIBILITY', 'Accessibility', NULL, NULL, 1, 23, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(25, 'USABILITY_EASE_OF_USE', 'Ease of Use', NULL, NULL, 1, 23, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(26, 'USABILITY_COMPLIANCE', 'Usability Compliance', NULL, NULL, 1, 23, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(27, 'EFFICIENCY', 'Efficiency', NULL, 6, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(28, 'EFFICIENCY_COMPLIANCE', 'Efficiency Compliance', NULL, NULL, 1, 27, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(29, 'MEMORY_EFFICIENCY', 'Memory use', NULL, NULL, 1, 27, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(30, 'NETWORK_USE', 'Network use', NULL, NULL, 1, 27, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(31, 'CPU_EFFICIENCY', 'Processor use', NULL, NULL, 1, 27, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(32, 'CHANGEABILITY', 'Changeability', NULL, 7, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(33, 'ARCHITECTURE_CHANGEABILITY', 'Architecture', NULL, NULL, 1, 32, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(34, 'CHANGEABILITY_COMPLIANCE', 'Changeability Compliance', NULL, NULL, 1, 32, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(35, 'DATA_CHANGEABILITY', 'Data', NULL, NULL, 1, 32, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(36, 'LOGIC_CHANGEABILITY', 'Logic', NULL, NULL, 1, 32, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(37, 'RELIABILITY', 'Reliability', NULL, 8, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(38, 'ARCHITECTURE_RELIABILITY', 'Architecture', NULL, NULL, 1, 37, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(39, 'DATA_RELIABILITY', 'Data', NULL, NULL, 1, 37, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(40, 'EXCEPTION_HANDLING', 'Exception handling', NULL, NULL, 1, 37, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(41, 'FAULT_TOLERANCE', 'Fault tolerance', NULL, NULL, 1, 37, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(42, 'INSTRUCTION_RELIABILITY', 'Instruction', NULL, NULL, 1, 37, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(43, 'LOGIC_RELIABILITY', 'Logic', NULL, NULL, 1, 37, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(44, 'RELIABILITY_COMPLIANCE', 'Reliability Compliance', NULL, NULL, 1, 37, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(45, 'RESOURCE_RELIABILITY', 'Resource', NULL, NULL, 1, 37, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(46, 'SYNCHRONIZATION_RELIABILITY', 'Synchronization', NULL, NULL, 1, 37, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(47, 'UNIT_TESTS', 'Unit tests coverage', NULL, NULL, 1, 37, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(48, 'TESTABILITY', 'Testability', NULL, 9, 1, NULL, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(49, 'INTEGRATION_TESTABILITY', 'Integration level', NULL, NULL, 1, 48, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(50, 'TESTABILITY_COMPLIANCE', 'Testability Compliance', NULL, NULL, 1, 48, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL),
(51, 'UNIT_TESTABILITY', 'Unit level', NULL, NULL, 1, 48, NULL, NULL, NULL, NULL, NULL, NULL, SYSDATE(), NULL);

INSERT INTO `dashboards` (`id`, `user_id`, `name`, `description`, `column_layout`, `shared`, `created_at`, `updated_at`, `is_global`) VALUES
(1, NULL, 'Dashboard', NULL, '50%-50%', 1, SYSDATE(), SYSDATE(), 0),
(2, NULL, 'Issues', NULL, '50%-50%', 1, SYSDATE(), SYSDATE(), 0),
(3, NULL, 'TimeMachine', NULL, '50%-50%', 1, SYSDATE(), SYSDATE(), 0),
(4, NULL, 'Home', NULL, '50%-50%', 1, SYSDATE(), SYSDATE(), 1);

INSERT INTO `groups` (`id`, `name`, `description`, `created_at`, `updated_at`) VALUES
(1, 'sonar-administrators', 'System administrators', SYSDATE(), SYSDATE()),
(2, 'sonar-users', 'Any new users created will automatically join this group', SYSDATE(), SYSDATE());

INSERT INTO `groups_users` (`user_id`, `group_id`) VALUES
(1, 1),
(1, 2);

INSERT INTO `group_roles` (`id`, `group_id`, `resource_id`, `role`) VALUES
(5, NULL, NULL, 'dryRunScan'),
(4, NULL, NULL, 'scan'),
(1, 1, NULL, 'admin'),
(2, 1, NULL, 'profileadmin'),
(6, 1, NULL, 'provisioning'),
(3, 1, NULL, 'shareDashboard');

INSERT INTO `loaded_templates` (`id`, `kee`, `template_type`) VALUES
(1, 'SonarQube way', 'QUALITY_GATE'),
(2, 'php:Sonar way', 'QUALITY_PROFILE'),
(3, 'php:PSR-2', 'QUALITY_PROFILE'),
(4, 'js:Sonar way', 'QUALITY_PROFILE'),
(5, 'xml:Sonar way', 'QUALITY_PROFILE'),
(6, 'web:Sonar way', 'QUALITY_PROFILE'),
(7, 'java:FindBugs', 'QUALITY_PROFILE'),
(8, 'java:Sonar way', 'QUALITY_PROFILE'),
(9, 'Projects', 'FILTER'),
(10, 'My favourites', 'FILTER'),
(11, 'Dashboard', 'DASHBOARD'),
(12, 'Issues', 'DASHBOARD'),
(13, 'TimeMachine', 'DASHBOARD'),
(14, 'Home', 'DASHBOARD'),
(15, 'default_template', 'PERM_TEMPLATE'),
(16, 'CopyRequirementsFromCharacteristicsToRules', 'ONE_SHOT_TASK');

INSERT INTO `measure_filters` (`id`, `name`, `user_id`, `shared`, `description`, `data`, `created_at`, `updated_at`) VALUES
(1, 'Projects', NULL, 1, NULL, 'display=list|qualifiers=TRK|cols=metric:alert_status,name,version,metric:ncloc,metric:sqale_index,date', SYSDATE(), SYSDATE()),
(2, 'My favourites', NULL, 1, NULL, 'display=list|onFavourites=true|cols=metric:alert_status,name,date', SYSDATE(), SYSDATE());

INSERT INTO `metrics` (`id`, `name`, `description`, `direction`, `domain`, `short_name`, `qualitative`, `val_type`, `user_managed`, `enabled`, `origin`, `worst_value`, `best_value`, `optimized_best_value`, `hidden`, `delete_historical_data`) VALUES
(1, 'lines', 'Lines', -1, 'Size', 'Lines', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(2, 'generated_lines', 'Number of generated lines', -1, 'Size', 'Generated Lines', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(3, 'ncloc', 'Non Commenting Lines of Code', -1, 'Size', 'Lines of code', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(4, 'ncloc_language_distribution', 'Non Commenting Lines of Code Distributed By Language', -1, 'Size', 'Lines of code per language', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(5, 'generated_ncloc', 'Generated non Commenting Lines of Code', -1, 'Size', 'Generated lines of code', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(6, 'classes', 'Classes', -1, 'Size', 'Classes', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(7, 'files', 'Number of files', -1, 'Size', 'Files', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(8, 'directories', 'Directories', -1, 'Size', 'Directories', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(9, 'packages', 'Packages', -1, 'Size', 'Packages', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(10, 'functions', 'Functions', -1, 'Size', 'Functions', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(11, 'accessors', 'Accessors', -1, 'Size', 'Accessors', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(12, 'statements', 'Number of statements', -1, 'Size', 'Statements', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(13, 'public_api', 'Public API', -1, 'Size', 'Public API', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(14, 'projects', 'Number of projects', -1, 'Size', 'Projects', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(15, 'comment_lines', 'Number of comment lines', 1, 'Documentation', 'Comment lines', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(16, 'comment_lines_density', 'Comments balanced by ncloc + comment lines', 1, 'Documentation', 'Comments (%)', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 0),
(17, 'comment_blank_lines', 'Comments that do not contain comments', -1, 'Documentation', 'Blank comments', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 1, 0),
(18, 'public_documented_api_density', 'Public documented classes and functions balanced by ncloc', 1, 'Documentation', 'Public documented API (%)', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 1, 0, 0),
(19, 'public_undocumented_api', 'Public undocumented classes, functions and variables', -1, 'Documentation', 'Public undocumented API', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(20, 'commented_out_code_lines', 'Commented lines of code', -1, 'Documentation', 'Commented-out LOC', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 1, 0),
(21, 'complexity', 'Cyclomatic complexity', -1, 'Complexity', 'Complexity', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(22, 'file_complexity', 'Complexity average by file', -1, 'Complexity', 'Complexity /file', 1, 'FLOAT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(23, 'complexity_in_classes', 'Cyclomatic complexity in classes', -1, 'Complexity', 'Complexity in classes', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 1),
(24, 'class_complexity', 'Complexity average by class', -1, 'Complexity', 'Complexity /class', 1, 'FLOAT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(25, 'complexity_in_functions', 'Cyclomatic complexity in functions', -1, 'Complexity', 'Complexity in functions', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 1),
(26, 'function_complexity', 'Complexity average by function', -1, 'Complexity', 'Complexity /function', 1, 'FLOAT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(27, 'class_complexity_distribution', 'Classes distribution /complexity', 0, 'Complexity', 'Classes distribution /complexity', 1, 'DISTRIB', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(28, 'function_complexity_distribution', 'Functions distribution /complexity', 0, 'Complexity', 'Functions distribution /complexity', 1, 'DISTRIB', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(29, 'file_complexity_distribution', 'Files distribution /complexity', 0, 'Complexity', 'Files distribution /complexity', 1, 'DISTRIB', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(30, 'tests', 'Number of unit tests', -1, 'Tests', 'Unit tests', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(31, 'test_execution_time', 'Execution duration of unit tests', -1, 'Tests', 'Unit tests duration', 0, 'MILLISEC', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(32, 'test_errors', 'Number of unit test errors', -1, 'Tests', 'Unit test errors', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(33, 'skipped_tests', 'Number of skipped unit tests', -1, 'Tests', 'Skipped unit tests', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(34, 'test_failures', 'Number of unit test failures', -1, 'Tests', 'Unit test failures', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(35, 'test_success_density', 'Density of successful unit tests', 1, 'Tests', 'Unit test success (%)', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 1, 0, 0),
(36, 'test_data', 'Unit tests details', -1, 'Tests', 'Unit tests details', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(37, 'coverage', 'Coverage by unit tests', 1, 'Tests', 'Coverage', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 0),
(38, 'new_coverage', 'Coverage of new/changed code', 1, 'Tests', 'Coverage on new code', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 1),
(39, 'lines_to_cover', 'Lines to cover', 1, 'Tests', 'Lines to cover', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(40, 'new_lines_to_cover', 'Lines to cover on new code', -1, 'Tests', 'Lines to cover on new code', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 1),
(41, 'uncovered_lines', 'Uncovered lines', -1, 'Tests', 'Uncovered lines', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 0, 0, 0),
(42, 'new_uncovered_lines', 'Uncovered lines on new code', -1, 'Tests', 'Uncovered lines on new code', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 0, 0, 1),
(43, 'line_coverage', 'Line coverage', 1, 'Tests', 'Line coverage', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 0),
(44, 'new_line_coverage', 'Line coverage of added/changed code', 1, 'Tests', 'Line coverage on new code', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 1),
(45, 'coverage_line_hits_data', NULL, 0, 'Tests', 'Coverage hits by line', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 1),
(46, 'conditions_to_cover', 'Branches to cover', 0, 'Tests', 'Branches to cover', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(47, 'new_conditions_to_cover', 'Branches to cover on new code', 0, 'Tests', 'Branches to cover on new code', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 1),
(48, 'uncovered_conditions', 'Uncovered branches', -1, 'Tests', 'Uncovered branches', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 0, 0, 0),
(49, 'new_uncovered_conditions', 'Uncovered branches on new code', -1, 'Tests', 'Uncovered branches on new code', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 0, 0, 1),
(50, 'branch_coverage', 'Condition coverage', 1, 'Tests', 'Condition coverage', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 0),
(51, 'new_branch_coverage', 'Condition coverage of new/changed code', 1, 'Tests', 'Condition coverage on new code', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 1),
(52, 'conditions_by_line', NULL, 0, 'Tests', 'Conditions by line', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 1),
(53, 'covered_conditions_by_line', NULL, 0, 'Tests', 'Covered conditions by line', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 1),
(54, 'it_coverage', 'Coverage by integration tests', 1, 'Tests (Integration)', 'IT coverage', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 0),
(55, 'new_it_coverage', 'Integration Tests Coverage of new/changed code', 1, 'Tests (Integration)', 'Coverage by IT on new code', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 1),
(56, 'it_lines_to_cover', 'Lines to cover by Integration Tests', 1, 'Tests (Integration)', 'IT lines to cover', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(57, 'new_it_lines_to_cover', 'Lines to cover by Integration Tests on new code', -1, 'Tests (Integration)', 'Lines to cover by IT on new code', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 1),
(58, 'it_uncovered_lines', 'IT uncovered lines', -1, 'Tests (Integration)', 'IT uncovered lines', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(59, 'new_it_uncovered_lines', 'Uncovered lines by IT on new code', -1, 'Tests (Integration)', 'Uncovered lines by IT on new code', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 0, 0, 1),
(60, 'it_line_coverage', 'IT line coverage', 1, 'Tests (Integration)', 'IT line coverage', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 0),
(61, 'new_it_line_coverage', 'Line Coverage by Integration Tests of added/changed code', 1, 'Tests (Integration)', 'Line coverage by IT on new code', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 1),
(62, 'it_coverage_line_hits_data', 'Integration Tests Code coverage line hits data', 0, 'Tests (Integration)', 'IT coverage hits data', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 1),
(63, 'it_conditions_to_cover', 'Integration Tests conditions to cover', 1, 'Tests (Integration)', 'IT branches to cover', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(64, 'new_it_conditions_to_cover', 'Branches to cover by Integration Tests on new code', 0, 'Tests (Integration)', 'Branches to cover by IT on new code', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 1),
(65, 'it_uncovered_conditions', 'Integration Tests uncovered conditions', -1, 'Tests (Integration)', 'IT uncovered branches', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(66, 'new_it_uncovered_conditions', 'Uncovered branches by Integration Tests on new code', -1, 'Tests (Integration)', 'Uncovered branches by IT on new code', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 0, 0, 1),
(67, 'it_branch_coverage', 'IT condition coverage', 1, 'Tests (Integration)', 'IT condition coverage', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 0),
(68, 'new_it_branch_coverage', 'Condition coverage by Integration Tests of new/changed code', 1, 'Tests (Integration)', 'Condition coverage by IT on new code', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 1),
(69, 'it_conditions_by_line', NULL, 0, 'Tests (Integration)', 'IT conditions by line', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 1),
(70, 'it_covered_conditions_by_line', NULL, 0, 'Tests (Integration)', 'IT covered conditions by line', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 1),
(71, 'overall_coverage', 'Overall test coverage', 1, 'Tests (Overall)', 'Overall coverage', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 0),
(72, 'new_overall_coverage', 'Overall coverage of new/changed code', 1, 'Tests (Overall)', 'Overall coverage on new code', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 1),
(73, 'overall_lines_to_cover', 'Overall lines to cover by all tests', 1, 'Tests (Overall)', 'Overall lines to cover', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(74, 'new_overall_lines_to_cover', 'New lines to cover by all tests', -1, 'Tests (Overall)', 'Overall lines to cover on new code', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 1),
(75, 'overall_uncovered_lines', 'Uncovered lines by all tests', -1, 'Tests (Overall)', 'Overall uncovered lines', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(76, 'new_overall_uncovered_lines', 'New lines that are not covered by any tests', -1, 'Tests (Overall)', 'Overall uncovered lines on new code', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 0, 0, 1),
(77, 'overall_line_coverage', 'Line coverage by all tests', 1, 'Tests (Overall)', 'Overall line coverage', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 0),
(78, 'new_overall_line_coverage', 'Line coverage of added/changed code by all tests', 1, 'Tests (Overall)', 'Overall line coverage on new code', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 1),
(79, 'overall_coverage_line_hits_data', 'Coverage hits by all tests and by line', 0, 'Tests (Overall)', 'Overall coverage hits by line', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 1),
(80, 'overall_conditions_to_cover', 'Branches to cover by all tests', 1, 'Tests (Overall)', 'Overall branches to cover', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(81, 'new_overall_conditions_to_cover', 'New branches to cover by all tests', 0, 'Tests (Overall)', 'Overall branches to cover on new code', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 1),
(82, 'overall_uncovered_conditions', 'Uncovered branches by all tests', -1, 'Tests (Overall)', 'Overall uncovered branches', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(83, 'new_overall_uncovered_conditions', 'New branches that are not covered by any test', -1, 'Tests (Overall)', 'Overall uncovered branches on new code', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 0, 0, 1),
(84, 'overall_branch_coverage', 'Condition coverage by all tests', 1, 'Tests (Overall)', 'Overall condition coverage', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 0),
(85, 'new_overall_branch_coverage', 'Condition coverage of new/changed code by all tests', 1, 'Tests (Overall)', 'Overall condition coverage on new code', 1, 'PERCENT', 0, 1, 'JAV', '0.00000000000000000000', '100.00000000000000000000', 0, 0, 1),
(86, 'overall_conditions_by_line', 'Overall conditions by all tests and by line', 0, 'Tests (Overall)', 'Overall conditions by line', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 1),
(87, 'overall_covered_conditions_by_line', 'Overall covered branches by all tests and by line', 0, 'Tests (Overall)', 'Overall covered branches by line', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 1),
(88, 'duplicated_lines', 'Duplicated lines', -1, 'Duplication', 'Duplicated lines', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(89, 'duplicated_blocks', 'Duplicated blocks', -1, 'Duplication', 'Duplicated blocks', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(90, 'duplicated_files', 'Duplicated files', -1, 'Duplication', 'Duplicated files', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(91, 'duplicated_lines_density', 'Duplicated lines balanced by statements', -1, 'Duplication', 'Duplicated lines (%)', 1, 'PERCENT', 0, 1, 'JAV', '100.00000000000000000000', '0.00000000000000000000', 1, 0, 0),
(92, 'duplications_data', 'Duplications details', 0, 'Duplication', 'Duplications details', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 1),
(93, 'duplication_lines_data', NULL, 0, 'Duplication', 'duplication_lines_data', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(94, 'violations', 'Issues', -1, 'Issues', 'Issues', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(95, 'blocker_violations', 'Blocker issues', -1, 'Issues', 'Blocker issues', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(96, 'critical_violations', 'Critical issues', -1, 'Issues', 'Critical issues', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(97, 'major_violations', 'Major issues', -1, 'Issues', 'Major issues', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(98, 'minor_violations', 'Minor issues', -1, 'Issues', 'Minor issues', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(99, 'info_violations', 'Info issues', -1, 'Issues', 'Info issues', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(100, 'new_violations', 'New Issues', -1, 'Issues', 'New issues', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 1),
(101, 'new_blocker_violations', 'New Blocker issues', -1, 'Issues', 'New Blocker issues', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 1),
(102, 'new_critical_violations', 'New Critical issues', -1, 'Issues', 'New Critical issues', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 1),
(103, 'new_major_violations', 'New Major issues', -1, 'Issues', 'New Major issues', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 1),
(104, 'new_minor_violations', 'New Minor issues', -1, 'Issues', 'New Minor issues', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 1),
(105, 'new_info_violations', 'New Info issues', -1, 'Issues', 'New Info issues', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 1),
(106, 'false_positive_issues', 'False positive issues', -1, 'Issues', 'False positive issues', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(107, 'open_issues', 'Open issues', -1, 'Issues', 'Open issues', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(108, 'reopened_issues', 'Reopened issues', -1, 'Issues', 'Reopened issues', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(109, 'confirmed_issues', 'Confirmed issues', -1, 'Issues', 'Confirmed issues', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(110, 'abstractness', 'Abstractness', 0, 'Design', 'Abstractness', 0, 'PERCENT', 0, 1, 'JAV', '100.00000000000000000000', '0.00000000000000000000', 0, 1, 0),
(111, 'instability', 'Instability', 0, 'Design', 'Instability', 0, 'PERCENT', 0, 1, 'JAV', '100.00000000000000000000', '0.00000000000000000000', 0, 1, 0),
(112, 'distance', 'Distance', 0, 'Design', 'Distance', 0, 'FLOAT', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(113, 'dit', 'Depth in Inheritance Tree', 0, 'Design', 'Depth in Tree', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(114, 'noc', 'Number of Children', 0, 'Design', 'Number of Children', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(115, 'rfc', 'Response for Class', -1, 'Design', 'RFC', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(116, 'rfc_distribution', 'Class distribution /RFC', 0, 'Design', 'Class distribution /RFC', 1, 'DISTRIB', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(117, 'lcom4', 'Lack of Cohesion of Functions', -1, 'Design', 'LCOM4', 1, 'FLOAT', 0, 1, 'JAV', NULL, '1.00000000000000000000', 0, 1, 0),
(118, 'lcom4_blocks', 'LCOM4 blocks', 0, 'Design', 'LCOM4 blocks', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 1, 1),
(119, 'lcom4_distribution', 'Class distribution /LCOM4', 0, 'Design', 'Class distribution /LCOM4', 1, 'DISTRIB', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(120, 'suspect_lcom4_density', 'Density of classes having LCOM4>1', -1, 'Design', 'Suspect LCOM4 density', 1, 'PERCENT', 0, 1, 'JAV', '100.00000000000000000000', '0.00000000000000000000', 0, 1, 0),
(121, 'ca', 'Afferent couplings', -1, 'Design', 'Afferent couplings', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(122, 'ce', 'Efferent couplings', -1, 'Design', 'Efferent couplings', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(123, 'dsm', 'Dependency Matrix', 0, 'Design', 'Dependency Matrix', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 1),
(124, 'package_cycles', 'Package cycles', -1, 'Design', 'Package cycles', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 0, 0, 0),
(125, 'package_tangle_index', 'Package tangle index', -1, 'Design', 'Package tangle index', 1, 'PERCENT', 0, 1, 'JAV', '100.00000000000000000000', '0.00000000000000000000', 0, 0, 0),
(126, 'package_tangles', 'File dependencies to cut', -1, 'Design', 'File dependencies to cut', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(127, 'package_feedback_edges', 'Package dependencies to cut', -1, 'Design', 'Package dependencies to cut', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 0, 0, 0),
(128, 'package_edges_weight', 'Package edges weight', 1, 'Design', 'Package edges weight', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 1),
(129, 'file_cycles', 'File cycles', -1, 'Design', 'File cycles', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 0, 1, 1),
(130, 'file_tangle_index', 'File tangle index', -1, 'Design', 'File tangle index', 1, 'PERCENT', 0, 1, 'JAV', '100.00000000000000000000', '0.00000000000000000000', 0, 1, 1),
(131, 'file_tangles', 'Files tangles', -1, 'Design', 'File tangles', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 1),
(132, 'file_feedback_edges', 'Suspect file dependencies', -1, 'Design', 'Suspect file dependencies', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 0, 1, 1),
(133, 'file_edges_weight', 'File edges weight', 1, 'Design', 'File edges weight', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 1),
(134, 'authors_by_line', NULL, 0, 'SCM', 'Authors by line', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(135, 'revisions_by_line', NULL, 0, 'SCM', 'Revisions by line', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(136, 'last_commit_datetimes_by_line', NULL, 0, 'SCM', 'Last commit dates by line', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(137, 'unreviewed_violations', 'Violations that have not been reviewed yet', -1, 'Reviews', 'Unreviewed violations', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 1, 0),
(138, 'new_unreviewed_violations', 'New violations that have not been reviewed yet', -1, 'Reviews', 'New unreviewed violations', 1, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 1, 1),
(139, 'false_positive_reviews', 'Active false-positive reviews', -1, 'Reviews', 'False-positive reviews', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 1, 0),
(140, 'active_reviews', 'Active open and reopened reviews', -1, 'Reviews', 'Active reviews', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 1, 0),
(141, 'unassigned_reviews', 'Active unassigned reviews', -1, 'Reviews', 'Unassigned reviews', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 1, 0),
(142, 'unplanned_reviews', 'Active unplanned reviews', -1, 'Reviews', 'Unplanned reviews', 0, 'INT', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 1, 0),
(143, 'sqale_index', NULL, -1, 'Technical Debt', 'Technical Debt', 1, 'WORK_DUR', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 0),
(144, 'new_technical_debt', 'Technical Debt of new code', -1, 'Technical Debt', 'Technical Debt on new code', 1, 'WORK_DUR', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 0, 1),
(145, 'sqale_rating', NULL, -1, 'Technical Debt', 'SQALE Rating', 1, 'RATING', 0, 1, 'JAV', '5.00000000000000000000', '1.00000000000000000000', 0, 0, 0),
(146, 'development_cost', NULL, -1, 'Technical Debt', 'SQALE Development Cost', 1, 'STRING', 0, 1, 'JAV', NULL, '0.00000000000000000000', 1, 1, 0),
(147, 'sqale_debt_ratio', 'Ratio of the technical debt compared to what it would cost to develop the whole source code from scratch.', -1, 'Technical Debt', 'SQALE Technical Debt Ratio', 1, 'PERCENT', 0, 1, 'JAV', '100.00000000000000000000', '0.00000000000000000000', 1, 0, 0),
(148, 'ncloc_data', NULL, 0, 'Size', 'ncloc_data', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(149, 'comment_lines_data', NULL, 0, 'Documentation', 'comment_lines_data', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(150, 'alert_status', 'The project status with regard to its quality gate.', 1, 'General', 'Quality Gate Status', 1, 'LEVEL', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(151, 'quality_gate_details', 'The project detailed status with regard to its quality gate.', 0, 'General', 'Quality Gate Details', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(152, 'profile', 'Selected quality profile', 0, 'General', 'Profile', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(153, 'profile_version', 'Selected quality profile version', 0, 'General', 'Profile version', 0, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(154, 'quality_profiles', 'Details of quality profiles used during analysis', 0, 'General', 'Profiles', 0, 'DATA', 0, 1, 'JAV', NULL, NULL, 0, 1, 0),
(155, 'burned_budget', NULL, 0, 'Management', 'Burned budget', 0, 'FLOAT', 1, 1, 'JAV', NULL, NULL, 0, 0, 0),
(156, 'business_value', NULL, 1, 'Management', 'Business value', 1, 'FLOAT', 1, 1, 'JAV', NULL, NULL, 0, 0, 0),
(157, 'team_size', NULL, 0, 'Management', 'Team size', 0, 'INT', 1, 1, 'JAV', NULL, NULL, 0, 0, 0),
(158, 'redmine-issues', 'Number of Redmine Issues', 0, 'Issues', 'Redmine Issues', 1, 'INT', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(159, 'redmine-issues-by-developer', 'Number of Redmine issues by developer', 0, 'Issues', 'Redmine Issues by developer', 1, 'DISTRIB', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(160, 'redmine-issues-by-priority', 'Number of Redmine issues by priority', 0, 'Issues', 'Redmine Issues by priority', 1, 'DISTRIB', 0, 1, 'JAV', NULL, NULL, 0, 0, 0),
(161, 'redmine-issues-by-status', 'Number of Redmine issues by status', 0, 'Issues', 'Redmine Issues by status', 1, 'DISTRIB', 0, 1, 'JAV', NULL, NULL, 0, 0, 0);

INSERT INTO `permission_templates` (`id`, `name`, `kee`, `description`, `created_at`, `updated_at`, `key_pattern`) VALUES
(1, 'Default template', 'default_template', 'This permission template will be used as default when no other permission configuration is available', SYSDATE(), SYSDATE(), NULL);

INSERT INTO `perm_templates_groups` (`id`, `group_id`, `template_id`, `permission_reference`, `created_at`, `updated_at`) VALUES
(1, 1, 1, 'admin', SYSDATE(), SYSDATE()),
(2, 1, 1, 'issueadmin', SYSDATE(), SYSDATE()),
(3, NULL, 1, 'user', SYSDATE(), SYSDATE()),
(4, NULL, 1, 'codeviewer', SYSDATE(), SYSDATE());

INSERT INTO `properties` (`id`, `prop_key`, `resource_id`, `text_value`, `user_id`) VALUES
(10, 'sonar.core.id', NULL, DATE_FORMAT(SYSDATE(), '%Y%m%d%H%i%s'), NULL),
(11, 'sonar.core.version', NULL, '@{package.version}', NULL),
(12, 'sonar.core.startTime', NULL, DATE_FORMAT(SYSDATE(), '%Y-%m-%dT%H:%i:%s+0000'), NULL),
(14, 'sonar.profile.php', NULL, 'Sonar way', NULL),
(15, 'sonar.profile.js', NULL, 'Sonar way', NULL),
(16, 'sonar.profile.xml', NULL, 'Sonar way', NULL),
(17, 'sonar.profile.web', NULL, 'Sonar way', NULL),
(18, 'sonar.profile.java', NULL, 'Sonar way', NULL),
(19, 'sonar.permission.template.default', NULL, 'default_template', NULL);

INSERT INTO `quality_gates` (`id`, `name`, `created_at`, `updated_at`) VALUES
(1, 'SonarQube way', SYSDATE(), NULL);

INSERT INTO `quality_gate_conditions` (`id`, `qgate_id`, `metric_id`, `period`, `operator`, `value_error`, `value_warning`, `created_at`, `updated_at`) VALUES
(1, 1, 95, NULL, 'GT', '0', NULL, SYSDATE(), NULL),
(2, 1, 96, 3, 'GT', '0', NULL, SYSDATE(), NULL),
(3, 1, 32, NULL, 'GT', '0', NULL, SYSDATE(), NULL),
(4, 1, 34, NULL, 'GT', '0', NULL, SYSDATE(), NULL),
(5, 1, 38, 3, 'LT', '80', NULL, SYSDATE(), NULL),
(6, 1, 107, NULL, 'GT', NULL, '0', SYSDATE(), NULL),
(7, 1, 108, NULL, 'GT', NULL, '0', SYSDATE(), NULL),
(8, 1, 33, NULL, 'GT', NULL, '0', SYSDATE(), NULL);

INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(1, 'S2138', NULL, 'javascript', '<p>\n  <code>undefined</code> is the value you get for variables and properties which have not yet been created. Use the same value to reset an existing variable and you lose the ability to distinguish between a variable that exists but has no value and a variable that does not yet exist. Instead, <code>null</code> should be used, allowing you to tell the difference between a property that has been reset and one that was never created.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myObject = {};\n\n// ...\nmyObject.fname = undefined;  // Noncompliant\n// ...\n\nif (myObject.lname == undefined) {\n  // property not yet created\n}\nif (myObject.fname == undefined) {\n  // no real way of knowing the true state of myObject.fname\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar myObject = {};\n\n// ...\nmyObject.fname = null;\n// ...\n\nif (myObject.lname == undefined) {\n  // property not yet created\n}\nif (myObject.fname == undefined) {\n  // no real way of knowing the true state of myObject.fname\n}\n</pre>', 3, NULL, '"undefined" should not be assigned', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'pitfall', 0, 'HTML'),
(2, 'S2137', NULL, 'javascript', '<p>\n  It is possible to name a variable <code>undefined</code> in a local scope, but it is a very bad idea because <code>undefined</code> is what''s returned for values and properties that have not yet been created. Make <code>undefined</code> a variable and you lose your ability to test whether other variables and properties exist.\n </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo () {\n   var undefined = 1; // Noncompliant\n   if (nonExistantVar == undefined) { // this logic doesn''t work now\n     // ...\n   }\n }\n </pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo () {\n   var bob = 1; // anything is better than naming it ''undefined''\n   if (nonExistantVar == undefined) {\n     // ...\n   }\n }\n </pre>', 3, NULL, 'Local variables should not shadow "undefined"', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'pitfall', 0, 'HTML'),
(3, 'LineLength', NULL, 'javascript', '<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>', 1, NULL, 'Lines should not be too long', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(4, 'S138', NULL, 'javascript', '<p>\n  A function that grows too large tends to aggregate too many responsibilities.</br>\n  Such function inevitably become harder to understand and therefore harder to maintain.\n</p>\n<p>\n  Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\n</p>\n<p>\n  Those smaller functions will not only be easier to understand, but also probably easier to test.\n</p>\n\n<h2>Exceptions</h2>\n<p>\n  This function ignores Immediately Invoked Function Expressions (IIFE), functions which are created and invoked without ever being assigned a name.\n</p>\n<pre>\n (function () { // Ignored by this rule\n\n  function open() {  // Classic function declaration; not ignored\n    // ...\n  }\n\n  function read() {\n    // ...\n  }\n\n  function readlines() {\n    // ...\n  }\n})();\n</pre>', 2, NULL, 'Functions should not have too many lines', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'brain-overload', 0, 'HTML'),
(5, 'RedeclaredFunction', NULL, 'javascript', '<p>\n  This rule checks that functions declared in same scope don''t have identical names. Indeed, it is possible to declare 2 functions with the same name, but only the last definition will be kept by the JavaScript engine before starting execution of the code.\n</p>\n\n<p>\n  This use of duplicate function name is often unwanted and can lead to bugs and more generally to confusing code.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfun(); // prints "bar"\n\n// first declaration of the function\nfunction fun() {\n  print("foo");\n}\n\nfun(); // prints "bar"\n\n// redeclaration of the "fun" function: this definition overrides the previous one\nfunction fun() {\n  print("bar");\n}\n\nfun(); // prints "bar"\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfun(); // prints "foo"\n\nfunction fun() {\n  print("foo");\n}\n\nfun(); // prints "foo"\n</pre>\n\n<p>\n    or\n</p>\n\n<pre>\nfun(); // prints "foo"\n\nfunction fun() {\n  print("foo");\n}\n\nfun(); // prints "foo"\n\nfunction printBar() {\n  print("bar");\n}\n\nfun(); // prints "foo"\n</pre>\n\n<p>\n  This rule is deprecated, use {rule:javascript:S2814} instead.\n</p>', 2, NULL, 'Functions should not be redeclared', 'DEPRECATED', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'bug,pitfall', 0, 'HTML'),
(6, 'S1219', NULL, 'javascript', '<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing error.</p>\n<h2>Noncompliant Code Examples</h2>\n\n<p>Case 1, the code is syntactically correct but the behavior is not the expected one</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // instead of "case WEDNESDAY"\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2, the code is correct and behaves as expected but is hardly readable </p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(i = 0 ; i &lt; X ; i++) {\n         /* ... */\n        break foo;  // this break statement doesn''t relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<p>Case 1</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled "for" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>\n<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\n<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\n</ul>', 3, NULL, '"switch" statements should not contain non-case labels', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'misra,pitfall', 0, 'HTML'),
(7, 'S2688', NULL, 'javascript', '<p>\n  <code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results, but probably not the ones you want.\n</p>\n<p>\n  Instead, the best way to see whether a variable is equal to <code>NaN</code> is (perhaps counter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = NaN;\n\nif (a === NaN) {  // Noncompliant; always false\n  console.log("a is not a number");  // this is dead code\n}\nif (a !== NaN) { // Noncompliant; always true\n  console.log("a is not NaN"); // this statement is not necessarily true\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (a !== a) {\n  console.log("a is not a number");\n}\nif (a === a) {\n  console.log("a is not NaN");\n}\n</pre>', 4, NULL, '"NaN" should not be used in comparisons', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'bug', 0, 'HTML'),
(8, 'S2685', NULL, 'javascript', '<p>Both <code>arguments.caller</code> and <code>arguments.callee</code> make quite a few optimizations impossible so they were deprecated in latest versions of JavaScript. In fact, EcmaScript 5 forbids the use of both in <code>strict</code> mode, according to the docs:</p>\n<blockquote>Arguments objects for strict mode functions define non-configurable accessor properties named "caller" and "callee" which throw a TypeError exception on access.</blockquote>\n<p>The same restriction applies to the function''s <code>caller</code> and <code>arguments</code> properties in <code>strict</code> mode.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction whoCalled() {\n   if (arguments.caller == null)   //Noncompliant\n      console.log(''I was called from the global scope.'');\n   else\n      console.log(arguments.caller + '' called me!'');  // Noncompliant\n\n  console.log(whoCalled.caller);  // Noncompliant\n  console.log(whoCalled.arguments);  // Noncompliant\n}\n</pre>', 3, NULL, '"arguments.caller" and "arguments.callee" should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'obsolete', 0, 'HTML'),
(9, 'OctalNumber', NULL, 'javascript', '<p>\nInteger literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myNumber = 010;   // myNumber will hold 8, not 10 - was this really expected?\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar myNumber = 8;\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 7.1 - Octal constants shall not be used</li>\n<li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than "\\0") shall not be used</li>\n<li> MISRA C:2012, 7.1 - Octal constants shall not be used</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/_QC7AQ">CERT DCL18-C</a> - Do not begin integer constants with 0 when specifying a decimal value</li>\n</ul>', 2, NULL, 'Octal values should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'cert,misra,pitfall', 0, 'HTML'),
(10, 'VariableShadowing', NULL, 'javascript', '<p>\n  Overriding a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of code. Further, it could lead maintainers to introduce bugs because they think they''re using one variable but are really using another.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nshow: function(point, element) {\n  if (!this.drops.length) return;\n  var drop, affected = [];\n  this.drops.each( function(drop) {  // Non-Compliant; defines a new ''drop'' parameter\n    if(Droppables.isAffected(point, element, drop))\n      affected.push(drop);\n  });\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nshow: function(point, element) {\n  if (!this.drops.length) return;\n  var drop, affected = [];\n  this.drops.each( function(aDrop) {\n    if(Droppables.isAffected(point, element, aDrop))\n      affected.push(aDrop);\n  });\n</pre>', 2, NULL, 'Variables should not be shadowed', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'pitfall', 0, 'HTML'),
(11, 'S2898', NULL, 'javascript', '<p>\n  While <code>:&lt;element_type&gt;</code> and <code>[type="&lt;element_type&gt;"]</code> can both be used in jQuery to select elements by their type,\n  <code>[type="&lt;element_type&gt;"]</code> is far faster because it can take advantage of the native DOM <code>querySelectorAll()</code> method in modern browsers.\n</p>\n\n<p>This rule raises an issue when following selectors are used:</p>\n\n<ul>\n  <li><code>:checkbox</code></li>\n  <li><code>:file</code></li>\n  <li><code>:image</code></li>\n  <li><code>:password</code></li>\n  <li><code>:radio</code></li>\n  <li><code>:reset</code></li>\n  <li><code>:text</code></li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n  var input = $( "form input:radio" ); // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n  var input = $( "form input[type=radio]" ); // Compliant\n</pre>', 2, NULL, '"[type=...]" should be used to select elements by type', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'jquery,performance', 0, 'HTML'),
(12, 'S1764', NULL, 'javascript', '<p>\n  Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.\n</p>\n\n<p>\nThis rule ignores <code>*</code>, <code>+</code>, and <code>=</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nvar j = 5 / 5; //always 1\nvar k = 5 - 5; //always 0\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndoZ();\n\nif ( a == b ) {\n  doX();\n}\nif ( a == b ) {\n  doW();\n}\n\nvar j = 1;\nvar k = 0;\n</pre>\n\n<h2>Exceptions</h2>\n<p>The specific case of testing one variable against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nif(f !== f) { // test for NaN value\n  console.log("f is NaN");\n}\n\nvar i = 1 &lt;&lt; 1; // Compliant\nvar j = a &lt;&lt; a; // Noncompliant\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n<li> Rule {rule:javascript:S1656} - Implements a check on <code>=</code>. </li>\n</ul>', 3, NULL, 'Identical expressions should not be used on both sides of a binary operator', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'bug,cert', 0, 'HTML'),
(13, 'S2549', NULL, 'javascript', '<p>According to the Backbone.js docs</p>\n\n<blockquote>\n  The <strong>changed</strong> property is the internal hash containing all the attributes that have changed since the last set. Please do not update <strong>changed</strong> directly since its state is\n  internally maintained by set. A copy of <strong>changed</strong> can be acquired from changedAttributes.\n</blockquote>\n\n<p>\n  The <code>changed</code> property is involved in decisions about whether or not a collection should be resorted when it is updated.\n  If you modify it manually, you can break the resorting of the collection.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nmyModel.changed = { myProperty: 1 }; // Non-compliant\n</pre>', 3, NULL, 'The "changed" property should not be manipulated directly', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'backbone,bug', 0, 'HTML'),
(14, 'CommentRegularExpression', NULL, 'javascript', '<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression "<code>.*TODO.*</code>" to match all comment containing "TODO".</p>\n<p>Note that, in order to match TODO regardless of the case, the "<code>(?i)</code>" modifier can be prepended to the expression, as in "<code>(?i).*TODO.*</code>".</p>', 2, NULL, 'Regular expression on comment', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 'HTML'),
(15, 'S888', NULL, 'javascript', '<p>\n  Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an infinite loop.\n  Using a relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an infinite loop.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (var i = 1; i <= 10; i += 2)  // Compliant\n{\n  //...\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>An equality operator may be used if the loop counter is not modified within the body of the loop and either:</p>\n<ul>\n  <li>starts below the ending value and is incremented by 1 on each iteration.</li>\n  <li>starts above the ending value and is decremented by 1 on each iteration.</li>\n</ul>\n<p>Equality operators are also ignored when the test is against <code>null</code>.</p>\n<pre>\nfor (int i = 0; arr[i] != null; i++) {\n  // ...\n}\n\nfor (int i = 0; (item = arr[i]) != null; i++) {\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li>MISRA C++:2008, 6-5-2</li>\n  <li><a href="http://cwe.mitre.org/data/definitions/835">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition (''Infinite Loop'')</li>\n  <li><a href="https://www.securecoding.cert.org/confluence/x/EwDJAQ">CERT, MSC21-C</a> - Use robust loop termination conditions</li>\n  <li><a href="https://www.securecoding.cert.org/confluence/x/GwDJAQ">CERT, MSC21-CPP</a> - Use inequality to terminate a loop whose counter changes by more than one</li>\n</ul>', 3, NULL, 'Relational operators should be used in "for" loop termination conditions', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'bug,cert,cwe,misra', 0, 'HTML'),
(16, 'S2814', NULL, 'javascript', '<p>\n  This rule checks that a declaration doesn''t use a name that is already in use. Indeed, it is possible to declare multiple variables and/or functions with the same name,\n  but it''s hard to predict which declaration will be kept by the JavaScript interpreter.\n</p>\n\n<p>Typically, this kind of re-declaration is an error, and can lead to bugs and more generally to confusing code.</p>\n\n<p>This rule also applies to function parameters.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar a = ''foo'';\nfunction a() {}   // Noncompliant\nconsole.log(a);   // prints "foo"\n\nfunction myFunc(arg) {\n  var arg = "event"; // Noncompliant, argument value is lost\n}\n\nfun(); // prints "bar"\n\nfunction fun() {\n  console.log("foo");\n}\n\nfun(); // prints "bar"\n\nfunction fun() {  // Noncompliant\n  console.log("bar");\n}\n\nfun(); // prints "bar"\n</pre>\n\n\n<h2>Compliant Solution</h2>\n\n<pre>\nvar a = ''foo'';\nfunction otherName() {}\nconsole.log(a);\n\nfunction myFunc(arg) {\n  var newName = "event";\n}\n\nfun(); // prints "foo"\n\nfunction fun() {\n  print("foo");\n}\n\nfun(); // prints "foo"\n\nfunction printBar() {\n  print("bar");\n}\n\nprintBar(); // prints "bar"\n</pre>', 2, NULL, 'Variables and functions should not be redeclared', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'bug,pitfall', 0, 'HTML'),
(17, 'S2817', NULL, 'javascript', '<p>\n  The Web SQL Database standard never saw the light of day. It was first formulated, then deprecated by the W3C and was only implemented in some browsers. (It is not supported in\n  Firefox or IE.)\n</p>\n\n<p>\n  Further, the use of a Web SQL Database poses security concerns, since you only need its name to access such a database.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar db = window.openDatabase("myDb", "1.0", "Personal secrets stored here", 2*1024*1024);  // Noncompliant\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\n  <li><a href="https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities">OWASP Top Ten 2013 Category A9</a> - Using Components with Known Vulnerabilities</li>\n</ul>', 3, NULL, 'Web SQL databases should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2h', NULL, NULL, 'html5,owasp-a6,owasp-a9,security', 0, 'HTML'),
(18, 'ConditionalOperator', NULL, 'javascript', '<p>\nCondition operators can quickly become hard to be read.\n</p>\n\n<p>\nThe following code snippet illustrates this rule :\n</p>\n\n<pre>\nfunction sayHello() {\n  var a = (a === ''A'') ? ''is A'' : ''is not A''; // Non-Compliant\n}\n</pre>', 1, NULL, 'Avoid use of conditional operator', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'confusing', 0, 'HTML'),
(19, 'S2123', NULL, 'javascript', 'A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar i = 0;\ni = i++; // Noncompliant; i is still zero\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar i = 0;\ni++;\n</pre>', 3, NULL, 'Values should not be uselessly incremented', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'bug', 0, 'HTML'),
(20, 'S1697', NULL, 'javascript', 'When either the equality operator in a test for <code>null</code> or <code>undefined</code>, or the logical operator that follows it is reversed, the code has the appearance of safely null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced only if it is <code>null</code>/<code>undefined</code>, leading to a guaranteed <code>TypeError</code>.\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\nif (str == null &amp;&amp; str.length == 0) {\n  console.log("String is empty");\n}\n\nif (str == undefined &amp;&amp; str.length == 0) {\n  console.log("String is empty");\n}\n\nif (str != null || str.length > 0) {\n  console.log("String is not empty");\n}\n\nif (str != undefined || str.length > 0) {\n  console.log("String is not empty");\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (str != null &amp;&amp; str.length == 0) {\n  console.log("String is empty");\n}\n\nif (str != undefined &amp;&amp; str.length == 0) {\n  console.log("String is empty");\n}\n\nif (str == null || str.length > 0) {\n  console.log("String is not empty");\n}\n\nif (str == undefined || str.length > 0) {\n  console.log("String is not empty");\n}\n</pre>', 4, NULL, 'Short-circuit logic should be used to prevent null pointer dereferences in conditionals', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'bug', 0, 'HTML'),
(21, 'RedeclaredVariable', NULL, 'javascript', '<p>\n  This rule checks that the var keyword is not used to declare a variable with a name that is already in use. It applies to already defined variables as well as to function parameters.\n</p>\n\n<p>\n  This use of duplicate name is often unwanted and can lead to bugs and more generally to confusing code :\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = ''foo'';\nvar a = ''bar''; // Non-Compliant\n\nfunction f(e) {\n  var e = "event"; // Non-Compliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar a = ''foo'';\nvar b = ''bar'';\n\nfunction f(e) {\n  var g = "event";\n}\n</pre>\n\n<p>\n  This rule is deprecated, use {rule:javascript:S2814} instead.\n</p>', 2, NULL, 'Variables should not be redeclared', 'DEPRECATED', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'bug', 0, 'HTML'),
(22, 'S2550', NULL, 'javascript', '<p>\n  When using the Backbone.js framework, model <code>defaults</code> should be a function rather than an object if it contains arrays or objects. This is because objects and arrays are passed by reference in JavaScript. So a <code>defaults</code> object that contains arrays or objects is going to set the default value of every instance to point to the same shared object or array.\n</p>\n<p>\n  Use a function instead and a fresh copy of the object or array will be peeled off for each instance.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar Person = Backbone.Model.extend({\n  defaults: {  // Noncompliant; every instance of Person will share the same instance of favoriteColors\n    favoriteColors: ["blue","purple","raspberry"]\n  }\n});\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar Person = Backbone.Model.extend({\n  defaults: function() {\n    return {\n      favoriteColors: ["blue","purple","raspberry"]\n    };\n  }\n});\n</pre>', 3, NULL, '"defaults" should be a function when objects or arrays are used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'backbone,bug', 0, 'HTML'),
(23, 'S2692', NULL, 'javascript', '<p>\n  Most checks against an <code>indexOf</code> call against a string or array compare it with -1 because 0 is a valid index. Any checks which look for values >0 ignore the first element, which is likely a bug.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar color = "blue";\nvar name = "ishmael";\nvar number = 123;\n\nvar arr = [color, name];\n\nif (arr.indexOf("blue") > 0) { // Noncompliant\n  // ...\n}\nif (arr[0].indexOf("ish") > 0 { // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar color = "blue";\nvar name = "ishmael";\nvar number = 123;\n\nvar arr = [color, name];\n\nif (arr.indexOf("blue") >= 0) {\n  // ...\n}\nif (arr[0].indexOf("ish") > -1 {\n  // ...\n}\n</pre>', 2, NULL, '"indexOf" checks should not be for positive numbers', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'bug', 0, 'HTML'),
(24, 'S930', NULL, 'javascript', '<p>You can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function execution.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction say(a, b) {\n  print(a + " " + b);\n}\n\nsay("hello", "world", "!"); // Noncompliant; last argument is not used\n</pre>\n\n<h2>Exceptions</h2>\n<p>No issue is reported when <code>arguments</code> is used in the body of the function being called.</p>\n\n<pre>\nfunction doSomething(a, b) {\n  compute(arguments);\n}\n\ndoSomething(1, 2, 3) // Compliant\n</pre>', 3, NULL, 'Function calls should not pass extra arguments', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'bug,cwe,misra', 0, 'HTML'),
(25, 'AssignmentWithinCondition', NULL, 'javascript', '<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable.</p>\n<p>It is also a common mistake to write <code>=</code> when <code>==</code> was meant.</p>\n<p>Ideally, expressions should not have side-effects.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\ndoSomething(i = 42);\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\ni = 42;\ndoSomething(i);   \n// or\ndoSomething(i == 42);  // Perhaps in fact the comparison operator was expected\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>\n<pre>\nwhile ((line = nextLine()) != null) {...}  // Compliant\n\nwhile (line = nextLine()) {...}  // Compliant\n\nif (line = nextLine()) {...}  // Noncompliant\n</pre><h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value</li>\n<li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions</li>\n<li> MISRA C:2012, 13.4 - The result of of an assignment operator should not be used</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing</li>\n</ul>', 2, NULL, 'Assignments should not be made from within sub-expressions', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'bug,cwe,misra', 0, 'HTML'),
(26, 'SingleQuote', NULL, 'javascript', '<p>\n  For consistency single-quotes ('') are preferred to double-quotes (").\n  This is helpful when creating strings that include HTML.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar firstParameter = "something";\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar firstParameter = ''something'';\n</pre>', 1, NULL, 'Single quotes should be used for string literals', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(27, 'LabelPlacement', NULL, 'javascript', '<p>Any statement or block of statements can be identified by a label, but those labels should be used only on ''while'', ''do-while'' and ''for'' statements. Using labels in any other context leads to unstructured, confusing code. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nmyLabel:if (i % 2 == 0) {  // Noncompliant\n  if (i == 12) {\n    print("12");\n    break myLabel;\n  }\n  print("Odd number, but not 12");\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nmyLabel:for (i = 0; i &lt; 10; i++) {   // Compliant\n  print("Loop");\n  break myLabel;\n}\n</pre>', 2, NULL, 'Only "while", "do" and "for" statements should be labelled', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'pitfall', 0, 'HTML'),
(28, 'S2228', NULL, 'javascript', '<p>\n  Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you run the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users. (Not all browsers support <code>console.log()</code>).\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nconsole.log(password_entered); // Noncompliant\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure </li>\n</ul>', 2, NULL, 'Console logging should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'owasp-a6,security', 0, 'HTML'),
(29, 'HtmlComments', NULL, 'javascript', '<p>\n  HTML-style comments are not part of EcmaScript specification, and should not be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;!-- Noncompliant -->\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// Compliant\n/* Compliant */\n</pre>', 2, NULL, 'HTML-style comments should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 8, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'bug', 0, 'HTML'),
(30, 'TooManyBreakOrContinueInLoop', NULL, 'javascript', '<p>\n  Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n\n<p>\n  One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one, the code should be refactored to increase readability.\n</p>\n\n<h2>Noncompiant Code Example</h2>\n<pre>\nfor (var i = 1; i <= 10; i++) {  // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  alert("i = " + i);\n}\n</pre>', 2, NULL, 'Loops should not contain more than a single "break" or "continue" statement', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'brain-overload', 0, 'HTML'),
(31, 'S1472', NULL, 'javascript', '<p>Because semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing. It could lead to errors and most likely <em>will</em> lead to questions for maintainers.</p>\n<p>What was the initial purpose of the developer ?</p>\n<ol>\n<li> Was it to define a function and then to execute some unrelated code inside a closure ?</li>\n<li> Or to pass the second function as a parameter to the first one ?</li>\n</ol>\n<p>The first option will be the one chosen by the JavaScript interpreter..</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar fn = function () {\n  //...\n}\n\n(function () { // Noncompliant\n  //...\n})();\n</pre>\n<h2>Compliant Solution</h2>\n\n<p>Either</p>\n<pre>\n// define a function\nvar fn = function () {\n  //...\n}; // &lt;-- semicolon added\n\n// then execute some code inside a closure\n(function () {\n  //...\n})();\n</pre>\n<p>Or </p>\n<pre>\nvar fn = function () {\n  //...\n}(function () { // &lt;-- start function call arguments on same line\n  //...\n})();\n</pre>\n<p>By extension and to improve readability, any kind of function call arguments should not start on new line.</p>', 3, NULL, 'Function call arguments should not start on new line', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'pitfall', 0, 'HTML'),
(32, 'S1994', NULL, 'javascript', '<p>It is almost always an error when a <code>for</code> loop''s stop condition and incrementer don''t act on the same variable. Even when it is not, it could confuse future maintainers of the code, and should be avoided.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) {  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n}\n</pre>', 3, NULL, '"for" loop incrementers should modify the variable being tested in the loop''s stop condition', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'bug', 0, 'HTML'),
(33, 'DuplicateFunctionArgument', NULL, 'javascript', '<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument hides all the previous arguments with the same name. This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction compute(a, a, c) { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction compute(a, b, c) { // Compliant\n}\n</pre>', 3, NULL, 'Function argument names should be unique', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'pitfall', 0, 'HTML'),
(34, 'S2427', NULL, 'javascript', '<p>The <code>parseInt</code> function has two versions, one that takes a base value as a second argument and one that does not, and using the single-arg version can result in unexpected results on older browsers. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nparseInt("010");  // Noncompliant; pre-2013 browsers may return 8 \n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nparseInt("010", 10);\n</pre>', 3, NULL, 'The base should be provided to "parseInt"', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'bug', 0, 'HTML'),
(35, 'NonEmptyCaseWithoutBreak', NULL, 'javascript', '<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2:  // Both ''doSomething()'' and ''doSomethingElse()'' will be executed. Is it on purpose ?\n    doSomething();\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2: \n    doSomething();\n    break;\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:                               \n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 4:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional \n    doSomethingElse();\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>\n<li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause</li>\n<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\n<li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause</li>\n<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\n<li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C</a> - Finish every set of statements associated with a case label with a break statement</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/ZoFLAQ">CERT, MSC18-CPP</a> - Finish every set of statements associated with a case label with a break statement</li>\n</ul>', 3, NULL, 'Switch cases should end with an unconditional "break" statement', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'cert,cwe,misra,pitfall', 0, 'HTML'),
(36, 'ConstructorFunctionsForSideEffects', NULL, 'javascript', '<p>Some people like to call a constructor functions without assigning the result to a variable. There is no advantage in this approach since the object the <code>new</code> operator creates isn''t used anywhere. Therefore this misleading syntax should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nnew MyConstructor(); // Non-Compliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nvar something = new MyConstructor();  // Compliant\n</pre>', 2, NULL, 'Constructor functions should not be called purely for side-effects', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'pitfall', 0, 'HTML'),
(37, 'BoundOrAssignedEvalOrArguments', NULL, 'javascript', '<p>In JavaScript, <code>eval</code> is used to evaluate a string as JavaScript code, and <code>arguments</code> is used to access function arguments through indexed properties.\n  As a consequence, <code>eval</code> and <code>arguments</code> should not be bound or assigned, because doing so would overwrite the original definitions of those two reserved words. </p>\n\n<p>What''s more, using either of those two names to assign or bind will generate an error in JavaScript strict mode code.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\neval = 17; // Noncompliant\narguments++; // Noncompliant\n++eval; // Noncompliant\nvar obj = { set p(arguments) { } }; // Noncompliant\nvar eval; // Noncompliant\ntry { } catch (arguments) { } // Noncompliant\nfunction x(eval) { } // Noncompliant\nfunction arguments() { } // Noncompliant\nvar y = function eval() { }; // Noncompliant\nvar f = new Function("arguments", "return 17;"); // Noncompliant\n\nfunction fun() {\n  if (arguments.length == 0) { // Compliant\n    // do something\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nresult = 17;\nargs++;\n++result;\nvar obj = { set p(arg) { } };\nvar result;\ntry { } catch (args) { }\nfunction x(arg) { }\nfunction args() { } \nvar y = function fun() { }; \nvar f = new Function("args", "return 17;");\n\nfunction fun() {\n  if (arguments.length == 0) {\n    // do something\n  }\n}\n</pre>', 3, NULL, '"eval" and "arguments" should not be bound or assigned', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'bug', 0, 'HTML'),
(38, 'S2819', NULL, 'javascript', '<p>\n  HTML5 adds the ability to send messages to documents served from other domains. To mitigate the risk of sending sensitive information to a document served from a hostile or\n  unknown domain, this rule raises an issue each time <code>Window.postMessage</code> is used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar myWindow = document.getElementById(''myIFrame'').contentWindow;\nmyWindow.postMessage(message, "*"); // Noncompliant; how do you know what you loaded in ''myIFrame'' is still there?\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting (XSS)</li>\n</ul>', 3, NULL, 'Cross-document messaging domains should be carefully restricted', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'html5,owasp-a3,security', 0, 'HTML'),
(39, 'S2424', NULL, 'javascript', '<p>\n  Overriding an object changes its behavior and could potentially impact all code using that object. Overriding standard, built-in objects could therefore have broad,\n  catastrophic effects on previously-working code.\n</p>\n\n<p>This rule detects overrides of the following native objects:</p>\n\n<ul>\n  <li>Fundamental objects - Object, Function, Boolean, Symbol, Error, EvalError, InternalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError</li>\n  <li>Numbers and dates - Number, Math, Date</li>\n  <li>Text processing - String, RegExp</li>\n  <li>Indexed collections - Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Unit16Array, Int32Array, Uint32Array, Float32Array, Float64Array</li>\n  <li>Keyed collections - Map, Set, WeakMap, WeakSet</li>\n  <li>Structured data - ArrayBuffer, DataView, JSON</li>\n  <li>Control abstraction objects - Promise</li>\n  <li>Reflection - Reflect, Proxy</li>\n  <li>Internationalization - Intl</li>\n  <li>Non-standard objects - Generator, Iterator, ParallelArray, StopIteration</li>\n</ul>', 3, NULL, 'Built-in objects should not be overridden', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'bug,confusing', 0, 'HTML'),
(40, 'ContinueStatement', NULL, 'javascript', '<p><code>continue</code> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured control flow statements such as <code>if</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n  for (i = 0; i < 10; i++) {\n    if (i == 5) {\n      continue;  /* Non-Compliant */\n    }\n    alert("i = " + i);\n  }\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\n  for (i = 0; i < 10; i++) {\n    if (i != 5) {  /* Compliant */\n      alert("i = " + i);\n    }\n  }\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 14.5</li>\n</ul>', 3, NULL, '"continue" should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'misra', 0, 'HTML'),
(41, 'NestedIfDepth', NULL, 'javascript', '<p>\n  Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code> and <code>try</code> statements is a key ingredient for making what''s known as "Spaghetti code".\n  Such code is hard to read, refactor and therefore maintain.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>\n  The following code snippet illustrates this rule with the default threshold of 3.\n</p>\n\n<pre>\n  if (condition1) {                  // Compliant - depth = 1\n    /* ... */\n    if (condition2) {                // Compliant - depth = 2\n      /* ... */\n      for(int i = 0; i < 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n        /* ... */\n        if (condition4) {            // Non-Compliant - depth = 4\n          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            /* ... */\n          }\n          return;\n        }\n      }\n    }\n  }\n</pre>', 2, NULL, 'Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 36, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'brain-overload', 0, 'HTML'),
(42, 'FunctionDefinitionInsideLoop', NULL, 'javascript', '<p>\n  Defining a function inside of a loops can yield unexpected results because under the covers, only a single instance of the function is defined. Rather than creating new function instances, the loop iterations simply update the function''s variables. Instead, the function should be returned.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar funs = [];\nfor (var i = 0; i < 13; i++) {\n  funs[i] = function() { // Non-Compliant\n    return i;\n  };\n}\nprint(funs[0]()); // 13 instead of 0\nprint(funs[1]()); // 13 instead of 1\nprint(funs[2]()); // 13 instead of 2\nprint(funs[3]()); // 13 instead of 3\n...\n</pre>', 2, NULL, 'Functions should not be defined inside loops', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'bug', 0, 'HTML'),
(43, 'PrimitiveWrappers', NULL, 'javascript', '<p>\n  The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. Simple literals should be used instead.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = new Boolean(false);\nif (x) {\n  alert(''hi'');  // Shows ''hi''.\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar x = false;\nif (x) {\n  alert(''hi'');\n}\n</pre>', 2, NULL, 'Wrapper objects should not be used for primitive types', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'pitfall', 0, 'HTML'),
(44, 'EmptyBlock', NULL, 'javascript', '<p>\n  Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i < length; i++) {}  // Empty on purpose or missing piece of code ?\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n  When a block contains a comment, this block is not considered to be empty.\n</p>', 2, NULL, 'Nested blocks of code should not be left empty', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'bug', 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(45, 'S1871', NULL, 'javascript', '<p>\nHaving two <code>cases</code> in the same <code>switch</code> statement or branches in the same <code>if</code> structure  with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then they should be combined, for an <code>if</code> structure or one should fall through to the other for a <code>switch</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1''s implementation\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a >= 0 && a < 10) {\n  doTheThing();\nelse if (a >= 10 && a < 20) {\n  doTheOtherThing();\n}\nelse if (a >= 20 && a < 50) {\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a >= 0 && a < 10) || (a >= 20 && a < 50)) {\n  doTheThing();\nelse if (a >= 10 && a < 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n\n<p>or</p>\n\n<pre>\nswitch (i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a >= 0 && a < 10) {\n  doTheThing();\nelse if (a >= 10 && a < 20) {\n  doTheOtherThing();\n}\nelse if (a >= 20 && a < 50) {\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n</pre>', 2, NULL, 'Two branches in the same conditional structure should not have exactly the same implementation', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'bug', 0, 'HTML'),
(46, 'DebuggerStatement', NULL, 'javascript', '<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to attacks in production.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write("loop index is " + i);\n  // Wait for user to resume.\n  debugger;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write("loop index is " + i);\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code</li>\n</ul>', 3, NULL, 'Debugger statements should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'cwe,security,user-experience', 0, 'HTML'),
(47, 'MissingNewlineAtEndOfFile', NULL, 'javascript', '<p>Some tools such as Git work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff look like:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>\n<p>if the empty line is missing at the end of the file.</p>', 1, NULL, 'Files should contain an empty new line at the end', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(48, 'ArrayAndObjectConstructors', NULL, 'javascript', '<p>\n  Array and Object literals should always be preferred to Array and Object constructors.\n</p>\n\n<p>\n  Array constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be equal to the number of arguments. However, using a single argument will have one of three consequences:\n</p>\n\n<ul>\n    <li>If the argument is a number and it is a natural number the length will be equal to the value of the argument.</li>\n    <li>If the argument is a number, but not a natural number an exception will be thrown.</li>\n    <li>Otherwise the array will have one element with the argument as its value.</li>\n</ul>\n\n<p>\n  For these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid these kinds of weird cases, always use the more readable array.\n</p>\n\n<p>\n  Object constructors don''t have the same problems, but for readability and consistency object literals should be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a3 = new Array(x1); // Noncompliant and variable in results\nvar a4 = new Array();  // Noncompliant. Results in 0-element array.\nvar a1 = new Array(x1, x2, x3);  // Noncompliant. Results in 3-element array.\n\nvar o = new Object(); // Noncompliant\n\nvar o2 = new Object(); // Noncompliant\no2.a = 0;\no2.b = 1;\no2.c = 2;\no2[''strange key''] = 3;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar a = [x1, x2, x3];\nvar a2 = [x1, x2];\nvar a3 = [x1];\nvar a4 = [];\n\nvar o = {};\n\nvar o2 = {\n  a: 0,\n  b: 1,\n  c: 2,\n  ''strange key'': 3\n};\n</pre>', 2, NULL, 'Array and Object constructors should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'bug', 0, 'HTML'),
(49, 'ConditionalComment', NULL, 'javascript', '<p>\n  Internet Explorer offers a way to change the JavaScript code at runtime using conditional comments (activated by a @cc_on statement found in a comment). Using this preprocessing feature decreases readability and maintainability, and can hinder automated tools. What''s more, it is specific to Internet Explorer and won''t work for other browsers.\n</p>\n\n</p>\n  Most of the time, using those conditional comments can be easily avoided with some refactoring - using modern cross-browsers JavaScript frameworks and libraries.\n  The following code snippet illustrates the use of conditional comments:\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n/*@cc_on\n  @if (@_jscript_version >= 5.5)\n    document.write("You are using IE5.5 or newer");\n  @else\n    document.write("You are using IE5 or older");\n  @end\n  @*/\n</pre>', 2, NULL, 'Internet Explorer''s conditional comments should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'cross-browser', 0, 'HTML'),
(50, 'S1301', NULL, 'javascript', '<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.</li>\n<li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.</li>\n<li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses</li>\n</ul>', 1, NULL, '"switch" statements should have at least 3 "case" clauses', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'misra', 0, 'HTML'),
(51, 'S2432', NULL, 'javascript', 'Functions declared with the <code>set</code> keyword will automatically return the values they were passed. Thus any value explicitly returned from a setter will be ignored, and explicitly returning a value is an error.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar person = {\n  // ...\n  set name(name) {\n    this.name = name;\n    return 42;  // Noncompliant\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar person = {\n  // ...\n  set name(name) {\n    this.name = name;\n  }\n}\n</pre>', 3, NULL, 'Setters should not return values', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'bug', 0, 'HTML'),
(52, 'S100', NULL, 'javascript', '<p>\n  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all function names match a provided regular expression.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction DoSomething(){...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(){...}\n</pre>', 1, NULL, 'Function names should comply with a naming convention', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'convention', 0, 'HTML'),
(53, 'TrailingComment', NULL, 'javascript', '<p>This rule verifies that single-line comments are not located at the end of a line of code.\nThe main idea behind this rule is that in order to be really readable,\ntrailing comments would have to be properly written and formatted (correct alignment,\nno interference with the visual structure of the code, not too long to be visible) but most often,\nautomatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\nvar a2 = b + c;\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>By default, the property "legalTrailingCommentPattern" allows to ignore comments containing only one word :</p>\n<pre>\ndoSomething(); //FIXME\n</pre>', 0, NULL, 'Comments should not be located at the end of lines of code', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(54, 'ElseIfWithoutElse', NULL, 'javascript', '<p>This rule applies whenever an <code>if</code> statement is followed by one or </p>\n<p>more <code>else if</code> statements, the final <code>else if</code> shall be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming. </p>\n<p>The <code>else</code> statement should either take appropriate action or contain </p>\n<p>a suitable comment as to why no action is taken. This is consistent with the </p>\n<p>requirement to have a final <code>default</code> clause in a <code>switch</code></p>\n<p>statement. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n} else {\n  throw new IllegalStateException();\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 14.10</li>\n<li> MISRA C++:2008, 6-4-2</li>\n<li> MISRA C:2012, 15.7</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C</a> - Strive for logical completeness</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP</a> - Strive for logical completeness</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC64-Java</a> - Strive for logical completeness</li>\n</ul>', 2, NULL, '"if ... else if" constructs shall be terminated with an "else" clause', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'cert,misra', 0, 'HTML'),
(55, 'S1854', NULL, 'javascript', '<p>\n  A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value only to then overwrite it or\n  throw it away, could indicate a serious error in the code. Even if it''s not an error, it is at best a waste of resources. Therefore all calculated values should be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1, i < b, i++) {\n    x = x * a;  //Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1, i < b, i++) {\n    x = x * a;\n  }\n  return x;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use (''Unused Variable'')</li>\n  <li><a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C</a> - Detect and remove unused values</li>\n  <li><a href="https://www.securecoding.cert.org/confluence/x/S4IyAQ">CERT, MSC13-CPP</a> - Detect and remove unused values</li>\n</ul>', 2, NULL, 'Dead Stores should be removed', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '15min', NULL, NULL, 'bug,cert,cwe,unused', 0, 'HTML'),
(56, 'TabCharacter', NULL, 'javascript', '<p>\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code. So the use of tabulation character must be banned.\n</p>', 1, NULL, 'Tabulation characters should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'convention', 0, 'HTML'),
(57, 'EqEqEq', NULL, 'javascript', '<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For example, it evaluates <code>'' \\t\\r\\n'' == 0</code> as <code>true</code>.</p>\n<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (var == ''howdy'') {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (var === ''howdy'') {...}\n</pre>\n<h2>Exceptions</h2>\n\n<p>Even if testing the equality of a variable against null doesn''t do exactly what most JavaScript developers believe, usage of <code>==</code> or <code>!=</code> is tolerated in such context. In the following case, if <code>foo</code> hasn''t been initialized, its default value is not <code>null</code> but <code>undefined</code>. Nevertheless <code>undefined == null</code>, so JavaScript developers get the expected behavior.</p>\n<pre>\nif(foo == null) {...}\n</pre>', 2, NULL, '"===" and "!==" should be used instead of "==" and "!="', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'bug', 0, 'HTML'),
(58, 'Eval', NULL, 'javascript', '<p>The <code>eval</code> function is a way to run arbitrary code at run-time. Generally it is considered to be very dangerous because it allows execution of arbitrary code. Its use is thus discouraged. If you have carefully verified that there is no other option than to use this construct, pay special attention not to pass any user-provided data into it without properly validating it beforehand.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\neval(code_to_be_dynamically_executed)\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/95.html">MITRE CWE-95</a> - CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code (''Eval Injection'')</li>\n<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting (XSS)</li>\n</ul>', 3, NULL, 'Code should not be dynamically injected and executed to prevent Eval Injection vulnerability', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 20, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'cwe,owasp-a3,security', 0, 'HTML'),
(59, 'S2999', NULL, 'javascript', '<p>\n  The <code>new</code> keyword should only be used with objects that define a constructor function. Use it with anything else, and you''ll get a <code>TypeError</code> because there won''t be a constructor function for the <code>new</code> keyword to invoke.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction MyClass() {\n  this.foo = ''bar'';\n}\n\nvar someClass = 1;\n\nvar obj1 = new someClass;    // Noncompliant;\nvar obj2 = new MyClass();    // Noncompliant if considerJSDoc parameter set to true. Compliant when considerJSDoc=false\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n/**\n * @constructor\n */\nfunction MyClass() {\n  this.foo = ''bar'';\n}\n\nvar someClass = function(){\n  this.prop = 1;\n}\n\nvar obj1 = new someClass;  // Compliant\nvar obj2 = new MyClass();  // Compliant regardless of considerJSDoc value\n</pre>', 3, NULL, '"new" operators should be used with functions', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'bug', 0, 'HTML'),
(60, 'CurlyBraces', NULL, 'javascript', '<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n// the two statements seems to be attached to the if statement, but that is only true for the first one:\nif (condition)\n  executeSomething();\n  checkSomething();\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (condition) {\n  executeSomething();\n  checkSomething();\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement</li>\n<li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement</li>\n<li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement</li>\n<li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement</li>\n<li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C</a> - Use braces for the body of an if, for, or while statement</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation</li>\n</ul>', 2, NULL, 'Control structures should always use curly braces', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'cert,cwe,misra,pitfall', 0, 'HTML'),
(61, 'S2508', NULL, 'javascript', '<p>\n  When using the Backbone.js framework, the names of model attributes should not contain spaces. This is because the Events object accepts space-delimited lists of events, so an attributes with spaces in the names could be misinterpreted.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nPerson = Backbone.Model.extend({\n        defaults: {\n            ''first name'': ''Bob'',      // Noncompliant\n            ''birth date'': new Date()  // Noncompliant\n        },\n    });\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nPerson = Backbone.Model.extend({\n        defaults: {\n            firstName: ''Bob'',\n            birthDate: new Date()\n        },\n    });\n</pre>', 3, NULL, 'The names of model properties should not contains spaces', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'backbone,bug', 0, 'HTML'),
(62, 'S2715', NULL, 'javascript', '<p>\n  The use of <code>find</code> allows <code>document.getElementById()</code> to be used for the top-level selection, and saves the Sizzle engine for where it''s really needed.\n  That makes the query faster, and your application more responsive.\n</p>\n<p>From the jQuery documentation:</p>\n\n<blockquote>\n  Beginning your selector with an ID is always best.<br>\n  The <code>.find()</code> approach is faster because the first selection is handled without going through the Sizzle selector engine – ID-only selections are handled using <code>document.getElementById()</code>,\n  which is extremely fast because it is native to the browser.\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>var $productIds = $("#products div.id"); // Noncompliant - a nested query for Sizzle selector engine</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>var $productIds = $("#products").find("div.id"); // Compliant - #products is already selected by document.getElementById() so only div.id needs to go through Sizzle selector engine</pre>', 2, NULL, '"find" should be used to select the children of an element known by id', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'jquery,performance,user-experience', 0, 'HTML'),
(63, 'S2716', NULL, 'javascript', '<p>\n  Element selections that could be matched anywhere in the document can be very slow. That''s why use of the universal selector, <code>*</code>, should be limited; it explicitly\n  specifies that the match could be anywhere.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>$( ".buttons > *" );  // Noncompliant; extremely expensive</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>$( ".buttons" ).children(); // Compliant</pre>', 2, NULL, 'Universal selectors should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'jquery,performance,user-experience', 0, 'HTML'),
(64, 'S2990', NULL, 'javascript', '<p>\n  When the keyword <code>this</code> is used outside of an object, it refers to the global <code>this</code> object,\n  which is the same thing as the <code>window</code> object in a standard web page. Clearly, such a misdirected usage\n  could have unintended consequences, as well as being confusing to maintainers. Instead, simply drop the <code>this</code>;\n  it will have the same effect.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nthis.foo = 1;   // Noncompliant\nconsole.log(this.foo); // Noncompliant\n\nfunction MyObj() {\n  this.foo = 1; // Compliant\n}\n\nMyObj.func1 = function() {\n  if (this.foo == 1) { // Compliant\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfoo = 1;\nconsole.log(foo);\n\nfunction MyObj() {\n  this.foo = 1;\n}\n\nMyObj.func1 = function() {\n  if (this.foo == 1) {\n    // ...\n  }\n}\n</pre>', 3, NULL, 'The global "this" object should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'pitfall', 0, 'HTML'),
(65, 'S1451', NULL, 'javascript', '<p>\n    Each source file should start with a header stating file ownership and the license which must be used to distribute the application.\n</p>\n<p>\n    This rule must be fed with the header text that is expected at the beginning of every file.\n</p>\n\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>', 4, NULL, 'Copyright and license headers should be defined', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(66, 'S2713', NULL, 'javascript', '<p>Shared naming conventions allow teams to collaborate efficiently.\n  This rule checks that all variables names that are used to store/cache jQuery objects match a provided regular expression.</p>', 1, NULL, 'JQuery cache variables should comply with a convention name', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'convention,jquery', 0, 'HTML'),
(67, 'S2714', NULL, 'javascript', '<p>Using element type in class selectors is slower than using only the class selector.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>var $products = $("div.products");    // Noncompliant - slow</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>var $products = $(".products");    // Compliant - fast</pre>', 2, NULL, 'Element type selectors should not be used with class selectors', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'jquery,performance,user-experience', 0, 'HTML'),
(68, 'CollapsibleIfStatements', NULL, 'javascript', '<p>Merging collapsible <code>if</code> statements increases the code''s readability.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (x != undefined) {\n  if (x === 2) {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (x != undefined &amp;&amp; x === 2) {\n  // ...\n}\n</pre>', 2, NULL, 'Collapsible "if" statements should be merged', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'clumsy', 0, 'HTML'),
(69, 'TrailingWhitespace', NULL, 'javascript', '<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same file.</p>\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the opportunity to do so. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// The following string will error if there is a whitespace after ''\\''\nvar str = "Hello \\\nWorld";\n</pre>', 1, NULL, 'Lines should not end with trailing whitespaces', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(70, 'OneStatementPerLine', NULL, 'javascript', '<p>For better readability, do not put more than one statement on a single line.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif(someCondition) doSomething();\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>Anonymous functions containing a single statement are ignored.</p>\n\n<pre>\nonEvent(function() { doSomething(); });               // Compliant\nonEvent(function(p) { doSomething(); return p %2 ;}); // Noncompliant\n</pre>', 1, NULL, 'Statements should be on separate lines', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(71, 'S1656', NULL, 'javascript', '<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction setName(name) {\n    name = name;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction setName(name) {\n    this.name = name;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li><a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\n<li><a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n</ul>', 2, NULL, 'Variables should not be self-assigned', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '3min', NULL, NULL, 'bug,cert', 0, 'HTML'),
(72, 'NamedFunctionExpression', NULL, 'javascript', '<p>\n  While named function expressions might be useful for debugging purposes, some browsers do not support them correctly (for example Internet Explorer 8).\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nf = function fun(){}; // Non-Compliant;  named function expression\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfun = function(){}; // Compliant; function expression\n</pre>\n\n<h2>Exceptions</h2>\n<p>ECMAScript 6 generator functions are excluded from this rule.</p>\n<pre>\nfunction* f() {} // Compliant; generator function.\n</pre>', 2, NULL, 'Named function expressions should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 8, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '15min', NULL, NULL, 'cross-browser,user-experience', 0, 'HTML'),
(73, 'S1862', NULL, 'javascript', '<p>\n  A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <code>true</code>.\n</p>\n<p>\n  Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it''s simply dead code and at worst, it''s a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.\n</p>\n\n<p>\nFor a <code>switch</code>, if the first case ends with a break, the second case will never be executed, rendering it dead code. Worse there is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that''s actually used.\n</p>\n\n<p>\nOn the other hand, if the first case does not end with a break, both cases will be executed, but future maintainers may not notice that.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  case 1:  // Noncompliant\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n\n<h2>See</h2>\n  <ul>\n    <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect </li>\n    <li><a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a>- Detect and remove code that has no effect </li>\n  </ul>', 3, NULL, 'Related "if/else if" statements and "cases" in a "switch" should not have the same condition', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'bug,cert,pitfall,unused', 0, 'HTML'),
(74, 'FunctionDeclarationsWithinBlocks', NULL, 'javascript', '<p>\n  While most script engines support function declarations within blocks, it is not part of ECMAScript 5 and below, and from browser to browser the implementations are inconsistent with each other. ECMAScript 5 and below only allows function declarations in the root statement list of a script or function. If you are targeting browsers that don''t support ECMAScript 6, use a variable initialized with a function expression to define a function within a block :\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x) {\n  function foo() {}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (x) {\n  var foo = function() {}\n}\n</pre>', 2, NULL, 'Function declarations should not be made within blocks', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'cross-browser,user-experience', 0, 'HTML'),
(75, 'SwitchWithoutDefault', NULL, 'javascript', '<p>\nThe requirement for a final <code>default</code> clause is defensive programming.\nThe clause should either take appropriate action or contain a suitable comment as to why no action is taken.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>\n<li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause</li>\n<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\n<li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause</li>\n<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\n<li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label</li>\n<li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C</a> - Strive for logical completeness</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP</a> - Strive for logical completeness</li>\n</ul>', 2, NULL, '"switch" statements should end with a "default" clause', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'cert,cwe,misra', 0, 'HTML'),
(76, 'S1264', NULL, 'javascript', '<p>When only the condition expression is defined in a <code>for</code> loop, but the init and increment expressions are missing, a <code>while</code> loop should be used instead to increase readability. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n\n\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>', 1, NULL, 'A "while" loop should be used instead of a "for" loop', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'clumsy', 0, 'HTML'),
(77, 'ParsingError', NULL, 'javascript', '<p>When the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number of files that do not parse but also to easily find out why they do not parse.</p>', 2, NULL, 'JavaScript parser failure', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(78, 'S878', NULL, 'javascript', '<p>The comma operator takes two expressions, executes them from left to right and returns the result of the second one. Use of this operator is generally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\ni = a += 2, a + b;  // What''s the value of i ?\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\na +=  2;\ni = a + b;\n</pre>\n<h2>Exceptions</h2>\n\n<p>Use of comma operator is tolerated in initialization and increment expressions of <code>for</code> loops.</p>\n<pre>\nfor(i = 0, j = 5; i &lt; 6; i++, j++) { ... }\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 12.10 - The comma operator shall not be used.</li>\n<li> MISRA C++:2008, 5-18-1 - The comma operator shall not be used.</li>\n<li> MISRA C:2012, 12.3 - The comma operator should not be used</li>\n</ul>', 2, NULL, 'Comma operator should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'misra', 0, 'HTML'),
(79, 'ExcessiveParameterList', NULL, 'javascript', '<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.</p>\n\n<h2>Noncompliant Code Example</h2>\nThe following code snippet illustrates this rule with a maximum number of 4 parameters:\n<pre>\nfunction doSomething(param1, param2, param3, param4, param5) { \n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>', 2, NULL, 'Functions should not have too many parameters', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'brain-overload', 0, 'HTML'),
(80, 'UnusedVariable', NULL, 'javascript', '<p>\n  If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  var seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  return hours * 60;\n}\n</pre>', 2, NULL, 'Unused local variables should be removed', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'unused', 0, 'HTML'),
(81, 'S1125', NULL, 'javascript', '<p>\n  Remove literal boolean values from conditional expressions to improve readability. Anything that can be tested for equality with a boolean value must itself be a boolean value, and boolean values can be tested atomically.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanVariable == true) { /* ... */ }\nif (booleanVariable != true) { /* ... */ }\nif (booleanVariable || false) { /* ... */ }\ndoSomething(!false);\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanVariable) { /* ... */ }\nif (!booleanVariable) { /* ... */ }\nif (booleanVariable) { /* ... */ }\ndoSomething(true);\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n  The use of literal booleans in comparisons which use identity operators (<code>===</code> and <code>!==</code>) are ignored.\n</p>', 1, NULL, 'Literal boolean values should not be used in condition expressions', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'clumsy', 0, 'HTML'),
(82, 'S1126', NULL, 'javascript', '<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (expression) {  \n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nreturn expression; \n</pre>\n<pre>\nreturn !!expression;\n</pre>', 1, NULL, 'Return of boolean expressions should not be wrapped into an "if-then-else" statement', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'clumsy', 0, 'HTML'),
(83, 'S2703', NULL, 'javascript', '<p>\n  JavaScript variable scope can be particularly difficult to understand and get right.\n  The situation gets even worse when you consider the accidental creation of global variables,\n  which is what happens when you declare a variable inside a method or the <code>for</code> clause of a for-loop without using the <code>var</code> keyword.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction f(){\n  i = 1;         // Noncompliant; i is global\n\n  for (j = 0; j < array.length; j++) {  // Noncompliant; j is global now too\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction f(){\n  var i = 1;\n\n  for (var j = 0; j < array.length; j++) {\n    // ...\n  }\n}\n</pre>', 2, NULL, 'Variables should always be declared with "var"', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'pitfall', 0, 'HTML'),
(84, 'S2762', NULL, 'javascript', '<p>\n  jQuery doesn''t cache elements for you. If you''ve made a selection that you might need to make again, you should save the selection in a variable rather than making the\n  selection repeatedly.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n$( "p" ).hide();\n$( "p" ).show();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar paragraph = $( "p" );\n\nparagraph.hide();\nparagraph.show();\n</pre>\n\n<h2>Exception</h2>\n<p>\n  Stored selections are not updated when the DOM changes. Since variables may need to updated this rule ignores selections that are repeated during an assignment.\n</p>\n<pre>\nvar paragraph = $("p");\n\n// ...\n\nparagraph = $("p");\n</pre>', 2, NULL, 'Selections should be stored', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'LINEAR_OFFSET', NULL, '1min', NULL, '2min', 'number of times selection is re-made.', NULL, 'jquery,performance,user-experience', 0, 'HTML'),
(85, 'S2251', NULL, 'javascript', 'A <code>for</code> loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run infinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as <code>while</code> loops. More typically, an infinite <code>for</code> loop is a bug. \n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i < strings.length; i--) { // Noncompliant;\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (var i = 0; i < strings.length; i++) {\n  //...\n}\n</pre>', 4, NULL, 'A "for" loop update clause should move the counter in the right direction', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'bug', 0, 'HTML'),
(86, 'TrailingComma', NULL, 'javascript', '<p>\n  Most browsers parse and discard a meaningless, trailing comma. Unfortunately, that''s not the case for Internet Explorer, which in most versions throws a meaningless error. Therefore trailing commas should be eliminated.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar settings = {\n    ''foo''  : oof,\n    ''bar'' : rab,    // Noncompliant - trailing comma\n};\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar settings = {\n    ''foo''  : oof,\n    ''bar'' : rab\n};\n</pre>', 4, NULL, 'Trailing commas should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'cross-browser', 0, 'HTML'),
(87, 'Parentheses', NULL, 'javascript', '<p>Useless parentheses can sometimes be misleading and so should be removed. </p>\n<p>The following code snippet illustrates this rule:</p>\n<pre>\nreturn 3;             // Compliant\nreturn (x);           // Non-Compliant\nreturn (x + 1);       // Non-Compliant\nint x = (y / 2 + 1);  // Non-Compliant\nint y = (4+X) * y;    // Compliant\n</pre>', 2, NULL, 'Useless parentheses around expressions should be removed to prevent any misunderstanding', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'confusing', 0, 'HTML'),
(88, 'UnusedFunctionArgument', NULL, 'javascript', '<p>\n  Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething(a, b) { // "a" is unused\n  return compute(b);\n}\n</pre>\n\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(b) {\n  return compute(b);\n}\n</pre>\n\n\n\n<h2>Exceptions</h2>\n<p>\n  When writing function callbacks, some arguments might be required as part of the function signature, but not actually needed by the callback code.\n  For instance, JQuery has the ''each'' helper to iterate over arrays or objects, but using the counter ''i'' should remain optional:\n</p>\n<pre>\n$(["first", "last"]).each(function (i, value) {\n  computeSomethingWithValue(value);\n});\n</pre>\n<p>\n  So only unused arguments listed at the end of the argument list will be flagged with issues because they could be omitted from the function signature.\n  Unused arguments which are followed by an argument that _is_ used will be ignored.\n</p>\n<p>\n  Examples :\n</p>\n<pre>\nvar myFirsCallBackFunction = function (p1, p2, p3, p4) {  //unused p2 is not reported but p4 is\n                                              return p1 + p3; }\n\nvar mySecondCallBackFunction = function (p1, p2, p3, p4) {  //unused p1, p2 and p3 are not reported\n                                              return p4; }\n\nvar myThirdCallBackFunction = function (p1, p2, p3, p4) {  //unused p1 is not reported but p3 and p4 are\n                                              return p2; }\n</pre>\n<p>\n  Further, when <code>arguments</code> is used in the function body, no parameter is reported as unused.\n</p>\n<pre>\nfunction doSomething(a, b, c) {\n  compute(arguments);\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> MISRA C++:2008, 0-1-11</li>\n<li> MISRA C:2012, 2.7</li>\n</ul>', 2, NULL, 'Unused function parameters should be removed', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'misra,unused', 0, 'HTML'),
(89, 'StrictMode', NULL, 'javascript', '<p>\n  Even thought it may be a good practice to enforce JavaScript strict mode, doing so could result in unexpected behaviors on browsers that do not support it yet. Using this feature should therefore be done with caution and with full knowledge of the potential consequences on browsers that do not support it.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction strict() {\n  ''use strict'';\n}\n</pre>', 0, NULL, '"strict" mode should be used with caution', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'cross-browser,user-experience', 0, 'HTML'),
(90, 'S1067', NULL, 'javascript', '<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code> operators it contains.</p>\n<p>A single expression''s complexity should not become too high to keep the code readable.</p>', 2, NULL, 'Expressions should not be too complex', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(91, 'FunctionComplexity', NULL, 'javascript', '<p>The cyclomatic complexity of functions should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>', 2, NULL, 'Functions should not be too complex', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, 'brain-overload', 0, 'HTML'),
(92, 'S2769', NULL, 'javascript', '<p>\n  Once you''ve made a selection, you typically want to know whether it actually found anything. Since selectors always return an object (the set of selected DOM elements), the\n  best way to see whether your selection found anything is to test the returned object''s .length property.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( $( "div.foo" ) ) {  // Noncompliant\n  // this code always runs, even when the selector didn''t match any elements\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// Testing whether a selection contains elements.\nif ( $( "div.foo" ).length > 0) {\n  // this code only runs if elements were found\n  //  ...\n}\n</pre>', 3, NULL, 'Selection results should be tested with "length"', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'bug,jquery', 0, 'HTML'),
(93, 'S2870', NULL, 'javascript', '<p>\n  The <code>delete</code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete</code> operator can be used here too,\n  but if it is, a hole will be left in the array because the indexes/keys won''t be shifted to reflect the deletion.\n</p>\n\n<p>The proper method for removing an element at a certain index would be:</p>\n\n<ul>\n  <li><code>Array.prototype.splice</code> - add/remove elements from the the array</li>\n  <li><code>Array.prototype.pop</code> - add/remove elements from the end of the array</li>\n  <li><code>Array.prototype.shift</code> - add/remove elements from the beginning of the array</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar myArray = [''a'', ''b'', ''c'', ''d''];\n\ndelete myArray[2];  // Noncompliant. myArray => [''a'', ''b'', undefined, ''d'']\nconsole.log(myArray[2]); // expected value was ''d'' but output is undefined\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nvar myArray = [''a'', ''b'', ''c'', ''d''];\n\n// removes 1 element from index 2\nremoved = myArray.splice(2, 1);  // myArray => [''a'', ''b'', ''d'']\nconsole.log(myArray[2]); // outputs ''d''\n</pre>', 3, NULL, '"delete" should not be used on arrays', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'bug', 0, 'HTML'),
(94, 'DuplicatePropertyName', NULL, 'javascript', '<p>\n  JavaScript allows duplicate property names in object literals, but only the last instance of a duplicated property determines the actual value that will be used for it. Therefore, changing values of other occurrences of a duplicated property will have no effect and may cause misunderstandings and bugs.\n</p>\n\n<p>\n  What''s more, using duplicate property names will generate an error in JavaScript strict mode code.\n  The following code snippet illustrates this rule :\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar data = {\n  "key": "value",\n  "1": "value",\n  "key": "value", // Noncompliant - duplicate of "key"\n  ''key'': "value", // Noncompliant - duplicate of "key"\n  key: "value", // Noncompliant - duplicate of "key"\n  \\u006bey: "value", // Noncompliant - duplicate of "key"\n  "\\u006bey": "value", // Noncompliant - duplicate of "key"\n  "\\x6bey": "value", // Noncompliant - duplicate of "key"\n  1: "value" // Noncompliant - duplicate of "1"\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar data = {\n  "key": "value",\n  "1": "value",\n  "key2": "value",\n  ''key3'': "value",\n  key4: "value",\n  \\u006bey5: "value",\n  "\\u006bey6": "value",\n  "\\x6bey7": "value",\n  1b: "value"\n}\n</pre>', 3, NULL, 'Property names should not be duplicated within an object literal', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'bug,pitfall', 0, 'HTML'),
(95, 'FutureReservedWords', NULL, 'javascript', '<p>The following words may be used as keywords in future evolutions of the language, so using them as identifiers should be avoided to allow an easier adoption of those potential future versions:</p>\n<ul>\n<li> <code>await</code></li>\n<li> <code>class</code></li>\n<li> <code>const</code></li>\n<li> <code>enum</code></li>\n<li> <code>exports</code></li>\n<li> <code>extends</code></li>\n<li> <code>implements</code></li>\n<li> <code>import</code></li>\n<li> <code>interface</code></li>\n<li> <code>let</code></li>\n<li> <code>package</code></li>\n<li> <code>private</code></li>\n<li> <code>protected</code></li>\n<li> <code>public</code></li>\n<li> <code>static</code></li>\n<li> <code>super</code></li>\n<li> <code>yield</code></li>\n</ul>\n<p>Use of these words as identifiers would produce an error in JavaScript <code>strict</code> mode code.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar package = document.getElementsByName("foo"); // Noncompliant\nvar someData = { package: true };                 // Compliant, as it is not used as an identifier here\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nvar elements = document.getElementsByName("foo"); // Compliant\n</pre>', 3, NULL, '"future reserved words" should not be used as identifiers', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 8, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'lock-in,pitfall', 0, 'HTML'),
(96, 'Semicolon', NULL, 'javascript', '<p>In JavaScript, the semicolon (<code>;</code>) is optional as a statement separator, but omitting semicolons can be confusing, and lead to unexpected results because a semicolon is implicitly inserted at the end of each line.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction fun() {\n  return  // Noncompliant. '';'' implicitly inserted at end of line\n       5   // Noncompliant. '';'' implicitly inserted at end of line\n}\nprint(fun());  // prints "undefined", not "5"\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction fun() {\n  return 5;\n}\nprint(fun());\n</pre>', 1, NULL, 'Each statement should end with a semicolon', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(97, 'ForIn', NULL, 'javascript', '<p>The <code>for...in</code> in statement allows you to loop through the names of all of the properties of an object. Unfortunately, the list of properties includes all those properties that were inherited through the prototype chain. This has the bad side effect of serving up method functions when the interest is in data properties. Programs that don''t take this into account can fail.</p>\n<p>Therefore, the body of every <code>for...in</code> statement should be wrapped in an <code>if</code> statement that filters which properties are acted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfor (name in object) {\n    doSomething(name);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nfor (name in object) {\n  if (object.hasOwnProperty(name)) {\n    doSomething(name);\n  }\n}\n</pre>', 2, NULL, '"for...in" loops should filter properties before acting on them', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'bug', 0, 'HTML'),
(98, 'S1134', NULL, 'javascript', '<p>\n  <code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n</p>\n<p>\n  Sometimes the developer will not have the time or will simply forget to get back to that tag.\n  This rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction divide(numerator, denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>', 2, NULL, '"FIXME" tags should be handled', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, NULL, 0, 'HTML'),
(99, 'VariableDeclarationAfterUsage', NULL, 'javascript', '<p>One of the biggest sources of confusion for JavaScript beginners is scoping. The reason scoping is so confusing in JavaScript is because JavaScript looks like a C-family language but doesn''t act like one. C-family languages have block-level scope, meaning that when control enters a block, such as an <code>if</code> statement, new variables can be declared within that scope without affecting the outer scope. However, this is not the case in JavaScript.</p>\n<p>To minimize confusion as much as possible, variables should always be declared before they are used.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar x = 1;\n\nfunction fun(){\n  alert(x); // Noncompliant as x is declared later in the same scope\n  if(something) {\n    var x = 42; // Declaration in function scope (not block scope!) shadows global variable\n  }\n}\n\nfun(); // Unexpectedly alerts "undefined" instead of "1"\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nvar x = 1;\n\nfunction fun() {\n  print(x);\n  if (something) {\n    x = 42;\n  }\n}\n\nfun(); // Print "1"\n</pre>', 2, NULL, 'Variables should be declared before they are used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'pitfall', 0, 'HTML'),
(100, 'S1135', NULL, 'javascript', '<p>\n  <code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\n</p>\n<p>\n  Sometimes the developer will not have the time or will simply forget to get back to that tag.\n  This rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething() {\n  // TODO\n}\n</pre>', 0, NULL, '"TODO" tags should be handled', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, NULL, 0, 'HTML'),
(101, 'UnreachableCode', NULL, 'javascript', '<p>Jump statements (<code>return</code>, <code>break</code> and <code>continue</code>) and <code>throw</code> expressions move control flow out of the current code block. Typically, any statements in a block that come after a jump or <code>throw</code> are simply wasted keystrokes lying in wait to confuse the unwary. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfun(a) {\n  var i = 10;\n  return i + a;       // Noncompliant \n  i++;             // this is never executed\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nint fun(int a) {\n  int i = 10;\n  return i + a;\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C++:2008, 0-1-9 - There shall be no dead code</li>\n<li> MISRA C:2012, 2.2 - There shall be no dead code</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect or is never executed</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n</ul>', 2, NULL, 'Jump statements should not be followed by other statements', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'cert,cwe,misra,unused', 0, 'HTML'),
(102, 'S2770', NULL, 'javascript', '<p>\n  Deprecation is a warning that a method has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away from the aging,\n  soon-to-be-retired technology.\n</p>\n\n<p>This rule raises an issue when any of the following methods is used:</p>\n\n<ul>\n  <li><code>.andSelf()</code></li>\n  <li><code>.context</code></li>\n  <li><code>.die()</code></li>\n  <li><code>.error()</code></li>\n  <li><code>jQuery.boxModel</code></li>\n  <li><code>jQuery.browser</code></li>\n  <li><code>jQuery.sub()</code></li>\n  <li><code>jQuery.support</code></li>\n  <li><code>.live()</code></li>\n  <li><code>.load()</code></li>\n  <li><code>.selector</code></li>\n  <li><code>.size()</code></li>\n  <li><code>.toggle()</code></li>\n  <li><code>.unload()</code></li>\n</ul>', 2, NULL, 'Deprecated jQuery methods should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 11, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'jquery,obsolete', 0, 'HTML'),
(103, 'CommentedCode', NULL, 'javascript', '<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 2.4 - Sections of code should not be "commented out".</li>\n<li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments.</li>\n<li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments.</li>\n<li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out"</li>\n</ul>', 2, NULL, 'Sections of code should not be "commented out"', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'misra,unused', 0, 'HTML'),
(104, 'MultilineStringLiterals', NULL, 'javascript', '<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the beginning of each line can''t be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar myString = ''A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\''ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.'';  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nvar myString = ''A rather long string of English text, an error message '' +\n    ''actually that just keeps going and going -- an error '' +\n    ''message to make the Energizer bunny blush (right through '' +\n    ''those Schwarzenegger shades)! Where was I? Oh yes, '' +\n    ''you\\''ve got an error and all the extraneous whitespace is '' +\n    ''just gravy.  Have a nice day.'';\n</pre>', 2, NULL, 'Multiline string literals should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'bad-practice', 0, 'HTML'),
(105, 'BitwiseOperators', NULL, 'javascript', '<p>JavaScript does not have an integer type, but it does have bitwise operators <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, <code>~</code>, <code>&amp;</code>, <code>|</code>. These operators convert their operands from floating point values to integers and back, so they are not as efficient as in C or other languages. Further, they are rarely useful in browser applications, and the similarity to the logical operators can mask some programming errors.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (a &amp; b) { ... } // Noncompliant; &amp; used in error\nvar oppositeSigns = ((x ^ y) &lt; 0); // Noncompliant; there''s a clearer way to test for this\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (a &amp;&amp; b) { ... }\nvar oppositeSigns = false;\nif ( (x &lt; 0 &amp;&amp; y &gt; 0) || (x &gt; 0 &amp;&amp; y &lt; 0) ) {\n  oppositeSigns = true;\n}\n</pre>', 2, NULL, 'Bitwise operators should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'pitfall', 0, 'HTML'),
(106, 'SameNameForFunctionAndVariable', NULL, 'javascript', '<p>\n  Giving both a variable and a function with the same name in a single scope should be avoided. This usage is confusing and should be avoided because it will be unclear whether the named variable refers to the function or to something else.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar fun;\nfunction fun() {\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar fun = function fun() {\n}\n</pre>\n\n<p>\n  This rule is deprecated, use {rule:javascript:S2814} instead.\n</p>', 2, NULL, 'The same name should not be used to declare both a function and a variable in the same scope', 'DEPRECATED', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'brain-overload,pitfall', 0, 'HTML'),
(107, 'S104', NULL, 'javascript', '<p>\n  A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.</br>\n  Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.</br>\n  Those smaller files will not only be easier to understand but also probably easier to test.\n</p>', 2, NULL, 'Files should not have too many lines', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, 'brain-overload', 0, 'HTML'),
(108, 'S1442', NULL, 'javascript', '<p>alert(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(unexpectedCondition)\n{\n  alert("Unexpected Condition");\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code</li>\n</ul>', 2, NULL, '"alert(...)" should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'cwe,security,user-experience', 0, 'HTML'),
(109, 'S1145', NULL, 'javascript', '<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code> statements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n<li> An if statement was changed during debugging and that debug code has been committed.</li>\n<li> Some value was left unset.</li>\n<li> Some logic is not doing what the programmer thought it did.</li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (true) {  // Noncompliant\n  doSomething();\n}\n...\nif (false) {  // Noncompliant\n  doSomethingElse();\n}\n\nif (!options || options === true) { doThirdThing(); }  // Noncompliant; always true\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\ndoSomething();\n\ndoThirdThing();\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True</li>\n<li> MISRA C:2004, 13.7</li>\n<li> MISRA C:2012, 14.3</li>\n</ul>', 2, NULL, 'Useless "if(true) {...}" and "if(false){...}" blocks should be removed', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'bug,cwe,misra,security', 0, 'HTML'),
(110, 'WithStatement', NULL, 'javascript', '<p>\n  The use of the <code>with</code> keyword produces an error in JavaScript strict mode code. However, that''s not the worst that can be said against <code>with</code>.\n</p>\n<p>\n  Using <code>with</code> allows a short-hand access to an object''s properties - assuming they''re already set. But use <code>with</code> to access some property not already set in the object,\n  and suddenly you''re catapulted out of the object scope and into the global scope, creating or overwriting variables there. Since the effects of <code>with</code> are entirely\n  dependent on the object passed to it, <code>with</code> can be dangerously unpredictable, and should never be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = ''a'';\n\nvar foo = {\n  y: 1\n}\n\nwith (foo) {  // Noncompliant\n  y = 4;  // updates foo.x\n  x = 3;  // does NOT add a foo.x property; updates x var in outer scope\n}\nprint(foo.x + " " + x); // shows: undefined 3\n</pre>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = ''a'';\n\nvar foo = {\n  y: 1\n}\n\nfoo.y = 4;\nfoo.x = 3;\n\nprint(foo.x + " " + x); // shows: 3 a\n</pre>', 2, NULL, '"with" statements should not be used', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'bug', 0, 'HTML'),
(111, 'InsufficientCommentDensity', 'InsufficientCommentDensity', 'common-java', '<p>An issue is created on a file as soon as the comment density coverage on this file is less than the required threshold. It gives the number of comment lines to be written in order to reach the required threshold.</p>', 2, NULL, 'Insufficient comment density', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '3min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(112, 'DuplicatedBlocks', 'DuplicatedBlocks', 'common-java', '<p>An issue is created on a file as soon as there is a block of duplicated code on this file. It gives the number of blocks in the file.</p>', 2, NULL, 'Duplicated blocks', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 36, NULL, 'LINEAR', NULL, '1h', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(113, 'SkippedUnitTests', 'SkippedUnitTests', 'common-java', '<p>Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.</p>', 2, NULL, 'Skipped unit tests', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'LINEAR', NULL, '10min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(114, 'InsufficientLineCoverage', 'InsufficientLineCoverage', 'common-java', '<p>An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.</p>', 2, NULL, 'Insufficient line coverage by unit tests', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 47, NULL, 'LINEAR', NULL, '3min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(115, 'FailedUnitTests', 'FailedUnitTests', 'common-java', '<p>Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.</p>', 2, NULL, 'Failed unit tests', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 47, NULL, 'LINEAR', NULL, '1h', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(116, 'InsufficientBranchCoverage', 'InsufficientBranchCoverage', 'common-java', '<p>An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.</p>', 2, NULL, 'Insufficient branch coverage by unit tests', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 47, NULL, 'LINEAR', NULL, '10min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(117, 'NM_FIELD_NAMING_CONVENTION', 'NM_FIELD_NAMING_CONVENTION', 'findbugs', '<p>\n      Names of fields that are not final should be in mixed case \n      with a lowercase first letter and the first letters of subsequent words capitalized.\n      </p>', 2, NULL, 'Field names should start with a lower case letter', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(118, 'RV_NEGATING_RESULT_OF_COMPARETO', 'RV_NEGATING_RESULT_OF_COMPARETO', 'findbugs', '<p>This code negatives the return value of a compareTo or compare method. This is a questionable or bad \nprogramming practice, since if the return value is Integer.MIN_VALUE, negating the return value won''t \nnegate the sign of the result. You can achieve the same intended result by reversing the order of the \noperands rather than by negating the results.</p>', 1, NULL, 'Negating the result of compareTo()/compare()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(119, 'EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS', 'EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS', 'findbugs', '<p> This equals method is checking to see if the argument is some incompatible type\n(i.e., a class that is neither a supertype nor subtype of the class that defines\nthe equals method). For example, the Foo class might have an equals method\nthat looks like:\n\n<p><code><pre>\npublic boolean equals(Object o) {\n  if (o instanceof Foo)\n    return name.equals(((Foo)o).name);\n  else if (o instanceof String)\n    return name.equals(o);\n  else return false;\n</pre></code></p>\n\n<p>This is considered bad practice, as it makes it very hard to implement an equals method that\nis symmetric and transitive. Without those properties, very unexpected behavoirs are possible.\n</p>', 2, NULL, 'Bad practice - Equals checks for noncompatible operand', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(120, 'TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK', 'TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK', 'findbugs', '<p>\n      A value that is annotated as possibility being an instance of\n	the values denoted by the type qualifier, and the value is guaranteed to be used\n	in a way that prohibits values denoted by that type qualifier.\n      </p>', 3, NULL, 'Correctness - Value that might carry a type qualifier is always used in a way prohibits it from having that type qualifier', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5h', NULL, NULL, NULL, 0, 'HTML'),
(121, 'VA_FORMAT_STRING_BAD_ARGUMENT', 'VA_FORMAT_STRING_BAD_ARGUMENT', 'findbugs', '<p>\nThe format string placeholder is incompatible with the corresponding\nargument. For example,\n<code>\n  System.out.println("%d\\n", "hello");\n</code>\n<p>The %d placeholder requires a numeric argument, but a string value is\npassed instead. \nA runtime exception will occur when \nthis statement is executed.\n</p>', 3, NULL, 'Correctness - Format string placeholder incompatible with passed argument', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(122, 'UPM_UNCALLED_PRIVATE_METHOD', 'UPM_UNCALLED_PRIVATE_METHOD', 'findbugs', '<p> This private method is never called. Although it is\npossible that the method will be invoked through reflection,\nit is more likely that the method is never used, and should be\nremoved.\n</p>\n\n<p>\nThis rule is deprecated, use {rule:squid:UnusedPrivateMethod} instead.\n</p>', 3, NULL, 'Performance - Private method is never called', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(123, 'DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED', 'DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED', 'findbugs', '<p> A Thread object is passed as a parameter to a method where \na Runnable is expected. This is rather unusual, and may indicate a logic error\nor cause unexpected behavior.\n   </p>', 2, NULL, 'Dodgy - Thread passed where Runnable expected', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(124, 'BC_UNCONFIRMED_CAST_OF_RETURN_VALUE', 'BC_UNCONFIRMED_CAST_OF_RETURN_VALUE', 'findbugs', '<p>\nThis code performs an unchecked cast of the return value of a method.\nThe code might be calling the method in such a way that the cast is guaranteed to be\nsafe, but FindBugs is unable to verify that the cast is safe.  Check that your program logic ensures that this\ncast will not fail.\n</p>', 3, NULL, 'Unchecked/unconfirmed cast of return value from method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(125, 'VO_VOLATILE_REFERENCE_TO_ARRAY', 'VO_VOLATILE_REFERENCE_TO_ARRAY', 'findbugs', '<p>This declares a volatile reference to an array, which might not be what\nyou want. With a volatile reference to an array, reads and writes of\nthe reference to the array are treated as volatile, but the array elements\nare non-volatile. To get volatile array elements, you will need to use\none of the atomic array classes in java.util.concurrent (provided\nin Java 5.0).</p>', 2, NULL, 'Multithreaded correctness - A volatile reference to an array doesn''t treat the array elements as volatile', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(126, 'DM_NUMBER_CTOR', 'DM_NUMBER_CTOR', 'findbugs', '<p>\n      Using <code>new Integer(int)</code> is guaranteed to always result in a new object whereas\n      <code>Integer.valueOf(int)</code> allows caching of values to be done by the compiler, class library, or JVM.\n      Using of cached values avoids object allocation and the code will be faster.\n      </p>\n      <p>\n      Values between -128 and 127 are guaranteed to have corresponding cached instances\n      and using <code>valueOf</code> is approximately 3.5 times faster than using constructor.\n      For values outside the constant range the performance of both styles is the same.\n      </p>\n      <p>\n      Unless the class must be compatible with JVMs predating Java 1.5,\n      use either autoboxing or the <code>valueOf()</code> method when creating instances of\n      <code>Long</code>, <code>Integer</code>, <code>Short</code>, <code>Character</code>, and <code>Byte</code>.\n      </p>', 3, NULL, 'Performance - Method invokes inefficient Number constructor; use static valueOf instead', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(127, 'RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE', 'RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE', 'findbugs', '<p> This method contains a redundant check of a known null value against\nthe constant null.</p>', 3, NULL, 'Dodgy - Redundant nullcheck of value known to be null', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(128, 'IJU_TEARDOWN_NO_SUPER', 'IJU_TEARDOWN_NO_SUPER', 'findbugs', '<p> Class is a JUnit TestCase and implements the tearDown method. The tearDown method should call\nsuper.tearDown(), but doesn''t.</p>', 3, NULL, 'Correctness - TestCase defines tearDown that doesn''t call super.tearDown()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(129, 'DM_BOXED_PRIMITIVE_TOSTRING', 'DM_BOXED_PRIMITIVE_TOSTRING', 'findbugs', '<p>A boxed primitive is allocated just to call toString(). It is more effective to just use the static\n  form of toString which takes the primitive value. So,</p>\n  <table>\n     <tr><th>Replace...</th><th>With this...</th></tr>\n     <tr><td>new Integer(1).toString()</td><td>Integer.toString(1)</td></tr>\n     <tr><td>new Long(1).toString()</td><td>Long.toString(1)</td></tr>\n     <tr><td>new Float(1.0).toString()</td><td>Float.toString(1.0)</td></tr>\n     <tr><td>new Double(1.0).toString()</td><td>Double.toString(1.0)</td></tr>\n     <tr><td>new Byte(1).toString()</td><td>Byte.toString(1)</td></tr>\n     <tr><td>new Short(1).toString()</td><td>Short.toString(1)</td></tr>\n     <tr><td>new Boolean(true).toString()</td><td>Boolean.toString(true)</td></tr>\n  </table>', 2, NULL, 'Performance - Method allocates a boxed primitive just to call toString', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 29, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(130, 'NM_BAD_EQUAL', 'NM_BAD_EQUAL', 'findbugs', '<p>\n      This class defines a method <code>equal(Object)</code>.  \n      This method does not override the <code>equals(Object)</code> method \n      in <code>java.lang.Object</code>, which is probably what was intended.\n      </p>', 3, NULL, 'Class defines equal(Object); should it be equals(Object)?', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(131, 'IJU_SUITE_NOT_STATIC', 'IJU_SUITE_NOT_STATIC', 'findbugs', '<p> Class is a JUnit TestCase and implements the suite() method.\n The suite method should be declared as being static, but isn''t.</p>', 3, NULL, 'Correctness - TestCase implements a non-static suite method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(132, 'HE_HASHCODE_USE_OBJECT_EQUALS', 'HE_HASHCODE_USE_OBJECT_EQUALS', 'findbugs', '<p> This class defines a <code>hashCode()</code> method but inherits its\n  <code>equals()</code> method from <code>java.lang.Object</code>\n  (which defines equality by comparing object references).&nbsp; Although\n  this will probably satisfy the contract that equal objects must have\n  equal hashcodes, it is probably not what was intended by overriding\n  the <code>hashCode()</code> method.&nbsp; (Overriding <code>hashCode()</code>\n  implies that the object''s identity is based on criteria more complicated\n  than simple reference equality.)</p>\n<p>If you don''t think instances of this class will ever be inserted into a HashMap/HashTable,\nthe recommended <code>hashCode</code> implementation to use is:</p>\n<p><pre>public int hashCode() {\n  assert false : "hashCode not designed";\n  return 42; // any arbitrary constant will do\n  }</pre></p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1206} instead.\n</p>', 3, NULL, 'Bad practice - Class defines hashCode() and uses Object.equals()', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(133, 'IM_MULTIPLYING_RESULT_OF_IREM', 'IM_MULTIPLYING_RESULT_OF_IREM', 'findbugs', '<p>\nThe code multiplies the result of an integer remaining by an integer constant.\nBe sure you don''t have your operator precedence confused. For example\ni % 60 * 1000 is (i % 60) * 1000, not i % (60 * 1000).\n</p>', 3, NULL, 'Correctness - Integer multiply of result of integer remainder', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(134, 'SR_NOT_CHECKED', 'SR_NOT_CHECKED', 'findbugs', '<p> This method ignores the return value of\n  <code>java.io.InputStream.skip()</code> which can skip multiple bytes.&nbsp;\n  If the return value is not checked, the caller will not be able to correctly\n  handle the case where fewer bytes were skipped than the caller requested.&nbsp;\n  This is a particularly insidious kind of bug, because in many programs,\n  skips from input streams usually do skip the full amount of data requested,\n  causing the program to fail only sporadically. With Buffered streams, however,\n  skip() will only skip data in the buffer, and will routinely fail to skip the\n  requested number of bytes.</p>', 2, NULL, 'Bad practice - Method ignores results of InputStream.skip()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(135, 'DB_DUPLICATE_SWITCH_CLAUSES', 'DB_DUPLICATE_SWITCH_CLAUSES', 'findbugs', '<p>\n      This method uses the same code to implement two clauses of a switch statement.\n	This could be a case of duplicate code, but it might also indicate\n	a coding mistake.\n      </p>', 3, NULL, 'Dodgy - Method uses the same code for two switch clauses', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(136, 'NP_NULL_PARAM_DEREF_NONVIRTUAL', 'NP_NULL_PARAM_DEREF_NONVIRTUAL', 'findbugs', '<p>\n      A possibly-null value is passed to a nonnull method parameter.\n	Either the parameter is annotated as a parameter that should\n	always be nonnull, or analysis has shown that it will always be \n	dereferenced.\n      </p>', 3, NULL, 'Correctness - Non-virtual method call passes null for nonnull parameter', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(137, 'NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION', 'NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION', 'findbugs', '<p>\nA method should always implement the contract of a method it overrides. Thus, if a method takes a parameter\nthat is marked as @Nullable, you shouldn''t override that method in a subclass with a method where that parameter is @Nonnull.\nDoing so violates the contract that the method should handle a null parameter.\n</p>', 2, NULL, 'Method tightens nullness annotation on parameter', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(138, 'RV_RETURN_VALUE_IGNORED', 'RV_RETURN_VALUE_IGNORED', 'findbugs', '<p> The return value of this method should be checked. One common\ncause of this warning is to invoke a method on an immutable object,\nthinking that it updates the object. For example, in the following code\nfragment,</p>\n<blockquote>\n<pre>\nString dateString = getHeaderField(name);\ndateString.trim();\n</pre>\n</blockquote>\n<p>the programmer seems to be thinking that the trim() method will update\nthe String referenced by dateString. But since Strings are immutable, the trim()\nfunction returns a new String value, which is being ignored here. The code\nshould be corrected to: </p>\n<blockquote>\n<pre>\nString dateString = getHeaderField(name);\ndateString = dateString.trim();\n</pre>\n</blockquote>', 1, NULL, 'Correctness - Method ignores return value', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(139, 'RV_EXCEPTION_NOT_THROWN', 'RV_EXCEPTION_NOT_THROWN', 'findbugs', '<p> This code creates an exception (or error) object, but doesn''t do anything with it. For example,\nsomething like </p>\n<blockquote>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException("x must be nonnegative");\n</pre>\n</blockquote>\n<p>It was probably the intent of the programmer to throw the created exception:</p>\n<blockquote>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException("x must be nonnegative");\n</pre>\n</blockquote>', 3, NULL, 'Correctness - Exception created and dropped rather than thrown', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 40, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(140, 'DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED', 'DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED', 'findbugs', '<p> This code creates a classloader,  which requires a security manager.\n  If this code will be granted security permissions, but might be invoked by code that does not\n  have security permissions, then the classloader creation needs to occur inside a doPrivileged block.</p>', 2, NULL, 'Bad practice - Classloaders should only be created inside doPrivileged block', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(141, 'MS_SHOULD_BE_REFACTORED_TO_BE_FINAL', 'MS_SHOULD_BE_REFACTORED_TO_BE_FINAL', 'findbugs', '<p>\nThis static field public but not final, and\ncould be changed by malicious code or\nby accident from another package.\nThe field could be made final to avoid\nthis vulnerability. However, the static initializer contains more than one write\nto the field, so doing so will require some refactoring.\n</p>', 2, NULL, 'Field isn''t final but should be refactored to be so', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(142, 'DM_CONVERT_CASE', 'DM_CONVERT_CASE', 'findbugs', '<p> A String is being converted to upper or lowercase, using the platform''s default encoding. This may\n      result in improper conversions when used with international characters. Use the </p>\n      <table><tr><td>String.toUpperCase( Locale l )</td></tr><tr><td>String.toLowerCase( Locale l )</td></tr></table>\n      <p>versions instead.</p>', 0, NULL, 'Internationalization - Consider using Locale parameterized version of invoked method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 8, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(143, 'INT_VACUOUS_COMPARISON', 'INT_VACUOUS_COMPARISON', 'findbugs', '<p> There is an integer comparison that always returns\nthe same value (e.g., x &lt;= Integer.MAX_VALUE).\n</p>', 3, NULL, 'Dodgy - Vacuous comparison of integer value', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5h', NULL, NULL, NULL, 0, 'HTML'),
(144, 'MS_FINAL_PKGPROTECT', 'MS_FINAL_PKGPROTECT', 'findbugs', '<p>\n   A mutable static field could be changed by malicious code or\n        by accident from another package.\n        The field could be made package protected and/or made final\n   to avoid\n        this vulnerability.</p>', 2, NULL, 'Malicious code vulnerability - Field should be both final and package protected', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 18, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(145, 'PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS', 'PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS', 'findbugs', '<p>The entrySet() method is allowed to return a view of the underlying Map in which an <code>Iterator</code> \nand <code>Map.Entry</code>. This clever idea was used in several Map implementations, but introduces the possibility of\n nasty coding mistakes. If a map m returns such an iterator for an entrySet, then <code>c.addAll(m.entrySet())</code> will \n go badly wrong. All of the Map implementations in OpenJDK 1.7 have been rewritten to avoid this, you should to.</p>', 2, NULL, 'Don''t reuse entry objects in iterators', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(146, 'TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK', 'TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK', 'findbugs', '<p>\n      A value that is annotated as possibility not being an instance of\n	the values denoted by the type qualifier, and the value is guaranteed to be used\n	in a way that requires values denoted by that type qualifier.\n      </p>', 3, NULL, 'Correctness - Value that might not carry a type qualifier is always used in a way requires that type qualifier', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5h', NULL, NULL, NULL, 0, 'HTML'),
(147, 'DMI_RANDOM_USED_ONLY_ONCE', 'DMI_RANDOM_USED_ONLY_ONCE', 'findbugs', '<p> This code creates a java.util.Random object, uses it to generate one random number, and then discards\nthe Random object. This produces mediocre quality random numbers and is inefficient. \nIf possible, rewrite the code so that the Random object is created once and saved, and each time a new random number\nis required invoke a method on the existing Random object to obtain it.\n</p>\n\n<p>If it is important that the generated Random numbers not be guessable, you <em>must</em> not create a new Random for each random\nnumber; the values are too easily guessable. You should strongly consider using a java.security.SecureRandom instead\n(and avoid allocating a new SecureRandom for each random number needed).\n</p>', 3, NULL, 'Bad practice - Random object created and used only once', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(148, 'BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION', 'BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION', 'findbugs', '<p>A primitive boxed value constructed and then immediately converted into a different primitive type\n(e.g., <code>new Double(d).intValue()</code>). Just perform direct primitive coercion (e.g., <code>(int) d</code>).</p>', 2, NULL, 'Performance - Primitive value is boxed then unboxed to perform primitive coercion', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(149, 'BIT_SIGNED_CHECK_HIGH_BIT', 'BIT_SIGNED_CHECK_HIGH_BIT', 'findbugs', '<p> This method compares an expression such as\n<pre>((event.detail &amp; SWT.SELECTED) &gt; 0)</pre>.\nUsing bit arithmetic and then comparing with the greater than operator can\nlead to unexpected results (of course depending on the value of\nSWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate\nfor a bug. Even when SWT.SELECTED is not negative, it seems good practice\nto use ''!= 0'' instead of ''&gt; 0''.\n</p>\n<p>\n<em>Boris Bokowski</em>\n</p>', 3, NULL, 'Correctness - Check for sign of bitwise operation', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(150, 'RV_CHECK_FOR_POSITIVE_INDEXOF', 'RV_CHECK_FOR_POSITIVE_INDEXOF', 'findbugs', '<p> The method invokes String.indexOf and checks to see if the result is positive or non-positive.\n   It is much more typical to check to see if the result is negative or non-negative. It is\n   positive only if the substring checked for occurs at some place other than at the beginning of\n   the String.</p>', 1, NULL, 'Dodgy - Method checks to see if result of String.indexOf is positive', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(151, 'DMI_USELESS_SUBSTRING', 'DMI_USELESS_SUBSTRING', 'findbugs', '<p>\nThis code invokes substring(0) on a String, which returns the original value.\n</p>', 3, NULL, 'Dodgy - Invocation of substring(0), which returns the original value', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5h', NULL, NULL, NULL, 0, 'HTML'),
(152, 'DM_MONITOR_WAIT_ON_CONDITION', 'DM_MONITOR_WAIT_ON_CONDITION', 'findbugs', '<p>\n      This method calls <code>wait()</code> on a\n      <code>java.util.concurrent.locks.Condition</code> object.&nbsp;\n      Waiting for a <code>Condition</code> should be done using one of the <code>await()</code>\n      methods defined by the <code>Condition</code> interface.\n      </p>', 2, NULL, 'Multithreaded correctness - Monitor wait() called on Condition', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(153, 'NP_LOAD_OF_KNOWN_NULL_VALUE', 'NP_LOAD_OF_KNOWN_NULL_VALUE', 'findbugs', '<p> The variable referenced at this point is known to be null due to an earlier\n   check against null. Although this is valid, it might be a mistake (perhaps you\nintended to refer to a different variable, or perhaps the earlier check to see if the\nvariable is null should have been a check to see if it was nonnull).\n</p>', 3, NULL, 'Dodgy - Load of known null value', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(154, 'EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC', 'EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC', 'findbugs', '<p> This class defines an equals method that overrides an equals method in a superclass. Both equals methods\nmethods use <code>instanceof</code> in the determination of whether two objects are equal. This is fraught with peril,\nsince it is important that the equals method is symmetrical (in other words, <code>a.equals(b) == b.equals(a)</code>).\nIf B is a subtype of A, and A''s equals method checks that the argument is an instanceof A, and B''s equals method\nchecks that the argument is an instanceof B, it is quite likely that the equivalence relation defined by these\nmethods is not symmetric.\n</p>', 2, NULL, 'Correctness - equals method overrides equals in superclass and may not be symmetric', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(155, 'EC_UNRELATED_INTERFACES', 'EC_UNRELATED_INTERFACES', 'findbugs', '<p> This method calls equals(Object) on two references of unrelated\ninterface types, where neither is a subtype of the other,\nand there are no known non-abstract classes which implement both interfaces.\nTherefore, the objects being compared\nare unlikely to be members of the same class at runtime\n(unless some application classes were not analyzed, or dynamic class\nloading can occur at runtime).\nAccording to the contract of equals(),\nobjects of different\nclasses should always compare as unequal; therefore, according to the\ncontract defined by java.lang.Object.equals(Object),\nthe result of this comparison will always be false at runtime.\n</p>', 3, NULL, 'Correctness - Call to equals() comparing different interface types', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(156, 'DM_FP_NUMBER_CTOR', 'DM_FP_NUMBER_CTOR', 'findbugs', '<p>\n      Using <code>new Double(double)</code> is guaranteed to always result in a new object whereas\n      <code>Double.valueOf(double)</code> allows caching of values to be done by the compiler, class library, or JVM.\n      Using of cached values avoids object allocation and the code will be faster.\n      </p>\n      <p>\n      Unless the class must be compatible with JVMs predating Java 1.5,\n      use either autoboxing or the <code>valueOf()</code> method when creating instances of <code>Double</code> and <code>Float</code>.\n      </p>', 2, NULL, 'Performance - Method invokes inefficient floating-point Number constructor; use static valueOf instead', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(157, 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'SE_COMPARATOR_SHOULD_BE_SERIALIZABLE', 'findbugs', '<p> This class implements the <code>Comparator</code> interface. You\nshould consider whether or not it should also implement the <code>Serializable</code>\ninterface. If a comparator is used to construct an ordered collection\nsuch as a <code>TreeMap</code>, then the <code>TreeMap</code>\nwill be serializable only if the comparator is also serializable.\nAs most comparators have little or no state, making them serializable\nis generally easy and good defensive programming.\n</p>', 2, NULL, 'Bad practice - Comparator doesn''t implement Serializable', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(158, 'DE_MIGHT_IGNORE', 'DE_MIGHT_IGNORE', 'findbugs', '<p> This method might ignore an exception.&nbsp; In general, exceptions\n  should be handled or reported in some way, or they should be thrown\n  out of the method.</p>', 2, NULL, 'Bad practice - Method might ignore exception', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 40, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(159, 'DMI_BAD_MONTH', 'DMI_BAD_MONTH', 'findbugs', '<p>\nThis code passes a constant month\nvalue outside the expected range of 0..11 to a method.\n</p>', 3, NULL, 'Correctness - Bad constant value for month', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(160, 'FI_MISSING_SUPER_CALL', 'FI_MISSING_SUPER_CALL', 'findbugs', '<p> This <code>finalize()</code> method does not make a call to its\n  superclass''s <code>finalize()</code> method.&nbsp; So, any finalizer\n  actions defined for the superclass will not be performed.&nbsp;\n  Add a call to <code>super.finalize()</code>.</p>', 2, NULL, 'Bad practice - Finalizer does not call superclass finalizer', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(161, 'IJU_SETUP_NO_SUPER', 'IJU_SETUP_NO_SUPER', 'findbugs', '<p> Class is a JUnit TestCase and implements the setUp method. The setUp method should call\nsuper.setUp(), but doesn''t.</p>', 3, NULL, 'Correctness - TestCase defines setUp that doesn''t call super.setUp()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(162, 'CD_CIRCULAR_DEPENDENCY', 'CD_CIRCULAR_DEPENDENCY', 'findbugs', '<p>\n      This class has a circular dependency with other classes. This makes building these classes\n      difficult, as each is dependent on the other to build correctly. Consider using interfaces\n      to break the hard dependency.\n      </p>', 0, NULL, 'Experimental - Test for circular dependencies among classes', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '3h', NULL, NULL, NULL, 0, 'HTML'),
(163, 'SQL_BAD_PREPARED_STATEMENT_ACCESS', 'SQL_BAD_PREPARED_STATEMENT_ACCESS', 'findbugs', '<p> A call to a setXXX method of a prepared statement was made where the\nparameter index is 0. As parameter indexes start at index 1, this is always a mistake.</p>', 3, NULL, 'Correctness - Method attempts to access a prepared statement parameter with index 0', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(164, 'EQ_UNUSUAL', 'EQ_UNUSUAL', 'findbugs', '<p> This class doesn''t do any of the patterns we recognize for checking that the type of the argument \nis compatible with the type of the <code>this</code> object. There might not be anything wrong with\nthis code, but it is worth reviewing.\n</p>', 1, NULL, 'Dodgy - Unusual equals method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5h', NULL, NULL, NULL, 0, 'HTML'),
(165, 'SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS', 'SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS', 'findbugs', '<p> The field is marked as transient, but the class isn''t Serializable, so marking it as transient\nhas absolutely no effect. \nThis may be leftover marking from a previous version of the code in which the class was transient, or\nit may indicate a misunderstanding of how serialization works.\n</p>', 2, NULL, 'Dodgy - Transient field of class that isn''t Serializable.', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(166, 'HE_USE_OF_UNHASHABLE_CLASS', 'HE_USE_OF_UNHASHABLE_CLASS', 'findbugs', '<p> A class defines an equals(Object)  method but not a hashCode() method,\nand thus doesn''t fulfill the requirement that equal objects have equal hashCodes.\nAn instance of this class is used in a hash data structure, making the need to\nfix this problem of highest importance.', 3, NULL, 'Correctness - Use of class without a hashCode() method in a hashed data structure', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(167, 'TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK', 'TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK', 'findbugs', '<p>\n      A value is used in a way that requires it to be always be a value denoted by a type qualifier, but\n	there is an explicit annotation stating that it is not known where the value is required to have that type qualifier.\n	Either the usage or the annotation is incorrect.\n      </p>', 3, NULL, 'Correctness - Value required to have type qualifier, but marked as unknown', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(168, 'INT_BAD_COMPARISON_WITH_INT_VALUE', 'INT_BAD_COMPARISON_WITH_INT_VALUE', 'findbugs', '<p>This code compares an int value with a long constant that is outside the range of values that can\n be represented as an int value. This comparison is vacuous and possibily to be incorrect.</p>', 2, NULL, 'Bad comparison of int value with long constant', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(169, 'JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS', 'JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS', 'findbugs', '<p> The class is annotated with net.jcip.annotations.Immutable, and the rules for that annotation require\nthat all fields are final.\n   .</p>', 1, NULL, 'Bad practice - Fields of immutable classes should be final', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(170, 'EQ_SELF_USE_OBJECT', 'EQ_SELF_USE_OBJECT', 'findbugs', '<p> This class defines a covariant version of the <code>equals()</code>\n  method, but inherits the normal <code>equals(Object)</code> method\n  defined in the base <code>java.lang.Object</code> class.&nbsp;\n  The class should probably define a <code>boolean equals(Object)</code> method.\n  </p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1201} instead.\n</p>', 2, NULL, 'Correctness - Covariant equals() method defined, Object.equals(Object) inherited', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(171, 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE', 'findbugs', '<p> This method contains a redundant check of a known non-null value against\nthe constant null.</p>', 3, NULL, 'Dodgy - Redundant nullcheck of value known to be non-null', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(172, 'BC_IMPOSSIBLE_INSTANCEOF', 'BC_IMPOSSIBLE_INSTANCEOF', 'findbugs', '<p>\nThis instanceof test will always return false. Although this is safe, make sure it isn''t\nan indication of some misunderstanding or some other logic error.\n</p>', 3, NULL, 'Correctness - instanceof will always return false', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(173, 'SE_NONFINAL_SERIALVERSIONID', 'SE_NONFINAL_SERIALVERSIONID', 'findbugs', '<p> This class defines a <code>serialVersionUID</code> field that is not final.&nbsp;\n  The field should be made final\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>', 3, NULL, 'Bad practice - serialVersionUID isn''t final', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(174, 'EI_EXPOSE_REP2', 'EI_EXPOSE_REP2', 'findbugs', '<p> This code stores a reference to an externally mutable object into the\n  internal representation of the object.&nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.</p>', 2, NULL, 'Malicious code vulnerability - May expose internal representation by incorporating reference to mutable object', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 20, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(175, 'RV_REM_OF_RANDOM_INT', 'RV_REM_OF_RANDOM_INT', 'findbugs', '<p> This code generates a random signed integer and then computes\nthe remainder of that value modulo another value. Since the random\nnumber can be negative, the result of the remainder operation\ncan also be negative. Be sure this is intended, and strongly\nconsider using the Random.nextInt(int) method instead.\n</p>', 3, NULL, 'Dodgy - Remainder of 32-bit signed random integer', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5h', NULL, NULL, NULL, 0, 'HTML'),
(176, 'AM_CREATES_EMPTY_JAR_FILE_ENTRY', 'AM_CREATES_EMPTY_JAR_FILE_ENTRY', 'findbugs', '<p>The code calls <code>putNextEntry()</code>, immediately\nfollowed by a call to <code>closeEntry()</code>. This results\nin an empty JarFile entry. The contents of the entry\nshould be written to the JarFile between the calls to\n<code>putNextEntry()</code> and\n<code>closeEntry()</code>.</p>', 2, NULL, 'Bad practice - Creates an empty jar file entry', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(177, 'NP_NULL_PARAM_DEREF', 'NP_NULL_PARAM_DEREF', 'findbugs', '<p>\n      This method call passes a null value for a nonnull method parameter.\n	Either the parameter is annotated as a parameter that should\n	always be nonnull, or analysis has shown that it will always be \n	dereferenced.\n      </p>', 3, NULL, 'Correctness - Method call passes null for nonnull parameter', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(178, 'RV_RETURN_VALUE_IGNORED_INFERRED', 'RV_RETURN_VALUE_IGNORED_INFERRED', 'findbugs', '<p>This code calls a method and ignores the return value. The return value is the same type as the type the \nmethod is invoked on, and from our analysis it looks like the return value might be important (e.g., like \nignoring the return value of <code>String.toLowerCase()</code>).\n</p>\n<p>We are guessing that ignoring the return value might be a bad idea just from a simple analysis of the \nbody of the method. You can use a <code>@CheckReturnValue</code> annotation to instruct FindBugs as to whether \nignoring the return value of this method is important or acceptable.<p>\n<p>Please investigate this closely to decide whether it is OK to ignore the return value. </p>', 1, NULL, 'Method ignores return value, is this OK?', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(179, 'DM_STRING_CTOR', 'DM_STRING_CTOR', 'findbugs', '<p> Using the <code>java.lang.String(String)</code> constructor wastes memory\n  because the object so constructed will be functionally indistinguishable\n  from the <code>String</code> passed as a parameter.&nbsp; Just use the\n  argument <code>String</code> directly.</p>', 2, NULL, 'Performance - Method invokes inefficient new String(String) constructor', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(180, 'SE_NO_SERIALVERSIONID', 'SE_NO_SERIALVERSIONID', 'findbugs', '<p> This class implements the <code>Serializable</code> interface, but does\n  not define a <code>serialVersionUID</code> field.&nbsp;\n  A change as simple as adding a reference to a .class object\n    will add synthetic fields to the class,\n   which will unfortunately change the implicit\n   serialVersionUID (e.g., adding a reference to <code>String.class</code>\n   will generate a static field <code>class$java$lang$String</code>).\n   Also, different source code to bytecode compilers may use different\n   naming conventions for synthetic variables generated for\n   references to class objects or inner classes.\n   To ensure interoperability of Serializable across versions,\n   consider adding an explicit serialVersionUID.</p>', 2, NULL, 'Bad practice - Class is Serializable, but doesn''t define serialVersionUID', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 6, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(181, 'SE_BAD_FIELD_STORE', 'SE_BAD_FIELD_STORE', 'findbugs', '<p> A non-serializable value is stored into a non-transient field\nof a serializable class.</p>', 3, NULL, 'Bad practice - Non-serializable value stored into instance field of a serializable class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(182, 'SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION', 'SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION', 'findbugs', '<p> This class implements the <code>Externalizable</code> interface, but does\n  not define a void constructor. When Externalizable objects are deserialized,\n   they first need to be constructed by invoking the void\n   constructor. Since this class does not have one,\n   serialization and deserialization will fail at runtime.</p>', 2, NULL, 'Bad practice - Class is Externalizable but doesn''t define a void constructor', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(183, 'EC_UNRELATED_TYPES_USING_POINTER_EQUALITY', 'EC_UNRELATED_TYPES_USING_POINTER_EQUALITY', 'findbugs', '<p> This method uses using pointer equality to compare two references that seem to be of\ndifferent types.  The result of this comparison will always be false at runtime.\n</p>', 3, NULL, 'Correctness - Using pointer equality to compare different types', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(184, 'RU_INVOKE_RUN', 'RU_INVOKE_RUN', 'findbugs', '<p> This method explicitly invokes <code>run()</code> on an object.&nbsp;\n  In general, classes implement the <code>Runnable</code> interface because\n  they are going to have their <code>run()</code> method invoked in a new thread,\n  in which case <code>Thread.start()</code> is the right method to call.</p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1217} instead.\n</p>', 2, NULL, 'Multithreaded correctness - Invokes run on a thread (did you mean to start it instead?)', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(185, 'UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD', 'UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD', 'findbugs', '<p>This field is never used.  The field is public or protected, so perhaps it is intended to be used \nwith classes not seen as part of the analysis. If not, consider removing it from the class.</p>', 0, NULL, 'Unused public or protected field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(186, 'SQL_BAD_RESULTSET_ACCESS', 'SQL_BAD_RESULTSET_ACCESS', 'findbugs', '<p> A call to getXXX or updateXXX methods of a result set was made where the\nfield index is 0. As ResultSet fields start at index 1, this is always a mistake.</p>', 3, NULL, 'Correctness - Method attempts to access a result set field with index 0', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(187, 'BX_BOXING_IMMEDIATELY_UNBOXED', 'BX_BOXING_IMMEDIATELY_UNBOXED', 'findbugs', '<p>A primitive is boxed, and then immediately unboxed. This probably is due to a manual\n	boxing in a place where an unboxed value is required, thus forcing the compiler\nto immediately undo the work of the boxing.\n</p>', 2, NULL, 'Performance - Primitive value is boxed and then immediately unboxed', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(188, 'IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD', 'IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD', 'findbugs', '<p> A JUnit assertion is performed in a run method. Failed JUnit assertions\njust result in exceptions being thrown.\nThus, if this exception occurs in a thread other than the thread that invokes\nthe test method, the exception will terminate the thread but not result\nin the test failing.\n</p>', 3, NULL, 'Correctness - JUnit assertion in run method will not be noticed by JUnit', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(189, 'VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY', 'VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY', 'findbugs', '<p>\nOne of the arguments being formatted with a format string is an array. This will be formatted\nusing a fairly useless format, such as [I@304282, which doesn''t actually show the contents\nof the array.\nConsider wrapping the array using <code>Arrays.asList(...)</code> before handling it off to a formatted.\n</p>', 2, NULL, 'Correctness - Array formatted in useless way using format string', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(190, 'UI_INHERITANCE_UNSAFE_GETRESOURCE', 'UI_INHERITANCE_UNSAFE_GETRESOURCE', 'findbugs', '<p>Calling <code>this.getClass().getResource(...)</code> could give\nresults other than expected if this class is extended by a class in\nanother package.</p>', 2, NULL, 'Bad practice - Usage of GetResource may be unsafe if class is extended', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(191, 'SI_INSTANCE_BEFORE_FINALS_ASSIGNED', 'SI_INSTANCE_BEFORE_FINALS_ASSIGNED', 'findbugs', '<p> The class''s static initializer creates an instance of the class\nbefore all of the static final fields are assigned.</p>', 3, NULL, 'Bad practice - Static initializer creates instance before all static final fields assigned', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(192, 'RpC_REPEATED_CONDITIONAL_TEST', 'RpC_REPEATED_CONDITIONAL_TEST', 'findbugs', '<p>The code contains a conditional test is performed twice, one right after the other\n(e.g., <code>x == 0 || x == 0</code>). Perhaps the second occurrence is intended to be something else\n(e.g., <code>x == 0 || y == 0</code>). \n</p>', 2, NULL, 'Correctness - Repeated conditional tests', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(193, 'NP_SYNC_AND_NULL_CHECK_FIELD', 'NP_SYNC_AND_NULL_CHECK_FIELD', 'findbugs', '<p>Since the field is synchronized on, it seems not likely to be null.\nIf it is null and then synchronized on a NullPointerException will be\nthrown and the check would be pointless. Better to synchronize on \nanother field.</p>', 2, NULL, 'Multithreaded correctness - Synchronize and null check on the same field.', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(194, 'DLS_DEAD_LOCAL_STORE_IN_RETURN', 'DLS_DEAD_LOCAL_STORE_IN_RETURN', 'findbugs', '<p>\nThis statement assigns to a local variable in a return statement. This assignment \nhas effect. Please verify that this statement does the right thing.\n</p>', 3, NULL, 'Correctness - Useless assignment in return statement', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(195, 'HE_INHERITS_EQUALS_USE_HASHCODE', 'HE_INHERITS_EQUALS_USE_HASHCODE', 'findbugs', '<p> This class inherits <code>equals(Object)</code> from an abstract\n  superclass, and <code>hashCode()</code> from\n<code>java.lang.Object</code> (which returns\n  the identity hash code, an arbitrary value assigned to the object\n  by the VM).&nbsp; Therefore, the class is very likely to violate the\n  invariant that equal objects must have equal hashcodes.</p>\n\n  <p>If you don''t want to define a hashCode method, and/or don''t\n   believe the object will ever be put into a HashMap/Hashtable,\n   define the <code>hashCode()</code> method\n   to throw <code>UnsupportedOperationException</code>.</p>', 3, NULL, 'Bad practice - Class inherits equals() and uses Object.hashCode()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(196, 'RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION', 'RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION', 'findbugs', '<p>\nThe code here uses <code>File.separator</code> \nwhere a regular expression is required. This will fail on Windows\nplatforms, where the <code>File.separator</code> is a backslash, which is interpreted in a\nregular expression as an escape character. Amoung other options, you can just use\n<code>File.separatorChar==''\\\\'' &amp; "\\\\\\\\" : File.separator</code> instead of\n<code>File.separator</code>\n\n</p>', 3, NULL, 'Correctness - File.separator used for regular expression', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 9, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(197, 'WA_NOT_IN_LOOP', 'WA_NOT_IN_LOOP', 'findbugs', '<p> This method contains a call to <code>java.lang.Object.wait()</code>\n  which is not in a loop.&nbsp; If the monitor is used for multiple conditions,\n  the condition the caller intended to wait for might not be the one\n  that actually occurred.</p>', 3, NULL, 'Multithreaded correctness - Wait not in loop', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(198, 'OS_OPEN_STREAM_EXCEPTION_PATH', 'OS_OPEN_STREAM_EXCEPTION_PATH', 'findbugs', '<p> The method creates an IO stream object, does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nit on all possible exception paths out of the method.&nbsp;\nThis may result in a file descriptor leak.&nbsp; It is generally a good\nidea to use a <code>finally</code> block to ensure that streams are\nclosed.</p>', 3, NULL, 'Bad practice - Method may fail to close stream on exception', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 40, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(199, 'DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION', 'DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION', 'findbugs', '<p> Unless an annotation has itself been annotated with  @Retention(RetentionPolicy.RUNTIME), the annotation can''t be observed using reflection\n(e.g., by using the isAnnotationPresent method).\n   .</p>', 2, NULL, 'Correctness - Can''t use reflection to check for presence of annotation without runtime retention', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(200, 'NP_METHOD_RETURN_RELAXING_ANNOTATION', 'NP_METHOD_RETURN_RELAXING_ANNOTATION', 'findbugs', '<p>\nA method should always implement the contract of a method it overrides. Thus, if a method takes is annotated\nas returning a @Nonnull value,\nyou shouldn''t override that method in a subclass with a method annotated as returning a @Nullable or @CheckForNull value.\nDoing so violates the contract that the method shouldn''t return null.\n</p>', 2, NULL, 'Method relaxes nullness annotation on return value', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(201, 'NP_ALWAYS_NULL', 'NP_ALWAYS_NULL', 'findbugs', '<p> A null pointer is dereferenced here.&nbsp; This will lead to a\n<code>NullPointerException</code> when the code is executed.</p>', 3, NULL, 'Correctness - Null pointer dereference', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(202, 'STCAL_STATIC_CALENDAR_INSTANCE', 'STCAL_STATIC_CALENDAR_INSTANCE', 'findbugs', '<p>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multihtreaded use. \nSharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the\napplication. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see\nrandom ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions in sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate().</p>\n<p>You may also experience serialization problems.</p>\n<p>Using an instance field is recommended.</p>\n<p>For more information on this see <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6231579">Sun Bug #6231579</a>\nand <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6178997">Sun Bug #6178997</a>.</p>', 3, NULL, 'Multithreaded correctness - Static Calendar', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(203, 'UUF_UNUSED_FIELD', 'UUF_UNUSED_FIELD', 'findbugs', '<p> This field is never used.&nbsp; Consider removing it from the class.</p>', 2, NULL, 'Performance - Unused field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(204, 'NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH', 'NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH', 'findbugs', '<p>\n			  There is a statement or branch on an exception path\n				that if executed guarantees that\n			  a value is null at this point, and that \n			  value that is guaranteed to be dereferenced\n			  (except on forward paths involving runtime exceptions).\n			  </p>', 3, NULL, 'Correctness - Value is null and guaranteed to be dereferenced on exception path', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(205, 'IS_FIELD_NOT_GUARDED', 'IS_FIELD_NOT_GUARDED', 'findbugs', '<p> This field is annotated with net.jcip.annotations.GuardedBy, \nbut can be accessed in a way that seems to violate the annotation.</p>', 3, NULL, 'Multithreaded correctness - Field not guarded against concurrent access', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(206, 'HE_EQUALS_NO_HASHCODE', 'HE_EQUALS_NO_HASHCODE', 'findbugs', '<p> This class overrides <code>equals(Object)</code>, but does not\n  override <code>hashCode()</code>.&nbsp; Therefore, the class may violate the\n  invariant that equal objects must have equal hashcodes.</p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1206} instead.\n</p>', 2, NULL, 'Bad practice - Class defines equals() but not hashCode()', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(207, 'NP_CLONE_COULD_RETURN_NULL', 'NP_CLONE_COULD_RETURN_NULL', 'findbugs', '<p>\n	This clone method seems to return null in some circumstances, but clone is never\n	allowed to return a null value.  If you are convinced this path is unreachable, throw an AssertionError\n	instead.\n      </p>', 3, NULL, 'Bad practice - Clone method may return null', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(208, 'INT_BAD_COMPARISON_WITH_SIGNED_BYTE', 'INT_BAD_COMPARISON_WITH_SIGNED_BYTE', 'findbugs', '<p> Signed bytes can only have a value in the range -128 to 127. Comparing\na signed byte with a value outside that range is vacuous and likely to be incorrect.\nTo convert a signed byte <code>b</code> to an unsigned value in the range 0..255,\nuse <code>0xff &amp; b</code>\n</p>', 3, NULL, 'Correctness - Bad comparison of signed byte', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(209, 'NM_WRONG_PACKAGE', 'NM_WRONG_PACKAGE', 'findbugs', '<p> The method in the subclass doesn''t override a similar method in a superclass because the type of a parameter doesn''t exactly match\nthe type of the corresponding parameter in the superclass. For example, if you have:</p>\n\n<blockquote>\n<pre>\nimport alpha.Foo;\npublic class A {\n  public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\npublic class B extends A {\n  public int f(Foo x) { return 42; }\n}\n</pre>\n</blockquote>\n\n<p>The <code>f(Foo)</code> method defined in class <code>B</code> doesn''t\noverride the \n<code>f(Foo)</code> method defined in class <code>A</code>, because the argument\ntypes are <code>Foo</code>''s from different packages.\n</p>', 2, NULL, 'Correctness - Method doesn''t override method in superclass due to wrong package for parameter', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(210, 'UCF_USELESS_CONTROL_FLOW', 'UCF_USELESS_CONTROL_FLOW', 'findbugs', '<p> This method contains a useless control flow statement, where\ncontrol flow continues onto the same place regardless of whether or not\nthe branch is taken. For example,\nthis is caused by having an empty statement\nblock for an <code>if</code> statement:</p>\n<pre>\n    if (argv.length == 0) {\n	// TODO: handle this case\n	}\n</pre>', 3, NULL, 'Dodgy - Useless control flow', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5h', NULL, NULL, NULL, 0, 'HTML'),
(211, 'DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION', 'DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION', 'findbugs', '<p> If you want to remove all elements from a collection <code>c</code>, use <code>c.clear</code>,\nnot <code>c.removeAll(c)</code>.\n	</p>', 3, NULL, 'Correctness - Don''t use removeAll to clear a collection', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(212, 'NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT', 'NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT', 'findbugs', '<p>\n      This implementation of equals(Object) violates the contract defined\n      by java.lang.Object.equals() because it does not check for null\n      being passed as the argument.  All equals() methods should return\n      false if passed a null value.\n      </p>', 3, NULL, 'Bad practice - equals() method does not check for null argument', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(213, 'SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING', 'SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING', 'findbugs', '<p>The code creates an SQL prepared statement from a nonconstant String.\nIf unchecked, tainted data from a user is used in building this String, SQL injection could\nbe used to make the prepared statement do something unexpected and undesirable.\n</p>', 3, NULL, 'Security - A prepared statement is generated from a nonconstant String', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 20, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(214, 'ICAST_BAD_SHIFT_AMOUNT', 'ICAST_BAD_SHIFT_AMOUNT', 'findbugs', '<p>\nThe code performs an integer shift by a constant amount outside\nthe range 0..31.\nThe effect of this is to use the lower 5 bits of the integer\nvalue to decide how much to shift by. This probably isn''t want was expected,\nand it at least confusing.\n</p>', 3, NULL, 'Correctness - Integer shift by an amount not in the range 0..31', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(215, 'ICAST_IDIV_CAST_TO_DOUBLE', 'ICAST_IDIV_CAST_TO_DOUBLE', 'findbugs', '<p>\nThis code casts the result of an integer division operation to double or \nfloat.\nDoing division on integers truncates the result\nto the integer value closest to zero.  The fact that the result\nwas cast to double suggests that this precision should have been retained.\nWhat was probably meant was to cast one or both of the operands to\ndouble <em>before</em> performing the division.  Here is an example:\n</p>\n<blockquote>\n<pre>\nint x = 2;\nint y = 5;\n// Wrong: yields result 0.0\ndouble value1 =  x / y;\n\n// Right: yields result 0.4\ndouble value2 =  x / (double) y;\n</pre>\n</blockquote>', 3, NULL, 'Dodgy - int division result cast to double or float', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(216, 'SE_READ_RESOLVE_MUST_RETURN_OBJECT', 'SE_READ_RESOLVE_MUST_RETURN_OBJECT', 'findbugs', '<p> In order for the readResolve method to be recognized by the serialization\nmechanism, it must be declared to have a return type of Object.\n</p>', 2, NULL, 'Bad practice - The readResolve method must be declared with a return type of Object.', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(217, 'BOA_BADLY_OVERRIDDEN_ADAPTER', 'BOA_BADLY_OVERRIDDEN_ADAPTER', 'findbugs', '<p> This method overrides a method found in a parent class, where that class is an Adapter that implements\na listener defined in the java.awt.event or javax.swing.event package. As a result, this method will not\nget called when the event occurs.</p>', 3, NULL, 'Correctness - Class overrides a method implemented in super class Adapter wrongly', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(218, 'SIO_SUPERFLUOUS_INSTANCEOF', 'SIO_SUPERFLUOUS_INSTANCEOF', 'findbugs', '<p> Type check performed using the instanceof operator where it can be statically determined whether the object\nis of the type requested. </p>', 3, NULL, 'Correctness - Unnecessary type check done using instanceof operator', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(219, 'USM_USELESS_SUBCLASS_METHOD', 'USM_USELESS_SUBCLASS_METHOD', 'findbugs', '<p>\n      This derived method merely calls the same superclass method passing in the exact parameters\n      received. This method can be removed, as it provides no additional value.\n      </p>', 0, NULL, 'Experimental - Method superfluously delegates to parent class method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(220, 'WMI_WRONG_MAP_ITERATOR', 'WMI_WRONG_MAP_ITERATOR', 'findbugs', '<p> This method accesses the value of a Map entry, using a key that was retrieved from\na keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid the\nMap.get(key) lookup.</p>', 3, NULL, 'Performance - Inefficient use of keySet iterator instead of entrySet iterator', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(221, 'UCF_USELESS_CONTROL_FLOW_NEXT_LINE', 'UCF_USELESS_CONTROL_FLOW_NEXT_LINE', 'findbugs', '<p> This method contains a useless control flow statement in which control\nflow follows to the same or following line regardless of whether or not\nthe branch is taken.\nOften, this is caused by inadvertently using an empty statement as the\nbody of an <code>if</code> statement, e.g.:</p>\n<pre>\n    if (argv.length == 1);\n        System.out.println("Hello, " + argv[0]);\n</pre>', 3, NULL, 'Correctness - Useless control flow to next line', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(222, 'EI_EXPOSE_STATIC_REP2', 'EI_EXPOSE_STATIC_REP2', 'findbugs', '<p> This code stores a reference to an externally mutable object into a static\n   field.\n   If unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Storing a copy of the object is better approach in many situations.</p>', 2, NULL, 'Malicious code vulnerability - May expose internal static state by storing a mutable object into a static field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 20, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(223, 'NP_GUARANTEED_DEREF', 'NP_GUARANTEED_DEREF', 'findbugs', '<p>\n			  There is a statement or branch that if executed guarantees that\n			  a value is null at this point, and that \n			  value that is guaranteed to be dereferenced\n			  (except on forward paths involving runtime exceptions).\n			  </p>', 4, NULL, 'Correctness - Null value is guaranteed to be dereferenced', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(224, 'WA_AWAIT_NOT_IN_LOOP', 'WA_AWAIT_NOT_IN_LOOP', 'findbugs', '<p> This method contains a call to <code>java.util.concurrent.await()</code>\n   (or variants)\n  which is not in a loop.&nbsp; If the object is used for multiple conditions,\n  the condition the caller intended to wait for might not be the one\n  that actually occurred.</p>', 3, NULL, 'Multithreaded correctness - Condition.await() not in loop', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(225, 'NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER', 'NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER', 'findbugs', '<p>This identifier is used as a keyword in later versions of Java. This code, and \nany code that references this API, \nwill need to be changed in order to compile it in later versions of Java.</p>', 2, NULL, 'Bad practice - Use of member identifier that is a keyword in later versions of Java', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 6, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(226, 'SC_START_IN_CTOR', 'SC_START_IN_CTOR', 'findbugs', '<p> The constructor starts a thread. This is likely to be wrong if\n   the class is ever extended/subclassed, since the thread will be started\n   before the subclass constructor is started.</p>', 3, NULL, 'Multithreaded correctness - Constructor invokes Thread.start()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(227, 'PZLA_PREFER_ZERO_LENGTH_ARRAYS', 'PZLA_PREFER_ZERO_LENGTH_ARRAYS', 'findbugs', '<p> It is often a better design to\nreturn a length zero array rather than a null reference to indicate that there\nare no results (i.e., an empty list of results).\nThis way, no explicit check for null is needed by clients of the method.</p>\n\n<p>On the other hand, using null to indicate\n"there is no answer to this question" is probably appropriate.\nFor example, <code>File.listFiles()</code> returns an empty list\nif given a directory containing no files, and returns null if the file\nis not a directory.</p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1168} instead.\n</p>', 2, NULL, 'Dodgy - Consider returning a zero length array rather than null', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(228, 'DMI_INVOKING_HASHCODE_ON_ARRAY', 'DMI_INVOKING_HASHCODE_ON_ARRAY', 'findbugs', '<p>\nThe code invokes hashCode on an array. Calling hashCode on\nan array returns the same value as System.identityHashCode, and ingores\nthe contents and length of the array. If you need a hashCode that\ndepends on the contents of an array <code>a</code>, \nuse <code>java.util.Arrays.hashCode(a)</code>.\n\n</p>', 3, NULL, 'Correctness - Invocation of hashCode on an array', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(229, 'UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR', 'UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR', 'findbugs', '<p>This method is invoked in the constructor of of the superclass. At this point, the fields of the class have not yet initialized. To make this more concrete, consider the following classes:</p>\n<pre>\n  abstract class A {\n    int hashCode;\n    abstract Object getValue();\n    A() {\n      hashCode = getValue().hashCode();\n    }\n  }\n  class B extends A {\n    Object value;\n    B(Object v) {\n      this.value = v;\n    }\n    Object getValue() {\n      return value;\n    }\n  }\n</pre>\n<p>When a B is constructed, the constructor for the A class is invoked before the constructor for B sets value. Thus, when the constructor for A invokes getValue, an uninitialized value is read for value.</p>', 2, NULL, 'Correctness - Uninitialized read of field method called from constructor of superclass', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(230, 'SA_LOCAL_SELF_COMPUTATION', 'SA_LOCAL_SELF_COMPUTATION', 'findbugs', '<p> This method performs a nonsensical computation of a local variable with another\nreference to the same variable (e.g., x&x or x-x). Because of the nature\nof the computation, this operation doesn''t seem to make sense,\nand may indicate a typo or\na logic error.  Double check the computation.\n</p>', 3, NULL, 'Correctness - Nonsensical self computation involving a variable (e.g., x & x)', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(231, 'VA_FORMAT_STRING_ILLEGAL', 'VA_FORMAT_STRING_ILLEGAL', 'findbugs', '<p>\nThe format string is syntactically invalid, \nand a runtime exception will occur when \nthis statement is executed.\n</p>', 3, NULL, 'Correctness - Illegal format string', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(232, 'NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS', 'NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS', 'findbugs', '<p>\n      A possibly-null value is passed at a call site where all known\n      target methods require the parameter to be nonnull.\n	Either the parameter is annotated as a parameter that should\n	always be nonnull, or analysis has shown that it will always be \n	dereferenced.\n      </p>', 3, NULL, 'Correctness - Method call passes null for nonnull parameter (ALL_TARGETS_DANGEROUS)', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(233, 'FB_MISSING_EXPECTED_WARNING', 'FB_MISSING_EXPECTED_WARNING', 'findbugs', '<p>\n      FindBugs didn''t generate generated a warning that, according to a @ExpectedWarning annotated,\n      is expected or desired\n      </p>', 0, NULL, 'Experimental - Missing expected or desired warning from FindBugs', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(234, 'SE_READ_RESOLVE_IS_STATIC', 'SE_READ_RESOLVE_IS_STATIC', 'findbugs', '<p> In order for the readResolve method to be recognized by the serialization\nmechanism, it must not be declared as a static method.\n</p>', 2, NULL, 'Correctness - The readResolve method must not be declared as a static method.', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(235, 'RI_REDUNDANT_INTERFACES', 'RI_REDUNDANT_INTERFACES', 'findbugs', '<p>\n    This class declares that it implements an interface that is also implemented by a superclass.\n    This is redundant because once a superclass implements an interface, all subclasses by default also\n    implement this interface. It may point out that the inheritance hierarchy has changed since\n    this class was created, and consideration should be given to the ownership of\n    the interface''s implementation.\n    </p>', 2, NULL, 'Dodgy - Class implements same interface as superclass', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(236, 'MTIA_SUSPECT_SERVLET_INSTANCE_FIELD', 'MTIA_SUSPECT_SERVLET_INSTANCE_FIELD', 'findbugs', '<p>\n    This class extends from a Servlet class, and uses an instance member variable. Since only\n    one instance of a Servlet class is created by the J2EE framework, and used in a\n    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider\n    only using method local variables.\n    </p>', 3, NULL, 'Dodgy - Class extends Servlet class and uses instance variables', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(237, 'FI_FINALIZER_ONLY_NULLS_FIELDS', 'FI_FINALIZER_ONLY_NULLS_FIELDS', 'findbugs', '<p> This finalizer does nothing except null out fields. This is completely pointless, and requires that\nthe object be garbage collected, finalized, and then garbage collected again. You should just remove the finalize\nmethod.', 2, NULL, 'Bad practice - Finalizer only nulls fields', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(238, 'VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT', 'VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT', 'findbugs', '<p>\nThe format string specifies a relative index to request that the argument for the previous format specifier\nbe reused. However, there is no previous argument.\nFor example, \n</p>\n<p><code>formatter.format("%&lt;s %s", "a", "b")</code>\n</p>\n<p>would throw a MissingFormatArgumentException when executed.\n</p>', 3, NULL, 'Correctness - No previous argument for format string', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(239, 'OBL_UNSATISFIED_OBLIGATION', 'OBL_UNSATISFIED_OBLIGATION', 'findbugs', '<p>\n      This method may fail to clean up (close, dispose of) a stream,\n      database object, or other\n      resource requiring an explicit cleanup operation.\n      </p>\n      <p>\n      In general, if a method opens a stream or other resource,\n      the method should use a try/finally block to ensure that\n      the stream or resource is cleaned up before the method\n      returns.\n      </p>\n      <p>\n      This bug pattern is essentially the same as the\n      OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE\n      bug patterns, but is based on a different\n      (and hopefully better) static analysis technique.\n      We are interested is getting feedback about the\n      usefulness of this bug pattern.\n      To send feedback, either:\n      </p>\n      <ul>\n        <li>send email to findbugs@cs.umd.edu</li>\n        <li>file a bug report: <a href="http://findbugs.sourceforge.net/reportingBugs.html">http://findbugs.sourceforge.net/reportingBugs.html</a></li>\n      </ul>\n      <p>\n      In particular,\n      the false-positive suppression heuristics for this\n      bug pattern have not been extensively tuned, so\n      reports about false positives are helpful to us.\n      </p>\n      <p>\n      See Weimer and Necula, <i>Finding and Preventing Run-Time Error Handling Mistakes</i>, for\n      a description of the analysis technique.\n      </p>', 0, NULL, 'Experimental - Method may fail to clean up stream or resource', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '3h', NULL, NULL, NULL, 0, 'HTML'),
(240, 'USM_USELESS_ABSTRACT_METHOD', 'USM_USELESS_ABSTRACT_METHOD', 'findbugs', '<p>\n      This abstract method is already defined in an interface that is implemented by this abstract \n      class. This method can be removed, as it provides no additional value.\n      </p>', 0, NULL, 'Experimental - Abstract Method is already defined in implemented interface', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(241, 'DMI_UNSUPPORTED_METHOD', 'DMI_UNSUPPORTED_METHOD', 'findbugs', '<p>All targets of this method invocation throw an UnsupportedOperationException.\n</p>', 2, NULL, 'Dodgy - Call to unsupported method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(242, 'RV_01_TO_INT', 'RV_01_TO_INT', 'findbugs', '<p>A random value from 0 to 1 is being coerced to the integer value 0. You probably\nwant to multiple the random value by something else before coercing it to an integer, or use the <code>Random.nextInt(n)</code> method.\n</p>', 2, NULL, 'Correctness - Random value from 0 to 1 is coerced to the integer 0', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(243, 'IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD', 'IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD', 'findbugs', '<p> An inner class is invoking a method that could be resolved to either a inherited method or a method defined in an outer class. By the Java semantics,\nit will be resolved to invoke the inherited method, but this may not be want\nyou intend. If you really intend to invoke the inherited method,\ninvoke it by invoking the method on super (e.g., invoke super.foo(17)), and\nthus it will be clear to other readers of your code and to FindBugs\nthat you want to invoke the inherited method, not the method in the outer class.\n</p>', 2, NULL, 'Dodgy - Ambiguous invocation of either an inherited or outer method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(244, 'BIT_AND_ZZ', 'BIT_AND_ZZ', 'findbugs', '<p> This method compares an expression of the form (e &amp; 0) to 0,\nwhich will always compare equal.\nThis may indicate a logic error or typo.</p>', 3, NULL, 'Correctness - Check to see if ((...) & 0) == 0', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(245, 'DM_STRING_VOID_CTOR', 'DM_STRING_VOID_CTOR', 'findbugs', '<p> Creating a new <code>java.lang.String</code> object using the\n  no-argument constructor wastes memory because the object so created will\n  be functionally indistinguishable from the empty string constant\n  <code>""</code>.&nbsp; Java guarantees that identical string constants\n  will be represented by the same <code>String</code> object.&nbsp; Therefore,\n  you should just use the empty string constant directly.</p>', 2, NULL, 'Performance - Method invokes inefficient new String() constructor', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(246, 'UL_UNRELEASED_LOCK', 'UL_UNRELEASED_LOCK', 'findbugs', '<p> This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock,\nbut does not release it on all paths out of the method.  In general, the correct idiom\nfor using a JSR-166 lock is:\n</p>\n<pre>\n    Lock l = ...;\n    l.lock();\n    try {\n        // do something\n    } finally {\n        l.unlock();\n    }\n</pre>', 3, NULL, 'Multithreaded correctness - Method does not release lock on all paths', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(247, 'HRS_REQUEST_PARAMETER_TO_HTTP_HEADER', 'HRS_REQUEST_PARAMETER_TO_HTTP_HEADER', 'findbugs', '<p>This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP response splitting\nvulnerability. See <a href="http://en.wikipedia.org/wiki/HTTP_response_splitting">http://en.wikipedia.org/wiki/HTTP_response_splitting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of HTTP response splitting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more \nvulnerabilities that FindBugs doesn''t report. If you are concerned about HTTP response splitting, you should seriously \nconsider using a commercial static analysis or pen-testing tool.\n</p>', 2, NULL, 'Security - HTTP Response splitting vulnerability', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 20, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(248, 'CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE', 'CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE', 'findbugs', '<p> This class defines a clone() method but the class doesn''t implement Cloneable.\nThere are some situations in which this is OK (e.g., you want to control how subclasses \ncan clone themselves), but just make sure that this is what you intended.\n</p>', 2, NULL, 'Bad practice - Class defines clone() but doesn''t implement Cloneable', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(249, 'DL_SYNCHRONIZATION_ON_SHARED_CONSTANT', 'DL_SYNCHRONIZATION_ON_SHARED_CONSTANT', 'findbugs', '<p> The code synchronizes on interned String.\n<pre>\nprivate static String LOCK = "LOCK";\n...\n  synchronized(LOCK) { ...}\n...\n</pre>\n</p>\n<p>Constant Strings are interned and shared across all other classes loaded by the JVM. Thus, this could\nis locking on something that other code might also be locking. This could result in very strange and hard to diagnose\nblocking and deadlock behavior. See <a href="http://www.javalobby.org/java/forums/t96352.html">http://www.javalobby.org/java/forums/t96352.html</a> and <a href="http://jira.codehaus.org/browse/JETTY-352">http://jira.codehaus.org/browse/JETTY-352</a>.\n</p>', 3, NULL, 'Multithreaded correctness - Synchronization on interned String could lead to deadlock', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(250, 'MF_METHOD_MASKS_FIELD', 'MF_METHOD_MASKS_FIELD', 'findbugs', '<p> This method defines a local variable with the same name as a field\nin this class or a superclass.  This may cause the method to\nread an uninitialized value from the field, leave the field uninitialized,\nor both.</p>', 2, NULL, 'Correctness - Method defines a variable that obscures a field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(251, 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'findbugs', '<p>No writes were seen to this public/protected field.  All reads of it will return the default value. \nCheck for errors (should it have been initialized?), or remove it if it is useless.</p>', 1, NULL, 'Unwritten public or protected field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(252, 'SA_FIELD_SELF_COMPARISON', 'SA_FIELD_SELF_COMPARISON', 'findbugs', '<p> This method compares a field with itself, and may indicate a typo or\na logic error.  Make sure that you are comparing the right things.\n</p>', 3, NULL, 'Correctness - Self comparison of field with itself', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(253, 'SE_INNER_CLASS', 'SE_INNER_CLASS', 'findbugs', '<p> This Serializable class is an inner class.  Any attempt to serialize\nit will also serialize the associated outer instance. The outer instance is serializable,\nso this won''t fail, but it might serialize a lot more data than intended.\nIf possible, making the inner class a static inner class (also known as a nested class) should solve the \nproblem.', 2, NULL, 'Bad practice - Serializable inner class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(254, 'CI_CONFUSED_INHERITANCE', 'CI_CONFUSED_INHERITANCE', 'findbugs', '<p>\n      This class is declared to be final, but declares fields to be protected. Since the class\n      is final, it can not be derived from, and the use of protected is confusing. The access\n      modifier for the field should be changed to private or public to represent the true\n      use for the field.\n      </p>', 1, NULL, 'Dodgy - Class is final but declares protected field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(255, 'UWF_UNWRITTEN_FIELD', 'UWF_UNWRITTEN_FIELD', 'findbugs', '<p>This field is never written.  All reads of it will return the default value. Check for errors (should it have been initialized?), or remove it if it is useless.</p>', 1, NULL, 'Correctness - Unwritten field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(256, 'FI_USELESS', 'FI_USELESS', 'findbugs', '<p> The only thing this <code>finalize()</code> method does is call\n  the superclass''s <code>finalize()</code> method, making it\n  redundant.&nbsp; Delete it.</p>', 1, NULL, 'Bad practice - Finalizer does nothing but call superclass finalizer', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(257, 'NM_METHOD_CONSTRUCTOR_CONFUSION', 'NM_METHOD_CONSTRUCTOR_CONFUSION', 'findbugs', '<p> This regular method has the same name as the class it is defined in. It is likely that this was intended to be a constructor.\n      If it was intended to be a constructor, remove the declaration of a void return value.\n	If you had accidently defined this method, realized the mistake, defined a proper constructor\n	but can''t get rid of this method due to backwards compatibility, deprecate the method.\n</p>', 2, NULL, 'Correctness - Apparent method/constructor confusion', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(258, 'ML_SYNC_ON_UPDATED_FIELD', 'ML_SYNC_ON_UPDATED_FIELD', 'findbugs', '<p> This method synchronizes on an object\n   referenced from a mutable field.\n   This is unlikely to have useful semantics, since different\nthreads may be synchronizing on different objects.</p>', 2, NULL, 'Multithreaded correctness - Method synchronizes on an updated field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(259, 'FL_MATH_USING_FLOAT_PRECISION', 'FL_MATH_USING_FLOAT_PRECISION', 'findbugs', '<p>\n   The method performs math operations using floating point precision.\n   Floating point precision is very imprecise. For example,\n   16777216.0f + 1.0f = 16777216.0f. Consider using double math instead.</p>', 3, NULL, 'Correctness - Method performs math using floating point precision', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(260, 'VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED', 'VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED', 'findbugs', 'A method is called that expects a Java printf format string and a list of arguments. However, the format string doesn''t contain any format specifiers (e.g., %s) but does contain message format elements (e.g., {0}). It is likely that the code is supplying a MessageFormat string when a printf-style format string is required. At runtime, all of the arguments will be ignored and the format string will be returned exactly as provided without any formatting.', 2, NULL, 'Correctness - MessageFormat supplied where printf style format expected', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(261, 'DMI_NONSERIALIZABLE_OBJECT_WRITTEN', 'DMI_NONSERIALIZABLE_OBJECT_WRITTEN', 'findbugs', '<p>\nThis code seems to be passing a non-serializable object to the ObjectOutput.writeObject method.\nIf the object is, indeed, non-serializable, an error will result.\n</p>', 3, NULL, 'Dodgy - Non serializable object written to ObjectOutput', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(262, 'MTIA_SUSPECT_STRUTS_INSTANCE_FIELD', 'MTIA_SUSPECT_STRUTS_INSTANCE_FIELD', 'findbugs', '<p>\n    This class extends from a Struts Action class, and uses an instance member variable. Since only\n    one instance of a struts Action class is created by the Struts framework, and used in a\n    multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider\n    only using method local variables. Only instance fields that are written outside of a monitor\n    are reported. \n    </p>', 3, NULL, 'Dodgy - Class extends Struts Action class and uses instance variables', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(263, 'EQ_OTHER_USE_OBJECT', 'EQ_OTHER_USE_OBJECT', 'findbugs', '<p> This class defines an <code>equals()</code>\n  method, that doesn''t override the normal <code>equals(Object)</code> method\n  defined in the base <code>java.lang.Object</code> class.&nbsp;\n  The class should probably define a <code>boolean equals(Object)</code> method.\n  </p>', 2, NULL, 'Correctness - equals() method defined that doesn''t override Object.equals(Object)', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(264, 'DLS_DEAD_LOCAL_INCREMENT_IN_RETURN', 'DLS_DEAD_LOCAL_INCREMENT_IN_RETURN', 'findbugs', '<p>\nThis statement has a return such as <code>return x++;</code>.\nA postfix increment/decrement does not impact the value of the expression,\nso this increment/decrement has no effect.\nPlease verify that this statement does the right thing.\n</p>', 2, NULL, 'Useless increment in return statement', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(265, 'RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE', 'RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE', 'findbugs', '<p> This method contains a reference known to be non-null with another reference\nknown to be null.</p>', 3, NULL, 'Dodgy - Redundant comparison of non-null value to null', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(266, 'VA_FORMAT_STRING_USES_NEWLINE', 'VA_FORMAT_STRING_USES_NEWLINE', 'findbugs', '<p>This format string include a newline character (\\n). In format strings, it is generally preferable \nbetter to use %n, which will produce the platform-specific line separator.</p>', 2, NULL, 'Format string should use %n rather than \\n', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(267, 'MS_CANNOT_BE_FINAL', 'MS_CANNOT_BE_FINAL', 'findbugs', '<p>\n A mutable static field could be changed by malicious code or\n        by accident from another package.\n   Unfortunately, the way the field is used doesn''t allow\n   any easy fix to this problem.</p>', 2, NULL, 'Malicious code vulnerability - Field isn''t final and can''t be protected from malicious code', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 18, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(268, 'NP_STORE_INTO_NONNULL_FIELD', 'NP_STORE_INTO_NONNULL_FIELD', 'findbugs', '<p> A value that could be null is stored into a field that has been annotated as NonNull. </p>', 3, NULL, 'Correctness - Store of null value into field annotated NonNull', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(269, 'DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY', 'DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY', 'findbugs', '<p>\nThe code invokes toString on an (anonymous) array.  Calling toString on an array generates a fairly useless result\nsuch as [C@16f0472. Consider using Arrays.toString to convert the array into a readable\nString that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.\n</p>', 3, NULL, 'Correctness - Invocation of toString on an anonymous array', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(270, 'IM_BAD_CHECK_FOR_ODD', 'IM_BAD_CHECK_FOR_ODD', 'findbugs', '<p>\nThe code uses x % 2 == 1 to check to see if a value is odd, but this won''t work\nfor negative numbers (e.g., (-5) % 2 == -1). If this code is intending to check\nfor oddness, consider using x &amp; 1 == 1, or x % 2 != 0.\n</p>', 3, NULL, 'Dodgy - Check for oddness that won''t work for negative numbers', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(271, 'SP_SPIN_ON_FIELD', 'SP_SPIN_ON_FIELD', 'findbugs', '<p> This method spins in a loop which reads a field.&nbsp; The compiler\n  may legally hoist the read out of the loop, turning the code into an\n  infinite loop.&nbsp; The class should be changed so it uses proper\n  synchronization (including wait and notify calls).</p>', 2, NULL, 'Multithreaded correctness - Method spins on field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(272, 'IS2_INCONSISTENT_SYNC', 'IS2_INCONSISTENT_SYNC', 'findbugs', '<p> The fields of this class appear to be accessed inconsistently with respect\n  to synchronization.&nbsp; This bug report indicates that the bug pattern detector\n  judged that\n  </p>\n  <ol>\n  <li> The class contains a mix of locked and unlocked accesses,</li>\n  <li> At least one locked access was performed by one of the class''s own methods, and</li>\n  <li> The number of unsynchronized field accesses (reads and writes) was no more than\n       one third of all accesses, with writes being weighed twice as high as reads</li>\n  </ol>\n\n  <p> A typical bug matching this bug pattern is forgetting to synchronize\n  one of the methods in a class that is intended to be thread-safe.</p>\n\n  <p> You can select the nodes labeled "Unsynchronized access" to show the\n  code locations where the detector believed that a field was accessed\n  without synchronization.</p>\n\n  <p> Note that there are various sources of inaccuracy in this detector;\n  for example, the detector cannot statically detect all situations in which\n  a lock is held.&nbsp; Also, even when the detector is accurate in\n  distinguishing locked vs. unlocked accesses, the code in question may still\n  be correct.</p>', 3, NULL, 'Multithreaded correctness - Inconsistent synchronization', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(273, 'ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL', 'ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL', 'findbugs', '<p>\nThis code converts an int value to a double precision\nfloating point number and then\npassing the result to the Math.ceil() function, which rounds a double to\nthe next higher integer value. This operation should always be a no-op,\nsince the converting an integer to a double should give a number with no fractional part.\nIt is likely that the operation that generated the value to be passed\nto Math.ceil was intended to be performed using double precision\nfloating point arithmetic.\n</p>', 3, NULL, 'Correctness - int value cast to double and then passed to Math.ceil', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(274, 'ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH', 'ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH', 'findbugs', '<p> The method creates a database resource (such as a database connection\nor row set), does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nthe object on all exception paths out of the method.&nbsp; Failure to\nclose database resources on all paths out of a method may\nresult in poor performance, and could cause the application to\nhave problems communicating with the database.</p>', 3, NULL, 'Bad practice - Method may fail to close database resource on exception', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 40, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(275, 'CN_IDIOM', 'CN_IDIOM', 'findbugs', '<p>\n   Class implements Cloneable but does not define or\n   use the clone method.</p>', 2, NULL, 'Bad practice - Class implements Cloneable but does not define or use clone method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(276, 'DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS', 'DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS', 'findbugs', '<p>(<a href="http://java.sun.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor(int)">Javadoc</a>)\nA ScheduledThreadPoolExecutor with zero core threads will never execute anything; changes to the max pool size are ignored.\n</p>', 1, NULL, 'Correctness - Creation of ScheduledThreadPoolExecutor with zero core threads', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(277, 'GC_UNCHECKED_TYPE_IN_GENERIC_CALL', 'GC_UNCHECKED_TYPE_IN_GENERIC_CALL', 'findbugs', '<p> This call to a generic collection method passes an argument\n	while compile type Object where a specific type from\n	the generic type parameters is expected.\n	Thus, neither the standard Java type system nor static analysis\n	can provide useful information on whether the\n	object being passed as a parameter is of an appropriate type.\n	</p>', 3, NULL, 'Bad practice - Unchecked type in generic call', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(278, 'DL_SYNCHRONIZATION_ON_BOOLEAN', 'DL_SYNCHRONIZATION_ON_BOOLEAN', 'findbugs', '<p> The code synchronizes on a boxed primitive constant, such as an Boolean.\n<pre>\nprivate static Boolean inited = Boolean.FALSE;\n...\n  synchronized(inited) { \n    if (!inited) {\n       init();\n       inited = Boolean.TRUE;\n       }\n     }\n...\n</pre>\n</p>\n<p>Since there normally exist only two Boolean objects, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness\nand possible deadlock</p>', 3, NULL, 'Multithreaded correctness - Synchronization on Boolean could lead to deadlock', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(279, 'SW_SWING_METHODS_INVOKED_IN_SWING_THREAD', 'SW_SWING_METHODS_INVOKED_IN_SWING_THREAD', 'findbugs', '<p>(<a href="http://java.sun.com/developer/JDCTechTips/2003/tt1208.html#1">From JDC Tech Tip</a>): The Swing methods\nshow(), setVisible(), and pack() will create the associated peer for the frame.\nWith the creation of the peer, the system creates the event dispatch thread.\nThis makes things problematic because the event dispatch thread could be notifying\nlisteners while pack and validate are still processing. This situation could result in\ntwo threads going through the Swing component-based GUI -- it''s a serious flaw that\ncould result in deadlocks or other related threading issues. A pack call causes\ncomponents to be realized. As they are being realized (that is, not necessarily\nvisible), they could trigger listener notification on the event dispatch thread.</p>', 2, NULL, 'Bad practice - Certain swing methods needs to be invoked in Swing thread', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(280, 'SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW', 'SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW', 'findbugs', '<p>\n      A value stored in the previous switch case is ignored here due to a switch fall through to a place where an exception is thrown. \n      It is likely that you forgot to put a break or return at the end of the previous case.\n      </p>', 3, NULL, 'Dead store due to switch statement fall through to throw', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(281, 'NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE', 'NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE', 'findbugs', '<p>\nThe return value from a method is dereferenced without a null check,\nand the return value of that method is one that should generally be checked for null (which requires to use Findbugs annotations to express the developer''s intend).\nThis may lead to a <code>NullPointerException</code> when the code is executed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long getTime() {\n  return getDate().getTime();      // NullPointerException may occur\n}\n\n@CheckForNull                      // See javax.annotation.CheckForNull (JSR-305)\npublic Date getDate() { /* ... */ }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic long getTime() {\n  Date date = getDate();\n  if (date == null) {\n    throw new IllegalStateException("...");\n  }\n  return date.getTime();\n}\n\n@CheckForNull                      // See javax.annotation.CheckForNull (JSR-305)\npublic Date getDate() { /* ... */ }\n</pre>', 3, NULL, 'Dodgy - Possible null pointer dereference due to return value of called method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(282, 'DM_DEFAULT_ENCODING', 'DM_DEFAULT_ENCODING', 'findbugs', '<p>Found a call to a method which will perform a byte to String (or String to byte) conversion, \nand will assume that the default platform encoding is suitable. This will cause the application \nbehaviour to vary between platforms. Use an alternative API and specify a charset name or \nCharset object explicitly.</p>', 2, NULL, 'Reliance on default encoding', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 9, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(283, 'DC_DOUBLECHECK', 'DC_DOUBLECHECK', 'findbugs', '<p> This method may contain an instance of double-checked locking.&nbsp;\n  This idiom is not correct according to the semantics of the Java memory\n  model.&nbsp; For more information, see the web page\n  <a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html"\n  >http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a>.</p>', 2, NULL, 'Multithreaded correctness - Possible double check of field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(284, 'EC_BAD_ARRAY_COMPARE', 'EC_BAD_ARRAY_COMPARE', 'findbugs', '<p>\nThis method invokes the .equals(Object o) method on an array. Since arrays do not override the equals\nmethod of Object, calling equals on an array is the same as comparing their addresses. To compare the\ncontents of the arrays, use java.util.Arrays.equals(Object[], Object[]).\n</p>\n<p>\n  This rule is deprecated, use {rule:squid:S1294} instead.\n</p>', 3, NULL, 'Correctness - Invocation of equals() on an array, which is equivalent to ==', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(285, 'REC_CATCH_EXCEPTION', 'REC_CATCH_EXCEPTION', 'findbugs', '<p>\n  This method uses a try-catch block that catches Exception objects, but Exception is not\n  thrown within the try block, and RuntimeException is not explicitly caught.  It is a common bug pattern to\n  say try { ... } catch (Exception e) { something } as a shorthand for catching a number of types of exception\n  each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well,\n  masking potential bugs.\n  </p>', 2, NULL, 'Dodgy - Exception is caught when Exception is not thrown', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(286, 'TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED', 'TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED', 'findbugs', '<p>\n        A value specified as not carrying a type qualifier annotation is guaranteed\n        to be consumed in a location or locations requiring that the value does\n        carry that annotation.\n        </p>\n        \n        <p>\n        More precisely, a value annotated with a type qualifier specifying when=NEVER\n        is guaranteed to reach a use or uses where the same type qualifier specifies when=ALWAYS.\n        </p>\n\n        <p>\n        TODO: example\n        </p>', 3, NULL, 'Correctness - Value annotated as never carrying a type qualifier used where value carrying that qualifier is required', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(287, 'UR_UNINIT_READ', 'UR_UNINIT_READ', 'findbugs', '<p> This constructor reads a field which has not yet been assigned a value.&nbsp;\n  This is often caused when the programmer mistakenly uses the field instead\n  of one of the constructor''s parameters.</p>', 2, NULL, 'Correctness - Uninitialized read of field in constructor', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(288, 'DMI_VACUOUS_SELF_COLLECTION_CALL', 'DMI_VACUOUS_SELF_COLLECTION_CALL', 'findbugs', '<p> This call doesn''t make sense. For any collection <code>c</code>, calling <code>c.containsAll(c)</code> should\nalways be true, and <code>c.retainAll(c)</code> should have no effect.\n	</p>', 3, NULL, 'Correctness - Vacuous call to collections', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(289, 'DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR', 'DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR', 'findbugs', '<p>(<a href="http://java.sun.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html">Javadoc</a>)\nWhile ScheduledThreadPoolExecutor inherits from ThreadPoolExecutor, a few of the inherited tuning methods are not useful for it. In particular, because it acts as a fixed-sized pool using corePoolSize threads and an unbounded queue, adjustments to maximumPoolSize have no useful effect.\n	</p>', 1, NULL, 'Correctness - Futile attempt to change max pool size of ScheduledThreadPoolExecutor', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(290, 'BIT_AND', 'BIT_AND', 'findbugs', '<p> This method compares an expression of the form (e &amp; C) to D,\nwhich will always compare unequal\ndue to the specific values of constants C and D.\nThis may indicate a logic error or typo.</p>', 3, NULL, 'Correctness - Incompatible bit masks (BIT_AND)', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(291, 'DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES', 'DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES', 'findbugs', '<p> This call to a generic collection''s method would only make sense if a collection contained \nitself (e.g., if <code>s.contains(s)</code> were true). This is unlikely to be true and would cause\nproblems if it were true (such as the computation of the hash code resulting in infinite recursion).\nIt is likely that the wrong value is being passed as a parameter.\n	</p>', 3, NULL, 'Correctness - Collections should not contain themselves', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(292, 'OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE', 'OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE', 'findbugs', '<p>This method may fail to clean up (close, dispose of) a stream, database object, or other resource requiring an \nexplicit cleanup operation.<br/>In general, if a method opens a stream or other resource, the method should use a try/finally block to ensure \nthat the stream or resource is cleaned up before the method returns.<p/>\n<p>This bug pattern is essentially the same as the OS_OPEN_STREAM and ODR_OPEN_DATABASE_RESOURCE bug patterns, but is based on a different \n(and hopefully better) static analysis technique. See Weimer and Necula, Finding and Preventing Run-Time Error Handling Mistakes, for a \ndescription of the analysis technique. .</p>', 3, NULL, 'Method may fail to clean up stream or resource on checked exception', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 40, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(293, 'HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS', 'HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS', 'findbugs', '<p> A method, field or class declares a generic signature where a non-hashable class\nis used in context where a hashable class is required.\nA class that declares an equals method but inherits a hashCode() method\nfrom Object is unhashable, since it doesn''t fulfill the requirement that\nequal objects have equal hashCodes.\n</p>', 3, NULL, 'Correctness - Signature declares use of unhashable class in hashed construct', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(294, 'EC_NULL_ARG', 'EC_NULL_ARG', 'findbugs', '<p> This method calls equals(Object), passing a null value as\nthe argument. According to the contract of the equals() method,\nthis call should always return <code>false</code>.</p>', 3, NULL, 'Correctness - Call to equals() with null argument', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(295, 'TQ_UNKNOWN_VALUE_USED_WHERE_ALWAYS_STRICTLY_REQUIRED', 'TQ_UNKNOWN_VALUE_USED_WHERE_ALWAYS_STRICTLY_REQUIRED', 'findbugs', '<p>\nA value is being used in a way that requires the value be annotation with a type qualifier. The type qualifier is strict, so the tool rejects any values that do not have the appropriate annotation.\n</p>\n<p>\nTo coerce a value to have a strict annotation, define an identity function where the return value is annotated with the strict annotation. This is the only way to turn a non-annotated value into a value with a strict type qualifier annotation.\n</p>', 2, NULL, 'Value without a type qualifier used where a value is required to have that qualifier', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(296, 'NP_NONNULL_RETURN_VIOLATION', 'NP_NONNULL_RETURN_VIOLATION', 'findbugs', '<p>\n      This method may return a null value, but the method (or a superclass method\n      which it overrides) is declared to return @NonNull.\n      </p>', 3, NULL, 'Correctness - Method may return null, but is declared @NonNull', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(297, 'VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG', 'VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG', 'findbugs', '<p>\nThis code passes a primitive array to a function that takes a variable number of object arguments.\nThis creates an array of length one to hold the primitive array and passes it to the function.\n</p>', 3, NULL, 'Correctness - Primitive array passed to function expecting a variable number of object arguments', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5h', NULL, NULL, NULL, 0, 'HTML'),
(298, 'DLS_DEAD_LOCAL_STORE', 'DLS_DEAD_LOCAL_STORE', 'findbugs', '<p>\nThis instruction assigns a value to a local variable,\nbut the value is not read or used in any subsequent instruction.\nOften, this indicates an error, because the value computed is never\nused.\n</p>\n<p>\nNote that Sun''s javac compiler often generates dead stores for\nfinal local variables.  Because FindBugs is a bytecode-based tool,\nthere is no easy way to eliminate these false positives.\n</p>', 3, NULL, 'Dodgy - Dead store to local variable', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(299, 'HE_EQUALS_USE_HASHCODE', 'HE_EQUALS_USE_HASHCODE', 'findbugs', '<p> This class overrides <code>equals(Object)</code>, but does not\n  override <code>hashCode()</code>, and inherits the implementation of\n  <code>hashCode()</code> from <code>java.lang.Object</code> (which returns\n  the identity hash code, an arbitrary value assigned to the object\n  by the VM).&nbsp; Therefore, the class is very likely to violate the\n  invariant that equal objects must have equal hashcodes.</p>\n\n<p>If you don''t think instances of this class will ever be inserted into a HashMap/HashTable,\nthe recommended <code>hashCode</code> implementation to use is:</p>\n<pre>public int hashCode() {\n  assert false : "hashCode not designed";\n  return 42; // any arbitrary constant will do\n  }</pre>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1206} instead.\n</p>', 3, NULL, 'Bad practice - Class defines equals() and uses Object.hashCode()', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(300, 'RV_ABSOLUTE_VALUE_OF_RANDOM_INT', 'RV_ABSOLUTE_VALUE_OF_RANDOM_INT', 'findbugs', '<p> This code generates a random signed integer and then computes\nthe absolute value of that random integer.  If the number returned by the random number\ngenerator is <code>Integer.MIN_VALUE</code>, then the result will be negative as well (since \n<code>Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE</code>).\n</p>', 3, NULL, 'Correctness - Bad attempt to compute absolute value of signed 32-bit random integer', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(301, 'FE_FLOATING_POINT_EQUALITY', 'FE_FLOATING_POINT_EQUALITY', 'findbugs', '<p>\n    This operation compares two floating point values for equality.\n    Because floating point calculations may involve rounding,\n   calculated float and double values may not be accurate.\n    For values that must be precise, such as monetary values,\n   consider using a fixed-precision type such as BigDecimal.\n    For values that need not be precise, consider comparing for equality\n    within some range, for example:\n    <code>if ( Math.abs(x - y) &lt; .0000001 )</code>.\n   See the Java Language Specification, section 4.2.4.\n    </p>', 3, NULL, 'Dodgy - Test for floating point equality', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(302, 'NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'findbugs', '<p>\nThe field is marked as nonnull, but isn''t written to by the constructor.\nThe field might be initialized elsewhere during constructor, or might always\nbe initialized before use.\n</p>', 3, NULL, 'Nonnull field is not initialized', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, NULL, 0, 'HTML'),
(303, 'NM_SAME_SIMPLE_NAME_AS_INTERFACE', 'NM_SAME_SIMPLE_NAME_AS_INTERFACE', 'findbugs', '<p> This class/interface has a simple name that is identical to that of an implemented/extended interface, except\nthat the interface is in a different package (e.g., <code>alpha.Foo</code> extends <code>beta.Foo</code>). \nThis can be exceptionally confusing, create lots of situations in which you have to look at import statements\nto resolve references and creates many\nopportunities to accidently define methods that do not override methods in their superclasses.\n</p>', 2, NULL, 'Bad practice - Class names shouldn''t shadow simple name of implemented interface', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(304, 'WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL', 'WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL', 'findbugs', '<p>\n     This instance method synchronizes on <code>this.getClass()</code>. If this class is subclassed,\n     subclasses will synchronize on the class object for the subclass, which isn''t likely what was intended.\n     For example, consider this code from java.awt.Label:\n     <pre>\n     private static final String base = "label";\n     private static int nameCounter = 0;\n     String constructComponentName() {\n        synchronized (getClass()) {\n            return base + nameCounter++;\n        }\n     }\n     </pre></p>\n     <p>Subclasses of <code>Label</code> won''t synchronize on the same subclass, giving rise to a datarace.\n     Instead, this code should be synchronizing on <code>Label.class</code>\n      <pre>\n     private static final String base = "label";\n     private static int nameCounter = 0;\n     String constructComponentName() {\n        synchronized (Label.class) {\n            return base + nameCounter++;\n        }\n     }\n     </pre></p>\n      <p>Bug pattern contributed by Jason Mehrens</p>', 3, NULL, 'Multithreaded correctness - Sychronization on getClass rather than class literal', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(305, 'SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE', 'SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE', 'findbugs', '<p>The method invokes the execute method on an SQL statement with a String that seems\nto be dynamically generated. Consider using\na prepared statement instead. It is more efficient and less vulnerable to\nSQL injection attacks.\n</p>', 3, NULL, 'Security - Nonconstant string passed to execute method on an SQL statement', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 20, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(306, 'RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION', 'RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION', 'findbugs', '<p>\nThe code here uses a regular expression that is invalid according to the syntax\nfor regular expressions. This statement will throw a PatternSyntaxException when\nexecuted.\n</p>', 3, NULL, 'Correctness - Invalid syntax for regular expression', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(307, 'NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE', 'NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE', 'findbugs', '<p> This parameter is always used in a way that requires it to be nonnull,\nbut the parameter is explicitly annotated as being Nullable. Either the use\nof the parameter or the annotation is wrong.\n</p>', 3, NULL, 'Dodgy - Parameter must be nonnull but is marked as nullable', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(308, 'STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE', 'STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE', 'findbugs', '<p>Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multihtreaded use. \nThe detector has found a call to an instance of Calendar that has been obtained via a static\nfield. This looks suspicous.</p>\n<p>For more information on this see <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6231579">Sun Bug #6231579</a>\nand <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6178997">Sun Bug #6178997</a>.</p>', 3, NULL, 'Multithreaded correctness - Call to static Calendar', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(309, 'DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE', 'DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE', 'findbugs', '<p>This code creates a BigDecimal from a double value that doesn''t translate well to a decimal number. For example, \none might assume that writing <code>new BigDecimal(0.1)</code> in Java creates a BigDecimal which is exactly equal to 0.1 \n(an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. \nYou probably want to use the <code>BigDecimal.valueOf(double d)</code> method, which uses the String representation of the double to \ncreate the BigDecimal (e.g., <code>BigDecimal.valueOf(0.1)</code> gives 0.1).</p>', 2, NULL, 'BigDecimal constructed from double that isn''t represented precisely', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(310, 'INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE', 'INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE', 'findbugs', '<p> This code compares a value that is guaranteed to be non-negative with a negative constant.\n</p>', 3, NULL, 'Correctness - Bad comparison of nonnegative value with negative constant', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(311, 'IS_INCONSISTENT_SYNC', 'IS_INCONSISTENT_SYNC', 'findbugs', '<p> The fields of this class appear to be accessed inconsistently with respect\n  to synchronization.&nbsp; This bug report indicates that the bug pattern detector\n  judged that\n  </p>\n  <ol>\n  <li> The class contains a mix of locked and unlocked accesses,</li>\n  <li> At least one locked access was performed by one of the class''s own methods, and</li>\n  <li> The number of unsynchronized field accesses (reads and writes) was no more than\n       one third of all accesses, with writes being weighed twice as high as reads</li>\n  </ol>\n\n  <p> A typical bug matching this bug pattern is forgetting to synchronize\n  one of the methods in a class that is intended to be thread-safe.</p>\n\n  <p> Note that there are various sources of inaccuracy in this detector;\n  for example, the detector cannot statically detect all situations in which\n  a lock is held.&nbsp; Also, even when the detector is accurate in\n  distinguishing locked vs. unlocked accesses, the code in question may still\n  be correct.</p>', 2, NULL, 'Multithreaded correctness - Inconsistent synchronization', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(312, 'RV_REM_OF_HASHCODE', 'RV_REM_OF_HASHCODE', 'findbugs', '<p> This code computes a hashCode, and then computes\nthe remainder of that value modulo another value. Since the hashCode\ncan be negative, the result of the remainder operation\ncan also be negative. </p>\n<p> Assuming you want to ensure that the result of your computation is nonnegative,\nyou may need to change your code.\nIf you know the divisor is a power of 2,\nyou can use a bitwise and operator instead (i.e., instead of\nusing <code>x.hashCode()%n</code>, use <code>x.hashCode()&amp;(n-1)</code>. \nThis is probably faster than computing the remainder as well.\nIf you don''t know that the divisor is a power of 2, take the absolute\nvalue of the result of the remainder operation (i.e., use\n<code>Math.abs(x.hashCode()%n)</code>\n</p>', 3, NULL, 'Dodgy - Remainder of hashCode could be negative', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(313, 'LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE', 'LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE', 'findbugs', '<p>\n      OpenJDK introduces a potential incompatibility.\n      In particular, the java.util.logging.Logger behavior has\n      changed. Instead of using strong references, it now uses weak references\n      internally. That''s a reasonable change, but unfortunately some code relies on\n      the old behavior - when changing logger configuration, it simply drops the\n      logger reference. That means that the garbage collector is free to reclaim\n      that memory, which means that the logger configuration is lost. For example,\n      consider:\n      </p>\n      <p><pre>public static void initLogging() throws Exception {\n      Logger logger = Logger.getLogger("edu.umd.cs");\n      logger.addHandler(new FileHandler()); // call to change logger configuration\n      logger.setUseParentHandlers(false); // another call to change logger configuration\n      }</pre></p>\n      <p>The logger reference is lost at the end of the method (it doesn''t\n      escape the method), so if you have a garbage collection cycle just\n      after the call to initLogging, the logger configuration is lost\n      (because Logger only keeps weak references).</p>\n      <p><pre>public static void main(String[] args) throws Exception {\n      initLogging(); // adds a file handler to the logger\n      System.gc(); // logger configuration lost\n      Logger.getLogger("edu.umd.cs").info("Some message"); // this isn''t logged to the file as expected\n      }</pre></p>\n      <p><em>Ulf Ochsenfahrt and Eric Fellheimer</em>\n    </p>', 0, NULL, 'Experimental - Potential lost logger changes due to weak reference in OpenJDK', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 11, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(314, 'DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS', 'DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS', 'findbugs', '<p>The entrySet() method is allowed to return a view of the underlying Map in which a single Entry\n object is reused and returned during the iteration. As of Java 1.6, both IdentityHashMap and EnumMap\n did so. When iterating through such a Map, the Entry value is only valid until you advance to the \n next iteration. If, for example, you try to pass such an entrySet to an addAll method, things will \n go badly wrong.</p>', 2, NULL, 'Adding elements of an entry set may fail due to reuse of Entry objects', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(315, 'ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND', 'ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND', 'findbugs', '<p>\nThis code converts an int value to a float precision\nfloating point number and then\npassing the result to the Math.round() function, which returns the int/long closest\nto the argument. This operation should always be a no-op,\nsince the converting an integer to a float should give a number with no fractional part.\nIt is likely that the operation that generated the value to be passed\nto Math.round was intended to be performed using \nfloating point arithmetic.\n</p>', 3, NULL, 'Correctness - int value cast to float and then passed to Math.round', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(316, 'RV_ABSOLUTE_VALUE_OF_HASHCODE', 'RV_ABSOLUTE_VALUE_OF_HASHCODE', 'findbugs', '<p> This code generates a hashcode and then computes\nthe absolute value of that hashcode.  If the hashcode \nis <code>Integer.MIN_VALUE</code>, then the result will be negative as well (since \n<code>Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE</code>).\n</p>', 3, NULL, 'Correctness - Bad attempt to compute absolute value of signed 32-bit hashcode', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(317, 'DMI_CALLING_NEXT_FROM_HASNEXT', 'DMI_CALLING_NEXT_FROM_HASNEXT', 'findbugs', '<p>\nThe hasNext() method invokes the next() method. This is almost certainly wrong,\nsince the hasNext() method is not supposed to change the state of the iterator,\nand the next method is supposed to change the state of the iterator.\n</p>', 3, NULL, 'Correctness - hasNext method invokes next', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(318, 'NP_NULL_ON_SOME_PATH', 'NP_NULL_ON_SOME_PATH', 'findbugs', '<p> There is a branch of statement that, <em>if executed,</em>  guarantees that\na null value will be dereferenced, which\nwould generate a <code>NullPointerException</code> when the code is executed.\nOf course, the problem might be that the branch or statement is infeasible and that\nthe null pointer exception can''t ever be executed; deciding that is beyond the ability of FindBugs.\n</p>', 3, NULL, 'Correctness - Possible null pointer dereference', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(319, 'RS_READOBJECT_SYNC', 'RS_READOBJECT_SYNC', 'findbugs', '<p> This serializable class defines a <code>readObject()</code> which is\n  synchronized.&nbsp; By definition, an object created by deserialization\n  is only reachable by one thread, and thus there is no need for\n  <code>readObject()</code> to be synchronized.&nbsp; If the <code>readObject()</code>\n  method itself is causing the object to become visible to another thread,\n  that is an example of very dubious coding style.</p>', 3, NULL, 'Multithreaded correctness - Class''s readObject() method is synchronized', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(320, 'EC_INCOMPATIBLE_ARRAY_COMPARE', 'EC_INCOMPATIBLE_ARRAY_COMPARE', 'findbugs', 'This method invokes the .equals(Object o) to compare two arrays, but the arrays of of incompatible types (e.g., String[] and StringBuffer[], or String[] and int[]). They will never be equal. In addition, when equals(...) is used to compare arrays it only checks to see if they are the same array, and ignores the contents of the arrays.\n<p>\n  This rule is deprecated, use {rule:squid:S1294} instead.\n</p>', 4, NULL, 'Correctness - equals(...) used to compare incompatible arrays', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(321, 'BC_UNCONFIRMED_CAST', 'BC_UNCONFIRMED_CAST', 'findbugs', '<p>\nThis cast is unchecked, and not all instances of the type casted from can be cast to\nthe type it is being cast to. Ensure that your program logic ensures that this\ncast will not fail.\n</p>', 3, NULL, 'Dodgy - Unchecked/unconfirmed cast', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(322, 'EQ_GETCLASS_AND_CLASS_CONSTANT', 'EQ_GETCLASS_AND_CLASS_CONSTANT', 'findbugs', '<p> This class has an equals method that will be broken if it is inherited by subclasses.\nIt compares a class literal with the class of the argument (e.g., in class <code>Foo</code>\nit might check if <code>Foo.class == o.getClass()</code>).\nIt is better to check if <code>this.getClass() == o.getClass()</code>.\n</p>', 3, NULL, 'Bad practice - equals method fails for subtypes', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(323, 'SA_FIELD_DOUBLE_ASSIGNMENT', 'SA_FIELD_DOUBLE_ASSIGNMENT', 'findbugs', '<p> This method contains a double assignment of a field; e.g.\n</p>\n<pre>\n  int x,y;\n  public void foo() {\n    x = x = 17;\n  }\n</pre>\n<p>Assigning to a field twice is useless, and may indicate a logic error or typo.</p>', 3, NULL, 'Correctness - Double assignment of field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(324, 'VA_FORMAT_STRING_ARG_MISMATCH', 'VA_FORMAT_STRING_ARG_MISMATCH', 'findbugs', '<p>\nA format-string method with a variable number of arguments is called,\nbut the number of arguments passed does not match with the number of\n% placeholders in the format string.  This is probably not what the\nauthor intended.\n</p>', 3, NULL, 'Correctness - Number of format-string arguments does not correspond to number of placeholders', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(325, 'BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR', 'BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR', 'findbugs', '<p>A wrapped primitive value is unboxed and converted to another primitive type as part of the\nevaluation of a conditional ternary operator (the <code> b ? e1 : e2</code> operator). The\nsemantics of Java mandate that if <code>e1</code> and <code>e2</code> are wrapped\nnumeric values, the values are unboxed and converted/coerced to their common type (e.g,\nif <code>e1</code> is of type <code>Integer</code> \nand <code>e2</code> is of type <code>Float</code>, then <code>e1</code> is unboxed,\nconverted to a floating point value, and boxed. See JLS Section 15.25.\n</p>', 2, NULL, 'Correctness - Primitive value is unboxed and coerced for ternary operator', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5h', NULL, NULL, NULL, 0, 'HTML'),
(326, 'SF_SWITCH_FALLTHROUGH', 'SF_SWITCH_FALLTHROUGH', 'findbugs', '<p>\n      This method contains a switch statement where one case branch will fall\n      through to the next case. Usually you need to end this case with a break or return.\n      </p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S128} instead.\n</p>', 3, NULL, 'Switch statement found where one case falls through to the next case', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(327, 'DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT', 'DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT', 'findbugs', '<p> The Double.longBitsToDouble method is invoked, but a 32 bit int value is passed\n	as an argument. This almostly certainly is not intended and is unlikely \n	to give the intended result.\n</p>', 3, NULL, 'Correctness - Double.longBitsToDouble invoked on an int', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(328, 'IJU_NO_TESTS', 'IJU_NO_TESTS', 'findbugs', '<p> Class is a JUnit TestCase but has not implemented any test methods</p>', 3, NULL, 'Correctness - TestCase has no tests', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(329, 'RE_POSSIBLE_UNINTENDED_PATTERN', 'RE_POSSIBLE_UNINTENDED_PATTERN', 'findbugs', '<p>\nA String function is being invoked and "." is being passed\nto a parameter that takes a regular expression as an argument. Is this what you intended?\nFor example\ns.replaceAll(".", "/") will return a String in which <em>every</em>\ncharacter has been replaced by a / character.\n</p>', 3, NULL, 'Correctness - "." used for regular expression', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(330, 'SA_LOCAL_SELF_COMPARISON', 'SA_LOCAL_SELF_COMPARISON', 'findbugs', '<p> This method compares a local variable with itself, and may indicate a typo or\na logic error.  Make sure that you are comparing the right things.\n</p>', 3, NULL, 'Correctness - Self comparison of value with itself', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(331, 'IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION', 'IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION', 'findbugs', '<p> During the initialization of a class, the class makes an active use of a subclass.\nThat subclass will not yet be initialized at the time of this use.\nFor example, in the following code, <code>foo</code> will be null.</p>\n\n<pre>\npublic class CircularClassInitialization {\n	static class InnerClassSingleton extends CircularClassInitialization {\n		static InnerClassSingleton singleton = new InnerClassSingleton();\n	}\n	\n	static CircularClassInitialization foo = InnerClassSingleton.singleton;\n}\n</pre>', 2, NULL, 'Bad practice - Superclass uses subclass during initialization', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(332, 'UG_SYNC_SET_UNSYNC_GET', 'UG_SYNC_SET_UNSYNC_GET', 'findbugs', '<p> This class contains similarly-named get and set\n  methods where the set method is synchronized and the get method is not.&nbsp;\n  This may result in incorrect behavior at runtime, as callers of the get\n  method will not necessarily see a consistent state for the object.&nbsp;\n  The get method should be made synchronized.</p>', 2, NULL, 'Multithreaded correctness - Unsynchronized get method, synchronized set method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(333, 'BC_IMPOSSIBLE_DOWNCAST', 'BC_IMPOSSIBLE_DOWNCAST', 'findbugs', 'This cast will always throw a ClassCastException. The analysis believes it knows the precise type of the value being cast, and the attempt to downcast it to a subtype will always fail by throwing a ClassCastException.', 4, NULL, 'Correctness - Impossible downcast', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(334, 'SA_FIELD_SELF_COMPUTATION', 'SA_FIELD_SELF_COMPUTATION', 'findbugs', '<p> This method performs a nonsensical computation of a field with another\nreference to the same field (e.g., x&x or x-x). Because of the nature\nof the computation, this operation doesn''t seem to make sense,\nand may indicate a typo or\na logic error.  Double check the computation.\n</p>', 3, NULL, 'Correctness - Nonsensical self computation involving a field (e.g., x & x)', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(335, 'NO_NOTIFY_NOT_NOTIFYALL', 'NO_NOTIFY_NOT_NOTIFYALL', 'findbugs', '<p> This method calls <code>notify()</code> rather than <code>notifyAll()</code>.&nbsp;\n  Java monitors are often used for multiple conditions.&nbsp; Calling <code>notify()</code>\n  only wakes up one thread, meaning that the thread woken up might not be the\n  one waiting for the condition that the caller just satisfied.</p>', 3, NULL, 'Multithreaded correctness - Using notify() rather than notifyAll()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(336, 'BX_UNBOXING_IMMEDIATELY_REBOXED', 'BX_UNBOXING_IMMEDIATELY_REBOXED', 'findbugs', '<p>A boxed value is unboxed and then immediately reboxed.</p>', 2, NULL, 'Boxed value is unboxed and then immediately reboxed', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(337, 'SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH', 'SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH', 'findbugs', '<p>\n      A value stored in the previous switch case is overwritten here due \n      to a switch fall through. It is likely that you forgot to put a \n      break or return at the end of the previous case.\n      </p>', 3, NULL, 'Dead store due to switch statement fall through', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(338, 'EQ_COMPARETO_USE_OBJECT_EQUALS', 'EQ_COMPARETO_USE_OBJECT_EQUALS', 'findbugs', '<p> This class defines a <code>compareTo(...)</code> method but inherits its\n  <code>equals()</code> method from <code>java.lang.Object</code>.\n  Generally, the value of compareTo should return zero if and only if\n  equals returns true. If this is violated, weird and unpredictable\n  failures will occur in classes such as PriorityQueue.\n  In Java 5 the PriorityQueue.remove method uses the compareTo method,\n  while in Java 6 it uses the equals method.\n\n<p>From the JavaDoc for the compareTo method in the Comparable interface:\n<blockquote>\nIt is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.\nGenerally speaking, any class that implements the Comparable interface and violates this condition\nshould clearly indicate this fact. The recommended language\nis "Note: this class has a natural ordering that is inconsistent with equals."\n</blockquote>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1210} instead.\n</p>', 3, NULL, 'Bad practice - Class defines compareTo(...) and uses Object.equals()', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(339, 'LI_LAZY_INIT_UPDATE_STATIC', 'LI_LAZY_INIT_UPDATE_STATIC', 'findbugs', '<p> This method contains an unsynchronized lazy initialization of a static field.\nAfter the field is set, the object stored into that location is further accessed. \nThe setting of the field is visible to other threads as soon as it is set. If the\nfuther accesses in the method that set the field serve to initialize the object, then\nyou have a <em>very serious</em> multithreading bug, unless something else prevents\nany other thread from accessing the stored object until it is fully initialized.\n</p>', 3, NULL, 'Multithreaded correctness - Incorrect lazy initialization and update of static field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(340, 'SE_NONLONG_SERIALVERSIONID', 'SE_NONLONG_SERIALVERSIONID', 'findbugs', '<p> This class defines a <code>serialVersionUID</code> field that is not long.&nbsp;\n  The field should be made long\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>', 2, NULL, 'Bad practice - serialVersionUID isn''t long', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(341, 'ODR_OPEN_DATABASE_RESOURCE', 'ODR_OPEN_DATABASE_RESOURCE', 'findbugs', '<p> The method creates a database resource (such as a database connection\nor row set), does not assign it to any\nfields, pass it to other methods, or return it, and does not appear to close\nthe object on all paths out of the method.&nbsp; Failure to\nclose database resources on all paths out of a method may\nresult in poor performance, and could cause the application to\nhave problems communicating with the database.\n</p>', 3, NULL, 'Bad practice - Method may fail to close database resource', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(342, 'RC_REF_COMPARISON_BAD_PRACTICE', 'RC_REF_COMPARISON_BAD_PRACTICE', 'findbugs', 'This method compares a reference value to a constant using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method. It is possible to create distinct instances that are equal but do not compare as == since they are different objects. Examples of classes which should generally not be compared by reference are java.lang.Integer, java.lang.Float, etc.', 2, NULL, 'Correctness - Suspicious reference comparison to constant', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(343, 'NM_LCASE_HASHCODE', 'NM_LCASE_HASHCODE', 'findbugs', '<p>\n      This class defines a method called <code>hashcode()</code>.\n      This method does not override the <code>hashCode()</code>\n      method in <code>java.lang.Object</code>, which is probably what was intended.\n      </p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1221} instead.\n</p>', 3, NULL, 'Class defines hashcode(); should it be hashCode()?', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(344, 'XSS_REQUEST_PARAMETER_TO_JSP_WRITER', 'XSS_REQUEST_PARAMETER_TO_JSP_WRITER', 'findbugs', '<p>This code directly writes an HTTP parameter to JSP output, which allows for a cross site scripting\nvulnerability. See <a href="http://en.wikipedia.org/wiki/Cross-site_scripting">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that FindBugs doesn''t report. If you are concerned about cross site scripting, you should seriously \nconsider using a commercial static analysis or pen-testing tool.\n</p>', 3, NULL, 'Security - JSP reflected cross site scripting vulnerability', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 20, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '3h', NULL, NULL, NULL, 0, 'HTML'),
(345, 'ITA_INEFFICIENT_TO_ARRAY', 'ITA_INEFFICIENT_TO_ARRAY', 'findbugs', '<p> This method uses the toArray() method of a collection derived class, and passes\nin a zero-length prototype array argument.  It is more efficient to use\n<code>myCollection.toArray(new Foo[myCollection.size()])</code>\nIf the array passed in is big enough to store all of the\nelements of the collection, then it is populated and returned\ndirectly. This avoids the need to create a second array\n(by reflection) to return as the result.</p>', 3, NULL, 'Performance - Method uses toArray() with zero-length array argument', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(346, 'SIC_INNER_SHOULD_BE_STATIC', 'SIC_INNER_SHOULD_BE_STATIC', 'findbugs', '<p> This class is an inner class, but does not use its embedded reference\n  to the object which created it.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n   made static.\n</p>', 2, NULL, 'Performance - Should be a static inner class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 29, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(347, 'ES_COMPARING_PARAMETER_STRING_WITH_EQ', 'ES_COMPARING_PARAMETER_STRING_WITH_EQ', 'findbugs', '<p>This code compares a <code>java.lang.String</code> parameter for reference\nequality using the == or != operators. Requiring callers to \npass only String constants or interned strings to a method is unnecessarily\nfragile, and rarely leads to measurable performance gains. Consider\nusing the <code>equals(Object)</code> method instead.</p>', 2, NULL, 'Bad practice - Comparison of String parameter using == or !=', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(348, 'IL_CONTAINER_ADDED_TO_ITSELF', 'IL_CONTAINER_ADDED_TO_ITSELF', 'findbugs', '<p>A collection is added to itself. As a result, computing the hashCode of this\nset will throw a StackOverflowException.\n</p>', 3, NULL, 'Correctness - A collection is added to itself', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(349, 'VA_FORMAT_STRING_BAD_CONVERSION', 'VA_FORMAT_STRING_BAD_CONVERSION', 'findbugs', '<p>\nOne of the arguments is uncompatible with the corresponding format string specifier.\nAs a result, this will generate a runtime exception when executed.\nFor example, <code>String.format("%d", "1")</code> will generate an exception, since\nthe String "1" is incompatible with the format specifier %d.\n</p>', 3, NULL, 'Correctness - The type of a supplied argument doesn''t match format specifier', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(350, 'IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN', 'IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN', 'findbugs', '<p>\nThe initial value of this parameter is ignored, and the parameter\nis overwritten here. This often indicates a mistaken belief that\nthe write to the parameter will be conveyed back to\nthe caller.\n</p>', 3, NULL, 'Correctness - A parameter is dead upon entry to a method but overwritten', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(351, 'CO_SELF_NO_OBJECT', 'CO_SELF_NO_OBJECT', 'findbugs', '<p> This class defines a covariant version of <code>compareTo()</code>.&nbsp;\n  To correctly override the <code>compareTo()</code> method in the\n  <code>Comparable</code> interface, the parameter of <code>compareTo()</code>\n  must have type <code>java.lang.Object</code>.</p>', 2, NULL, 'Bad practice - Covariant compareTo() method defined', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(352, 'MS_MUTABLE_ARRAY', 'MS_MUTABLE_ARRAY', 'findbugs', '<p> A final static field references an array\n   and can be accessed by malicious code or\n        by accident from another package.\n   This code can freely modify the contents of the array.</p>', 2, NULL, 'Malicious code vulnerability - Field is a mutable array', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 18, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(353, 'UW_UNCOND_WAIT', 'UW_UNCOND_WAIT', 'findbugs', '<p> This method contains a call to <code>java.lang.Object.wait()</code> which\n  is not guarded by conditional control flow.&nbsp; The code should\n	verify that condition it intends to wait for is not already satisfied\n	before calling wait; any previous notifications will be ignored.\n  </p>', 2, NULL, 'Multithreaded correctness - Unconditional wait', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(354, 'VO_VOLATILE_INCREMENT', 'VO_VOLATILE_INCREMENT', 'findbugs', '<p>This code increments a volatile field. Increments of volatile fields aren''t atomic. If more \nthan one thread is incrementing the field at the same time, increments could be lost. </p>', 3, NULL, 'An increment to a volatile field isn''t atomic', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(355, 'DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD', 'DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD', 'findbugs', '<p>This instruction assigns a value to a local variable, but the value is not read or used in \nany subsequent instruction. Often, this indicates an error, because the value computed is never \nused. There is a field with the same name as the local variable. Did you mean to assign to that \nvariable instead?</p>', 2, NULL, 'Dead store to local variable that shadows field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(356, 'CO_COMPARETO_RESULTS_MIN_VALUE', 'CO_COMPARETO_RESULTS_MIN_VALUE', 'findbugs', '<p>In some situation, this compareTo or compare method returns the constant Integer.MIN_VALUE, \nwhich is an exceptionally bad practice. The only thing that matters about the return value of \ncompareTo is the sign of the result. But people will sometimes negate the return value of compareTo, \nexpecting that this will negate the sign of the result. And it will, except in the case where \nthe value returned is Integer.MIN_VALUE. So just return -1 rather than Integer.MIN_VALUE.</p>', 2, NULL, 'compareTo()/compare() returns Integer.MIN_VALUE', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(357, 'UOE_USE_OBJECT_EQUALS', 'UOE_USE_OBJECT_EQUALS', 'findbugs', '<p>\n      This method invokes the .equals(Object o) method on a final class that doesn''t override the equals method\n      in the Object class, effectively making the equals method test for sameness, like ==. It is good to use\n      the .equals method, but you should consider adding an .equals method in this class.\n      </p>\n      <p>[Bill Pugh]: Sorry, but I strongly disagree that this should be a warning, and I think your code\n      is just fine. Users of your code shouldn''t care how you''ve implemented equals(), and they should never\n      depend on == to compare instances, since that bypasses the libraries ability to control how objects\n      are compared.\n      </p>', 0, NULL, 'Experimental - Calls to equals on a final class that doesn''t override Object''s equals method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '3h', NULL, NULL, NULL, 0, 'HTML'),
(358, 'DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE', 'DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE', 'findbugs', '<p> The code synchronizes on an apparently unshared boxed primitive, \nsuch as an Integer.\n<pre>\nprivate static final Integer fileLock = new Integer(1);\n...\n  synchronized(fileLock) { \n     .. do something ..\n     }\n...\n</pre>\n</p>\n<p>It would be much better, in this code, to redeclare fileLock as\n<pre>\nprivate static final Object fileLock = new Object();\n</pre>\nThe existing code might be OK, but it is confusing and a \nfuture refactoring, such as the "Remove Boxing" refactoring in IntelliJ,\nmight replace this with the use of an interned Integer object shared \nthroughout the JVM, leading to very confusing behavior and potential deadlock.\n</p>', 3, NULL, 'Multithreaded correctness - Synchronization on boxed primitive values', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(359, 'NP_BOOLEAN_RETURN_NULL', 'NP_BOOLEAN_RETURN_NULL', 'findbugs', '<p>\n	A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen.\n	This method can be invoked as though it returned a value of type boolean, and\n	the compiler will insert automatic unboxing of the Boolean value. If a null value is returned,\n	this will result in a NullPointerException.\n  	 </p>', 2, NULL, 'Bad practice - Method with Boolean return type returns explicit null', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(360, 'DM_GC', 'DM_GC', 'findbugs', '<p> Code explicitly invokes garbage collection.\n  Except for specific use in benchmarking, this is very dubious.</p>\n  <p>In the past, situations where people have explicitly invoked\n  the garbage collector in routines such as close or finalize methods\n  has led to huge performance black holes. Garbage collection\n   can be expensive. Any situation that forces hundreds or thousands\n   of garbage collections will bring the machine to a crawl.</p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1215} instead.\n</p>', 2, NULL, 'Performance - Explicit garbage collection; extremely dubious except in benchmarking code', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(361, 'DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE', 'DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE', 'findbugs', '<p> The code synchronizes on a boxed primitive constant, such as an Integer.\n<pre>\nprivate static Integer count = 0;\n...\n  synchronized(count) { \n     count++;\n     }\n...\n</pre>\n</p>\n<p>Since Integer objects can be cached and shared,\nthis code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness\nand possible deadlock</p>', 3, NULL, 'Multithreaded correctness - Synchronization on boxed primitive could lead to deadlock', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(362, 'DE_MIGHT_DROP', 'DE_MIGHT_DROP', 'findbugs', '<p> This method might drop an exception.&nbsp; In general, exceptions\n  should be handled or reported in some way, or they should be thrown\n  out of the method.</p>', 2, NULL, 'Bad practice - Method might drop exception', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 40, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(363, 'RV_DONT_JUST_NULL_CHECK_READLINE', 'RV_DONT_JUST_NULL_CHECK_READLINE', 'findbugs', '<p> The value returned by readLine is discarded after checking to see if the return\nvalue is non-null. In almost all situations, if the result is non-null, you will want\nto use that non-null value. Calling readLine again will give you a different line.</p>', 2, NULL, 'Dodgy - Method discards result of readLine after checking if it is nonnull', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(364, 'BAC_BAD_APPLET_CONSTRUCTOR', 'BAC_BAD_APPLET_CONSTRUCTOR', 'findbugs', '<p>\n      This constructor calls methods in the parent Applet that rely on the AppletStub. Since the AppletStub\n      isn''t initialized until the init() method of this applet is called, these methods will not perform\n      correctly.\n      </p>', 0, NULL, 'Experimental - Bad Applet Constructor relies on uninitialized AppletStub', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(365, 'URF_UNREAD_FIELD', 'URF_UNREAD_FIELD', 'findbugs', '<p> This field is never read.&nbsp; Consider removing it from the class.</p>', 2, NULL, 'Performance - Unread field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(366, 'NP_NULL_INSTANCEOF', 'NP_NULL_INSTANCEOF', 'findbugs', '<p>\nThis instanceof test will always return false, since the value being checked is guaranteed to be null.\nAlthough this is safe, make sure it isn''t\nan indication of some misunderstanding or some other logic error.\n</p>', 4, NULL, 'Correctness - A known null value is checked to see if it is an instance of a type', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(367, 'MS_PKGPROTECT', 'MS_PKGPROTECT', 'findbugs', '<p> A mutable static field could be changed by malicious code or\n   by accident.\n   The field could be made package protected to avoid\n   this vulnerability.</p>', 2, NULL, 'Malicious code vulnerability - Field should be package protected', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 18, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(368, 'TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK', 'TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK', 'findbugs', '<p>\n      A value is used in a way that requires it to be never be a value denoted by a type qualifier, but\n	there is an explicit annotation stating that it is not known where the value is prohibited from having that type qualifier.\n	Either the usage or the annotation is incorrect.\n      </p>', 3, NULL, 'Correctness - Value required to not have type qualifier, but marked as unknown', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(369, 'IMA_INEFFICIENT_MEMBER_ACCESS', 'IMA_INEFFICIENT_MEMBER_ACCESS', 'findbugs', '<p>\n      This method of an inner class reads from or writes to a private member variable of the owning class,\n      or calls a private method of the owning class. The compiler must generate a special method to access this\n      private member, causing this to be less efficient. Relaxing the protection of the member variable or method\n      will allow the compiler to treat this as a normal access.\n      </p>', 0, NULL, 'Experimental - Method accesses a private member variable of owning class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 36, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(370, 'RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE', 'RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE', 'findbugs', '<p>This code invoked a compareTo or compare method, and checks to see if the return value is a specific \nvalue, such as 1 or -1. When invoking these methods, you should only check the sign of the result, not \nfor any specific non-zero value. While many or most compareTo and compare methods only return -1, 0 or 1, \nsome of them will return other values.</p>', 2, NULL, 'Code checks for specific values returned by compareTo', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(371, 'ICAST_INT_2_LONG_AS_INSTANT', 'ICAST_INT_2_LONG_AS_INSTANT', 'findbugs', '<p>This code converts a 32-bit int value to a 64-bit long value, and then passes that value for a \nmethod parameter that requires an absolute time value. An absolute time value is the number of \nmilliseconds since the standard base time known as "the epoch", namely January 1, 1970, 00:00:00 GMT. \nFor example, the following method, intended to convert seconds since the epoc into a Date, is badly broken:\n<pre>\nDate getDate(int seconds) { return new Date(seconds * 1000); }\n</pre>\n</p>\n<p>The multiplication is done using 32-bit arithmetic, and then converted to a 64-bit value. When a 32-bit \nvalue is converted to 64-bits and used to express an absolute time value, only dates in December 1969 and \nJanuary 1970 can be represented.</p>\n<p>Correct implementations for the above method are:\n<pre>\n// Fails for dates after 2037\nDate getDate(int seconds) { return new Date(seconds * 1000L); }\n\n// better, works for all dates\nDate getDate(long seconds) { return new Date(seconds * 1000); }\n</pre>\n</p>', 2, NULL, 'int value converted to long and used as absolute time', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(372, 'SWL_SLEEP_WITH_LOCK_HELD', 'SWL_SLEEP_WITH_LOCK_HELD', 'findbugs', '<p>\n      This method calls Thread.sleep() with a lock held.  This may result\n      in very poor performance and scalability, or a deadlock, since other threads may\n      be waiting to acquire the lock.  It is a much better idea to call\n      wait() on the lock, which releases the lock and allows other threads\n      to run.\n      </p>', 3, NULL, 'Multithreaded correctness - Method calls Thread.sleep() with a lock held', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(373, 'FI_PUBLIC_SHOULD_BE_PROTECTED', 'FI_PUBLIC_SHOULD_BE_PROTECTED', 'findbugs', '<p> A class''s <code>finalize()</code> method should have protected access,\n   not public.</p>', 2, NULL, 'Malicious code vulnerability - Finalizer should be protected, not public', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 18, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(374, 'STI_INTERRUPTED_ON_CURRENTTHREAD', 'STI_INTERRUPTED_ON_CURRENTTHREAD', 'findbugs', '<p>\nThis method invokes the Thread.currentThread() call, just to call the interrupted() method. As interrupted() is a\nstatic method, is more simple and clear to use Thread.interrupted().\n</p>', 3, NULL, 'Correctness - Unneeded use of currentThread() call, to call interrupted()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(375, 'BIT_SIGNED_CHECK', 'BIT_SIGNED_CHECK', 'findbugs', '<p> This method compares an expression such as\n<pre>((event.detail &amp; SWT.SELECTED) &gt; 0)</pre>.\nUsing bit arithmetic and then comparing with the greater than operator can\nlead to unexpected results (of course depending on the value of\nSWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate\nfor a bug. Even when SWT.SELECTED is not negative, it seems good practice\nto use ''!= 0'' instead of ''&gt; 0''.\n</p>\n<p>\n<em>Boris Bokowski</em>\n</p>', 3, NULL, 'Bad practice - Check for sign of bitwise operation', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(376, 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR', 'findbugs', '<p>This field is never initialized within any constructor, and is therefore could be null after the object is constructed. This could be a either an error or a questionable design, since it means a null pointer exception will be generated if that field is dereferenced before being initialized.</p>', 1, NULL, 'Correctness - Field not initialized in constructor', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(377, 'EQ_OTHER_NO_OBJECT', 'EQ_OTHER_NO_OBJECT', 'findbugs', '<p> This class defines an <code>equals()</code>\n  method, that doesn''t override the normal <code>equals(Object)</code> method\n  defined in the base <code>java.lang.Object</code> class.&nbsp; Instead, it\n  inherits an <code>equals(Object)</code> method from a superclass.\n  The class should probably define a <code>boolean equals(Object)</code> method.\n  </p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1201} instead.\n</p>', 2, NULL, 'Correctness - equals() method defined that doesn''t override equals(Object)', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(378, 'NP_NONNULL_PARAM_VIOLATION', 'NP_NONNULL_PARAM_VIOLATION', 'findbugs', '<p>\n      This method passes a null value as the parameter of a method which\n	must be nonnull. Either this parameter has been explicitly marked\n	as @Nonnull, or analysis has determined that this parameter is\n	always dereferenced.\n      </p>', 3, NULL, 'Correctness - Method call passes null to a nonnull parameter', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(379, 'FI_EMPTY', 'FI_EMPTY', 'findbugs', '<p> Empty <code>finalize()</code> methods are useless, so they should\n  be deleted.</p>', 2, NULL, 'Bad practice - Empty finalizer should be deleted', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(380, 'NP_CLOSING_NULL', 'NP_CLOSING_NULL', 'findbugs', 'close() is being invoked on a value that is always null. If this statement is executed, a null pointer exception will occur. But the big risk here you never close something that should be closed.', 4, NULL, 'Correctness - close() invoked on a value that is always null', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(381, 'UWF_NULL_FIELD', 'UWF_NULL_FIELD', 'findbugs', '<p> All writes to this field are of the constant value null, and thus\nall reads of the field will return null.\nCheck for errors, or remove it if it is useless.</p>', 3, NULL, 'Correctness - Field only ever set to null', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(382, 'NN_NAKED_NOTIFY', 'NN_NAKED_NOTIFY', 'findbugs', '<p> A call to <code>notify()</code> or <code>notifyAll()</code>\n  was made without any (apparent) accompanying\n  modification to mutable object state.&nbsp; In general, calling a notify\n  method on a monitor is done because some condition another thread is\n  waiting for has become true.&nbsp; However, for the condition to be meaningful,\n  it must involve a heap object that is visible to both threads.</p>\n\n  <p> This bug does not necessarily indicate an error, since the change to\n  mutable object state may have taken place in a method which then called\n  the method containing the notification.</p>', 3, NULL, 'Multithreaded correctness - Naked notify', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(383, 'OS_OPEN_STREAM', 'OS_OPEN_STREAM', 'findbugs', '<p> The method creates an IO stream object, does not assign it to any\nfields, pass it to other methods that might close it, \nor return it, and does not appear to close\nthe stream on all paths out of the method.&nbsp; This may result in\na file descriptor leak.&nbsp; It is generally a good\nidea to use a <code>finally</code> block to ensure that streams are\nclosed.</p>', 3, NULL, 'Bad practice - Method may fail to close stream', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(384, 'NM_SAME_SIMPLE_NAME_AS_SUPERCLASS', 'NM_SAME_SIMPLE_NAME_AS_SUPERCLASS', 'findbugs', '<p> This class has a simple name that is identical to that of its superclass, except\nthat its superclass is in a different package (e.g., <code>alpha.Foo</code> extends <code>beta.Foo</code>). \nThis can be exceptionally confusing, create lots of situations in which you have to look at import statements\nto resolve references and creates many\nopportunities to accidently define methods that do not override methods in their superclasses.\n</p>', 2, NULL, 'Bad practice - Class names shouldn''t shadow simple name of superclass', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(385, 'EQ_ABSTRACT_SELF', 'EQ_ABSTRACT_SELF', 'findbugs', '<p> This class defines a covariant version of <code>equals()</code>.&nbsp;\n  To correctly override the <code>equals()</code> method in\n  <code>java.lang.Object</code>, the parameter of <code>equals()</code>\n  must have type <code>java.lang.Object</code>.</p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1201} instead.\n</p>', 2, NULL, 'Bad practice - Abstract class defines covariant equals() method', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(386, 'J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION', 'J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION', 'findbugs', '<p>\nThis code seems to be storing a non-serializable object into an HttpSession.\nIf this session is passivated or migrated, an error will result.\n</p>', 3, NULL, 'Bad practice - Store of non serializable object into HttpSession', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(387, 'RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES', 'RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES', 'findbugs', '<p> This method contains a redundant comparison of two references known to\nboth be definitely null.</p>', 3, NULL, 'Dodgy - Redundant comparison of two null values', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(388, 'SIC_INNER_SHOULD_BE_STATIC_ANON', 'SIC_INNER_SHOULD_BE_STATIC_ANON', 'findbugs', '<p> This class is an inner class, but does not use its embedded reference\n  to the object which created it.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n  made into a <em>static</em> inner class. Since anonymous inner\nclasses cannot be marked as static, doing this will require refactoring\nthe inner class so that it is a named inner class.</p>', 2, NULL, 'Performance - Could be refactored into a named static inner class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(389, 'NM_CLASS_NOT_EXCEPTION', 'NM_CLASS_NOT_EXCEPTION', 'findbugs', '<p> This class is not derived from another exception, but ends with ''Exception''. This will\nbe confusing to users of this class.</p>', 2, NULL, 'Bad practice - Class is not derived from an Exception, even though it is named as such', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(390, 'FB_UNEXPECTED_WARNING', 'FB_UNEXPECTED_WARNING', 'findbugs', '<p>\n      FindBugs generated a warning that, according to a @NoWarning annotated,\n      is unexpected or undesired\n      </p>', 0, NULL, 'Experimental - Unexpected/undesired warning from FindBugs', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(391, 'SE_METHOD_MUST_BE_PRIVATE', 'SE_METHOD_MUST_BE_PRIVATE', 'findbugs', '<p> This class implements the <code>Serializable</code> interface, and defines a method\n  for custom serialization/deserialization. But since that method isn''t declared private,\n  it will be silently ignored by the serialization/deserialization API.</p>', 2, NULL, 'Correctness - Method must be private in order for serialization to work', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(392, 'QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT', 'QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT', 'findbugs', '<p>\n      This method assigns a literal boolean value (true or false) to a boolean variable inside\n      an if or while expression. Most probably this was supposed to be a boolean comparison using \n      ==, not an assignment using =.\n      </p>', 3, NULL, 'Correctness - Method assigns boolean literal in boolean expression', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(393, 'SS_SHOULD_BE_STATIC', 'SS_SHOULD_BE_STATIC', 'findbugs', '<p> This class contains an instance final field that\n   is initialized to a compile-time static value.\n   Consider making the field static.</p>', 2, NULL, 'Performance - Unread field: should this field be static?', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(394, 'FI_EXPLICIT_INVOCATION', 'FI_EXPLICIT_INVOCATION', 'findbugs', '<p> This method contains an explicit invocation of the <code>finalize()</code>\n  method on an object.&nbsp; Because finalizer methods are supposed to be\n  executed once, and only by the VM, this is a bad idea.</p>\n<p>If a connected set of objects beings finalizable, then the VM will invoke the\nfinalize method on all the finalizable object, possibly at the same time in different threads.\nThus, it is a particularly bad idea, in the finalize method for a class X, invoke finalize\non objects referenced by X, because they may already be getting finalized in a separate thread.\n\n<p>\nThis rule is deprecated, use {rule:squid:ObjectFinalizeCheck} instead.\n</p>', 2, NULL, 'Bad practice - Explicit invocation of finalizer', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(395, 'EC_ARRAY_AND_NONARRAY', 'EC_ARRAY_AND_NONARRAY', 'findbugs', '<p>\nThis method invokes the .equals(Object o) to compare an array and a reference that doesn''t seem\nto be an array. If things being compared are of different types, they are guaranteed to be unequal\nand the comparison is almost certainly an error. Even if they are both arrays, the equals method\non arrays only determines of the two arrays are the same object.\nTo compare the\ncontents of the arrays, use java.util.Arrays.equals(Object[], Object[]).\n</p>', 3, NULL, 'Correctness - equals() used to compare array and nonarray', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(396, 'BIT_IOR', 'BIT_IOR', 'findbugs', '<p> This method compares an expression of the form (e | C) to D.\nwhich will always compare unequal\ndue to the specific values of constants C and D.\nThis may indicate a logic error or typo.</p>\n\n<p> Typically, this bug occurs because the code wants to perform\na membership test in a bit set, but uses the bitwise OR\noperator ("|") instead of bitwise AND ("&amp;").</p>', 3, NULL, 'Correctness - Incompatible bit masks (BIT_IOR)', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(397, 'MS_SHOULD_BE_FINAL', 'MS_SHOULD_BE_FINAL', 'findbugs', '<p>\n A mutable static field could be changed by malicious code or\n        by accident from another package.\n        The field could be made final to avoid\n        this vulnerability.</p>\n<p>\n  This rule is deprecated, use {rule:squid:S1444} instead.\n</p>', 2, NULL, 'Malicious code vulnerability - Field isn''t final but should be', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 18, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(398, 'SE_TRANSIENT_FIELD_NOT_RESTORED', 'SE_TRANSIENT_FIELD_NOT_RESTORED', 'findbugs', '<p> This class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class. However, since the field is marked as transient and not set in readObject or readResolve, it will contain the default value in any \ndeserialized instance of the class.\n</p>', 2, NULL, 'Bad practice - Transient field that isn''t set by deserialization.', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(399, 'EQ_DONT_DEFINE_EQUALS_FOR_ENUM', 'EQ_DONT_DEFINE_EQUALS_FOR_ENUM', 'findbugs', '<p> This class defines an enumeration, and equality on enumerations are defined\nusing object identity. Defining a covariant equals method for an enumeration\nvalue is exceptionally bad practice, since it would likely result\nin having two different enumeration values that compare as equals using\nthe covariant enum method, and as not equal when compared normally.\nDon''t do it.\n</p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1201} instead.\n</p>', 2, NULL, 'Correctness - Covariant equals() method defined for enum', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(400, 'VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED', 'VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED', 'findbugs', '<p>\nA format-string method with a variable number of arguments is called,\nbut more arguments are passed than are actually used by the format string.\nThis won''t cause a runtime exception, but the code may be silently omitting \ninformation that was intended to be included in the formatted string.\n</p>', 2, NULL, 'Correctness - More arguments are passed that are actually used in the format string', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(401, 'EQ_ALWAYS_FALSE', 'EQ_ALWAYS_FALSE', 'findbugs', '<p> This class defines an equals method that always returns false. This means that an object is not equal to itself, and it is impossible to create useful Maps or Sets of this class. More fundamentally, it means\nthat equals is not reflexive, one of the requirements of the equals method.</p>\n<p>The likely intended semantics are object identity: that an object is equal to itself. This is the behavior inherited from class <code>Object</code>. If you need to override an equals inherited from a different \nsuperclass, you can use use:\n<pre>\npublic boolean equals(Object o) { return this == o; }\n</pre>\n</p>', 4, NULL, 'Correctness - equals method always returns false', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(402, 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD', 'findbugs', '<p>This field is never read.  The field is public or protected, so perhaps it is intended to be \nused with classes not seen as part of the analysis. If not, consider removing it from the class.</p>', 0, NULL, 'Unread public/protected field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(403, 'INT_VACUOUS_BIT_OPERATION', 'INT_VACUOUS_BIT_OPERATION', 'findbugs', '<p> This is an integer bit operation (and, or, or exclusive or) that doesn''t do any useful work\n(e.g., <code>v & 0xffffffff</code>).\n\n</p>', 3, NULL, 'Dodgy - Vacuous bit mask operation on integer value', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5h', NULL, NULL, NULL, 0, 'HTML'),
(404, 'SF_SWITCH_NO_DEFAULT', 'SF_SWITCH_NO_DEFAULT', 'findbugs', '<p>\n      This method contains a switch statement where default case is missing.\n      Usually you need to provide a default case.\n      </p>\n\n<p>\nThis rule is deprecated, use {rule:squid:SwitchLastCaseIsDefaultCheck} instead.\n</p>', 2, NULL, 'Switch statement found where default case is missing', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(405, 'DM_BOXED_PRIMITIVE_FOR_PARSING', 'DM_BOXED_PRIMITIVE_FOR_PARSING', 'findbugs', '<p>\nA boxed primitive is created from a String, just to extract the unboxed primitive value.\nIt is more efficient to just call the static parseXXX method.\n</p>', 2, NULL, 'Boxing/unboxing to parse a primitive', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(406, 'IL_INFINITE_LOOP', 'IL_INFINITE_LOOP', 'findbugs', '<p>This loop doesn''t seem to have a way to terminate (other than by perhaps\nthrowing an exception).</p>', 3, NULL, 'Correctness - An apparent infinite loop', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(407, 'EQ_COMPARING_CLASS_NAMES', 'EQ_COMPARING_CLASS_NAMES', 'findbugs', '<p> This method checks to see if two objects are the same class by checking to see if the names\nof their classes are equal. You can have different classes with the same name if they are loaded by\ndifferent class loaders. Just check to see if the class objects are the same.\n</p>', 2, NULL, 'Correctness - equals method compares class names rather than class objects', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(408, 'NP_ALWAYS_NULL_EXCEPTION', 'NP_ALWAYS_NULL_EXCEPTION', 'findbugs', '<p> A pointer which is null on an exception path is dereferenced here.&nbsp;\nThis will lead to a <code>NullPointerException</code> when the code is executed.&nbsp;\nNote that because FindBugs currently does not prune infeasible exception paths,\nthis may be a false warning.</p>\n\n<p> Also note that FindBugs considers the default case of a switch statement to\nbe an exception path, since the default case is often infeasible.</p>', 3, NULL, 'Correctness - Null pointer dereference in method on exception path', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(409, 'DB_DUPLICATE_BRANCHES', 'DB_DUPLICATE_BRANCHES', 'findbugs', '<p>\n      This method uses the same code to implement two branches of a conditional branch.\n	Check to ensure that this isn''t a coding mistake.\n      </p>', 3, NULL, 'Dodgy - Method uses the same code for two branches', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(410, 'IMSE_DONT_CATCH_IMSE', 'IMSE_DONT_CATCH_IMSE', 'findbugs', '<p>IllegalMonitorStateException is generally only\n   thrown in case of a design flaw in your code (calling wait or\n   notify on an object you do not hold a lock on).</p>', 2, NULL, 'Bad practice - Dubious catching of IllegalMonitorStateException', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 40, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(411, 'XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER', 'XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER', 'findbugs', '<p>This code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting\nvulnerability. See <a href="http://en.wikipedia.org/wiki/Cross-site_scripting">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that FindBugs doesn''t report. If you are concerned about cross site scripting, you should seriously \nconsider using a commercial static analysis or pen-testing tool.\n</p>', 3, NULL, 'Security - Servlet reflected cross site scripting vulnerability', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 20, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '3h', NULL, NULL, NULL, 0, 'HTML'),
(412, 'DMI_HARDCODED_ABSOLUTE_FILENAME', 'DMI_HARDCODED_ABSOLUTE_FILENAME', 'findbugs', '<p>This code constructs a File object using a hard coded to an absolute pathname\n(e.g., <code>new File("/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment");</code>\n</p>', 3, NULL, 'Dodgy - Code contains a hard coded reference to an absolute pathname', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 7, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(413, 'HE_HASHCODE_NO_EQUALS', 'HE_HASHCODE_NO_EQUALS', 'findbugs', '<p> This class defines a <code>hashCode()</code> method but not an\n  <code>equals()</code> method.&nbsp; Therefore, the class may\n  violate the invariant that equal objects must have equal hashcodes.</p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1206} instead.\n</p>', 3, NULL, 'Bad practice - Class defines hashCode() but not equals()', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(414, 'EC_UNRELATED_CLASS_AND_INTERFACE', 'EC_UNRELATED_CLASS_AND_INTERFACE', 'findbugs', '<p>\nThis method calls equals(Object) on two references,  one of which is a class\nand the other an interface, where neither the class nor any of its\nnon-abstract subclasses implement the interface.\nTherefore, the objects being compared\nare unlikely to be members of the same class at runtime\n(unless some application classes were not analyzed, or dynamic class\nloading can occur at runtime).\nAccording to the contract of equals(),\nobjects of different\nclasses should always compare as unequal; therefore, according to the\ncontract defined by java.lang.Object.equals(Object),\nthe result of this comparison will always be false at runtime.\n</p>', 3, NULL, 'Correctness - Call to equals() comparing unrelated class and interface', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(415, 'NP_DEREFERENCE_OF_READLINE_VALUE', 'NP_DEREFERENCE_OF_READLINE_VALUE', 'findbugs', '<p> The result of invoking readLine() is dereferenced without checking to see if the result is null. If there are no more lines of text\nto read, readLine() will return null and dereferencing that will generate a null pointer exception.\n</p>', 3, NULL, 'Dodgy - Dereference of the result of readLine() without nullcheck', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(416, 'BC_IMPOSSIBLE_CAST', 'BC_IMPOSSIBLE_CAST', 'findbugs', '<p>\nThis cast will always throw a ClassCastException.\n</p>', 4, NULL, 'Correctness - Impossible cast', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(417, 'NP_NULL_ON_SOME_PATH_EXCEPTION', 'NP_NULL_ON_SOME_PATH_EXCEPTION', 'findbugs', '<p> A reference value which is null on some exception control path is\ndereferenced here.&nbsp; This may lead to a <code>NullPointerException</code>\nwhen the code is executed.&nbsp;\nNote that because FindBugs currently does not prune infeasible exception paths,\nthis may be a false warning.</p>\n\n<p> Also note that FindBugs considers the default case of a switch statement to\nbe an exception path, since the default case is often infeasible.</p>', 3, NULL, 'Correctness - Possible null pointer dereference in method on exception path', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(418, 'ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT', 'ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT', 'findbugs', '<p>\nThe code performs an unsigned right shift, whose result is then\ncast to a short or byte, which discards the upper bits of the result.\nSince the upper bits are discarded, there may be no difference between\na signed and unsigned right shift (depending upon the size of the shift).\n</p>', 3, NULL, 'Dodgy - Unsigned right shift cast to short/byte', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5h', NULL, NULL, NULL, 0, 'HTML'),
(419, 'IC_INIT_CIRCULARITY', 'IC_INIT_CIRCULARITY', 'findbugs', '<p> A circularity was detected in the static initializers of the two\n  classes referenced by the bug instance.&nbsp; Many kinds of unexpected\n  behavior may arise from such circularity.</p>', 3, NULL, 'Dodgy - Initialization circularity', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(420, 'UM_UNNECESSARY_MATH', 'UM_UNNECESSARY_MATH', 'findbugs', '<p> This method uses a static method from java.lang.Math on a constant value. This method''s\nresult in this case, can be determined statically, and is faster and sometimes more accurate to\njust use the constant. Methods detected are:\n</p>\n<table>\n<tr>\n   <th>Method</th> <th>Parameter</th>\n</tr>\n<tr>\n   <td>abs</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>acos</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>asin</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>atan</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>atan2</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>cbrt</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>ceil</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>cos</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>cosh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>exp</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>expm1</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>floor</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>log</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>log10</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>rint</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>round</td> <td>-any-</td>\n</tr>\n<tr>\n   <td>sin</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>sinh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>sqrt</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>tan</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>tanh</td> <td>0.0</td>\n</tr>\n<tr>\n   <td>toDegrees</td> <td>0.0 or 1.0</td>\n</tr>\n<tr>\n   <td>toRadians</td> <td>0.0</td>\n</tr>\n</table>', 3, NULL, 'Performance - Method calls static Math class method on a constant value', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(421, 'NM_CLASS_NAMING_CONVENTION', 'NM_CLASS_NAMING_CONVENTION', 'findbugs', '<p>\n      Class names should be nouns, in mixed case with the first letter of each internal word capitalized. \n      Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations \n      (unless the abbreviation is much more widely used than the long form, such as URL or HTML).\n      </p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S00101} and {rule:squid:S00114} instead.\n</p>', 2, NULL, 'Class names should start with an upper case letter', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(422, 'RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE', 'RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE', 'findbugs', '<p> A value is checked here to see whether it is null, but this value can''t\nbe null because it was previously dereferenced and if it were null a null pointer\nexception would have occurred at the earlier dereference. \nEssentially, this code and the previous dereference\ndisagree as to whether this value is allowed to be null. Either the check is redundant\nor the previous dereference is erroneous.</p>', 3, NULL, 'Correctness - Nullcheck of value previously dereferenced', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(423, 'EQ_DOESNT_OVERRIDE_EQUALS', 'EQ_DOESNT_OVERRIDE_EQUALS', 'findbugs', '<p> This class extends a class that defines an equals method and adds fields, but doesn''t\ndefine an equals method itself. Thus, equality on instances of this class will\nignore the identity of the subclass and the added fields. Be sure this is what is intended,\nand that you don''t need to override the equals method. Even if you don''t need to override\nthe equals method, consider overriding it anyway to document the fact\nthat the equals method for the subclass just return the result of\ninvoking super.equals(o).\n  </p>', 2, NULL, 'Dodgy - Class doesn''t override equals in superclass', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(424, 'SA_LOCAL_SELF_ASSIGNMENT_INSTEAD_OF_FIELD', 'SA_LOCAL_SELF_ASSIGNMENT_INSTEAD_OF_FIELD', 'findbugs', '<p>This method contains a self assignment of a local variable, and there is a field with an identical name.\nAssignment appears to have been ; e.g.\n<pre>\n  int foo;\n  public void setFoo(int foo) {\n    foo = foo;\n  }\n</pre>\nThe assignment is useless. Did you mean to assign to the field instead?</p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1226} instead.\n</p>', 2, NULL, 'Self assignment of local rather than assignment to field', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(425, 'NM_LCASE_TOSTRING', 'NM_LCASE_TOSTRING', 'findbugs', '<p>\n      This class defines a method called <code>tostring()</code>.  \n      This method does not override the <code>toString()</code> \n      method in <code>java.lang.Object</code>, which is probably what was intended.\n      </p>', 2, NULL, 'Class defines tostring(); should it be toString()?', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(426, 'DM_USELESS_THREAD', 'DM_USELESS_THREAD', 'findbugs', '<p>This method creates a thread without specifying a run method either by deriving from the Thread class, or\n  by passing a Runnable object. This thread, then, does nothing but waste time.\n</p>', 2, NULL, 'Multithreaded correctness - A thread was created using the default empty run method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(427, 'JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT', 'JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT', 'findbugs', '<p>This method calls <code>wait()</code>, <code>notify()</code> or <code>notifyAll()</code> on an object that also \nprovides an <code>await()</code>, <code>signal()</code>, <code>signalAll()</code> method (such as util.concurrent \nCondition objects). This probably isn''t what you want, and even if you do want it, you should consider changing your \ndesign, as other developers will find it exceptionally confusing.</p>', 2, NULL, 'Using monitor style wait methods on util.concurrent abstraction', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(428, 'FI_NULLIFY_SUPER', 'FI_NULLIFY_SUPER', 'findbugs', '<p> This empty <code>finalize()</code> method explicitly negates the\n  effect of any finalizer defined by its superclass.&nbsp; Any finalizer\n  actions defined for the superclass will not be performed.&nbsp;\n  Unless this is intended, delete this method.</p>', 3, NULL, 'Bad practice - Finalizer nullifies superclass finalizer', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(429, 'MS_MUTABLE_HASHTABLE', 'MS_MUTABLE_HASHTABLE', 'findbugs', '<p>A final static field references a Hashtable\n   and can be accessed by malicious code or\n        by accident from another package.\n   This code can freely modify the contents of the Hashtable.</p>', 2, NULL, 'Malicious code vulnerability - Field is a mutable Hashtable', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 18, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(430, 'NM_CONFUSING', 'NM_CONFUSING', 'findbugs', '<p> The referenced methods have names that differ only by capitalization.</p>', 2, NULL, 'Bad practice - Confusing method names', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(431, 'DM_NEW_FOR_GETCLASS', 'DM_NEW_FOR_GETCLASS', 'findbugs', '<p>This method allocates an object just to call getClass() on it, in order to\n  retrieve the Class object for it. It is simpler to just access the .class property of the class.</p>', 2, NULL, 'Performance - Method allocates an object, only to get the class object', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 29, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(432, 'IM_AVERAGE_COMPUTATION_COULD_OVERFLOW', 'IM_AVERAGE_COMPUTATION_COULD_OVERFLOW', 'findbugs', '<p>The code computes the average of two integers using either division or signed right shift,\nand then uses the result as the index of an array.\nIf the values being averaged are very large, this can overflow (resulting in the computation\nof a negative average).  Assuming that the result is intended to be nonnegative, you \ncan use an unsigned right shift instead. In other words, rather that using <code>(low+high)/2</code>,\nuse <code>(low+high) &gt;&gt;&gt; 1</code>\n</p>\n<p>This bug exists in many earlier implementations of binary search and merge sort.\nMartin Buchholz <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6412541">found and fixed it</a>\nin the JDK libraries, and Joshua Bloch\n<a href="http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html">widely\npublicized the bug pattern</a>.\n</p>', 3, NULL, 'Dodgy - Computation of average could overflow', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(433, 'SE_BAD_FIELD_INNER_CLASS', 'SE_BAD_FIELD_INNER_CLASS', 'findbugs', '<p> This Serializable class is an inner class of a non-serializable class.\nThus, attempts to serialize it will also attempt to associate instance of the outer\nclass with which it is associated, leading to a runtime error.\n</p>\n<p>If possible, making the inner class a static inner class should solve the \nproblem. Making the outer class serializable might also work, but that would\nmean serializing an instance of the inner class would always also serialize the instance\nof the outer class, which it often not what you really want.', 1, NULL, 'Bad practice - Non-serializable class has a serializable inner class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(434, 'NP_UNWRITTEN_FIELD', 'NP_UNWRITTEN_FIELD', 'findbugs', '<p>The program is dereferencing a field that does not seem to ever have a non-null value written to it. Dereferencing this value will generate a null pointer exception.</p>', 2, NULL, 'Correctness - Read of unwritten field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(435, 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'RV_RETURN_VALUE_IGNORED_BAD_PRACTICE', 'findbugs', '<p> This method returns a value that is not checked. The return value should be checked\nsince it can indicate an unusual or unexpected function execution. For\nexample, the <code>File.delete()</code> method returns false\nif the file could not be successfully deleted (rather than \nthrowing an Exception).\nIf you don''t check the result, you won''t notice if the method invocation\nsignals unexpected behavior by returning an atypical return value.\n</p>', 2, NULL, 'Bad practice - Method ignores exceptional return value', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(436, 'TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS', 'TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS', 'findbugs', '<p>\nA value specified as carrying a type qualifier annotation is\ncompared with a value that doesn''t ever carry that qualifier.\n</p>\n\n<p>\nMore precisely, a value annotated with a type qualifier specifying when=ALWAYS\nis compared with a value that where the same type qualifier specifies when=NEVER.\n</p>\n\n<p>\nFor example, say that @NonNegative is a nickname for\nthe type qualifier annotation @Negative(when=When.NEVER).\nThe following code will generate this warning because\nthe return statement requires a @NonNegative value,\nbut receives one that is marked as @Negative.\n</p>\n<pre>\npublic boolean example(@Negative Integer value1, @NonNegative Integer value2) {\n  return value1.equals(value2);\n}\n</pre>', 2, NULL, 'Comparing values with incompatible type qualifiers', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(437, 'RC_REF_COMPARISON', 'RC_REF_COMPARISON', 'findbugs', '<p> This method compares two reference values using the == or != operator,\nwhere the correct way to compare instances of this type is generally\nwith the equals() method.  Examples of classes which should generally\nnot be compared by reference are java.lang.Integer, java.lang.Float, etc.</p>', 3, NULL, 'Bad practice - Suspicious reference comparison', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(438, 'MF_CLASS_MASKS_FIELD', 'MF_CLASS_MASKS_FIELD', 'findbugs', '<p> This class defines a field with the same name as a visible\ninstance field in a superclass.  This is confusing, and\nmay indicate an error if methods update or access one of\nthe fields when they wanted the other.</p>', 2, NULL, 'Correctness - Class defines field that masks a superclass field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(439, 'PS_PUBLIC_SEMAPHORES', 'PS_PUBLIC_SEMAPHORES', 'findbugs', '<p>\n    This class uses synchronization along with wait(), notify() or notifyAll() on itself (the this\n    reference). Client classes that use this class, may, in addition, use an instance of this class\n    as a synchronizing object. Because two classes are using the same object for synchronization,\n    Multithread correctness is suspect. You should not synchronize nor call semaphore methods on\n    a public reference. Consider using a internal private member variable to control synchronization.\n    </p>', 3, NULL, 'Dodgy - Class exposes synchronization and semaphores in its public interface', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(440, 'SKIPPED_CLASS_TOO_BIG', 'SKIPPED_CLASS_TOO_BIG', 'findbugs', '<p>This class is bigger than can be effectively handled, and was not fully analyzed for errors.\n</p>', 1, NULL, 'Dodgy - Class too big for analysis', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '3h', NULL, NULL, NULL, 0, 'HTML'),
(441, 'HSC_HUGE_SHARED_STRING_CONSTANT', 'HSC_HUGE_SHARED_STRING_CONSTANT', 'findbugs', '<p>\n	A large String constant is duplicated across multiple class files. \n	This is likely because a final field is initialized to a String constant, and the Java language\n	mandates that all references to a final field from other classes be inlined into\nthat classfile. See <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6447475">JDK bug 6447475</a>\n	for a description of an occurrence of this bug in the JDK and how resolving it reduced\n	the size of the JDK by 1 megabyte.\n</p>', 3, NULL, 'Performance - Huge string constants is duplicated across multiple class files', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 29, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(442, 'SE_NO_SUITABLE_CONSTRUCTOR', 'SE_NO_SUITABLE_CONSTRUCTOR', 'findbugs', '<p> This class implements the <code>Serializable</code> interface\n   and its superclass does not. When such an object is deserialized,\n   the fields of the superclass need to be initialized by\n   invoking the void constructor of the superclass.\n   Since the superclass does not have one,\n   serialization and deserialization will fail at runtime.</p>', 2, NULL, 'Bad practice - Class is Serializable but its superclass doesn''t define a void constructor', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(443, 'MWN_MISMATCHED_NOTIFY', 'MWN_MISMATCHED_NOTIFY', 'findbugs', '<p> This method calls Object.notify() or Object.notifyAll() without obviously holding a lock\non the object.&nbsp;  Calling notify() or notifyAll() without a lock held will result in\nan <code>IllegalMonitorStateException</code> being thrown.</p>', 3, NULL, 'Multithreaded correctness - Mismatched notify()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(444, 'STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE', 'STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE', 'findbugs', '<p>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. \nThe detector has found a call to an instance of DateFormat that has been obtained via a static\nfield. This looks suspicous.</p>\n<p>For more information on this see <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6231579">Sun Bug #6231579</a>\nand <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6178997">Sun Bug #6178997</a>.</p>', 3, NULL, 'Multithreaded correctness - Call to static DateFormat', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(445, 'SA_LOCAL_DOUBLE_ASSIGNMENT', 'SA_LOCAL_DOUBLE_ASSIGNMENT', 'findbugs', '<p> This method contains a double assignment of a local variable; e.g.\n</p>\n<pre>\n  public void foo() {\n    int x,y;\n    x = x = 17;\n  }\n</pre>\n<p>Assigning the same value to a variable twice is useless, and may indicate a logic error or typo.</p>', 3, NULL, 'Dodgy - Double assignment of local variable', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(446, 'DP_DO_INSIDE_DO_PRIVILEGED', 'DP_DO_INSIDE_DO_PRIVILEGED', 'findbugs', '<p> This code invokes a method that requires a security permission check.\n  If this code will be granted security permissions, but might be invoked by code that does not\n  have security permissions, then the invocation needs to occur inside a doPrivileged block.</p>', 2, NULL, 'Bad practice - Method invoked that should be only be invoked inside a doPrivileged block', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(447, 'RV_RETURN_VALUE_IGNORED2', 'RV_RETURN_VALUE_IGNORED2', 'findbugs', '<p> The return value of this method should be checked. One common\ncause of this warning is to invoke a method on an immutable object,\nthinking that it updates the object. For example, in the following code\nfragment,</p>\n<blockquote>\n<pre>\nString dateString = getHeaderField(name);\ndateString.trim();\n</pre>\n</blockquote>\n<p>the programmer seems to be thinking that the trim() method will update\nthe String referenced by dateString. But since Strings are immutable, the trim()\nfunction returns a new String value, which is being ignored here. The code\nshould be corrected to: </p>\n<blockquote>\n<pre>\nString dateString = getHeaderField(name);\ndateString = dateString.trim();\n</pre>\n</blockquote>', 2, NULL, 'Correctness - Method ignores return value', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(448, 'NM_VERY_CONFUSING', 'NM_VERY_CONFUSING', 'findbugs', '<p> The referenced methods have names that differ only by capitalization. \nThis is very confusing because if the capitalization were\nidentical then one of the methods would override the other.\n</p>', 2, NULL, 'Correctness - Very confusing method names', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(449, 'IO_APPENDING_TO_OBJECT_OUTPUT_STREAM', 'IO_APPENDING_TO_OBJECT_OUTPUT_STREAM', 'findbugs', '<p>\n     This code opens a file in append mode and then wraps the result in an object output stream. \n     This won''t allow you to append to an existing object output stream stored in a file. If you want to be\n     able to append to an object output stream, you need to keep the object output stream open.\n      </p>\n      <p>The only situation in which opening a file in append mode and the writing an object output stream\n      could work is if on reading the file you plan to open it in random access mode and seek to the byte offset\n      where the append started.\n      </p> \n      \n      <p>\n      TODO: example.\n      </p>', 3, NULL, 'Correctness - Doomed attempt to append to an object output stream', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(450, 'DM_RUN_FINALIZERS_ON_EXIT', 'DM_RUN_FINALIZERS_ON_EXIT', 'findbugs', '<p> <em>Never call System.runFinalizersOnExit\nor Runtime.runFinalizersOnExit for any reason: they are among the most\ndangerous methods in the Java libraries.</em> -- Joshua Bloch</p>', 2, NULL, 'Bad practice - Method invokes dangerous method runFinalizersOnExit', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(451, 'STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE', 'STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE', 'findbugs', '<p>As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. \nSharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the\napplication.</p>\n<p>You may also experience serialization problems.</p>\n<p>Using an instance field is recommended.</p>\n<p>For more information on this see <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6231579">Sun Bug #6231579</a>\nand <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6178997">Sun Bug #6178997</a>.</p>', 3, NULL, 'Multithreaded correctness - Static DateFormat', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(452, 'FI_FINALIZER_NULLS_FIELDS', 'FI_FINALIZER_NULLS_FIELDS', 'findbugs', '<p> This finalizer nulls out fields.  This is usually an error, as it does not aid garbage collection,\n  and the object is going to be garbage collected anyway.', 2, NULL, 'Bad practice - Finalizer nulls fields', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(453, 'FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER', 'FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER', 'findbugs', '<p>\n    This code checks to see if a floating point value is equal to the special\n	Not A Number value (e.g., <code>if (x == Double.NaN)</code>). However,\n	because of the special semantics of <code>NaN</code>, no value\n	is equal to <code>Nan</code>, including <code>NaN</code>. Thus,\n	<code>x == Double.NaN</code> always evaluates to false.\n\n	To check to see if a value contained in <code>x</code>\n	is the special Not A Number value, use \n	<code>Double.isNaN(x)</code> (or <code>Float.isNaN(x)</code> if\n	<code>x</code> is floating point precision).\n    </p>', 3, NULL, 'Correctness - Doomed test for equality to NaN', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(454, 'TLW_TWO_LOCK_WAIT', 'TLW_TWO_LOCK_WAIT', 'findbugs', '<p> Waiting on a monitor while two locks are held may cause\n  deadlock.\n   &nbsp;\n   Performing a wait only releases the lock on the object\n   being waited on, not any other locks.\n   &nbsp;\nThis not necessarily a bug, but is worth examining\n  closely.</p>', 2, NULL, 'Multithreaded correctness - Wait with two locks held', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(455, 'DMI_CONSTANT_DB_PASSWORD', 'DMI_CONSTANT_DB_PASSWORD', 'findbugs', '<p>This code creates a database connect using a hardcoded, constant password. Anyone with access to either the source code or the compiled code can \n	easily learn the password.\n</p>', 4, NULL, 'Security - Hardcoded constant database password', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(456, 'DMI_ARGUMENTS_WRONG_ORDER', 'DMI_ARGUMENTS_WRONG_ORDER', 'findbugs', '<p>The arguments to this method call seem to be in the wrong order. For example, a call \n<code>Preconditions.checkNotNull("message", message)</code> has reserved arguments: the value \nto be checked is the first argument.</p>', 1, NULL, 'Reversed method arguments', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(457, 'DMI_COLLECTION_OF_URLS', 'DMI_COLLECTION_OF_URLS', 'findbugs', '<p> This method or field is or uses a Map or Set of URLs. Since both the equals and hashCode\nmethod of URL perform domain name resolution, this can result in a big performance hit.\nSee <a href="http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a> for more information.\nConsider using <code>java.net.URI</code> instead.\n   </p>', 4, NULL, 'Performance - Maps and sets of URLs can be performance hogs', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(458, 'NM_METHOD_NAMING_CONVENTION', 'NM_METHOD_NAMING_CONVENTION', 'findbugs', '<p>\n      Methods should be verbs, in mixed case with the first letter lowercase, \n      with the first letter of each internal word capitalized.\n      </p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S00100} instead.\n</p>', 2, NULL, 'Method names should start with a lower case letter', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(459, 'SIC_THREADLOCAL_DEADLY_EMBRACE', 'SIC_THREADLOCAL_DEADLY_EMBRACE', 'findbugs', 'This class is an inner class, but should probably be a static inner class. As it is, there is a serious danger of a deadly embrace between the inner class and the thread local in the outer class. Because the inner class isn''t static, it retains a reference to the outer class. If the thread local contains a reference to an instance of the inner class, the inner and outer instance will both be reachable and not eligible for garbage collection.', 2, NULL, 'Correctness - Deadly embrace of non-static inner class and thread local', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(460, 'NM_WRONG_PACKAGE_INTENTIONAL', 'NM_WRONG_PACKAGE_INTENTIONAL', 'findbugs', '<p> The method in the subclass doesn''t override a similar method in a superclass because the type of a parameter doesn''t exactly match\nthe type of the corresponding parameter in the superclass. For example, if you have:</p>\n\n<blockquote>\n<pre>\nimport alpha.Foo;\npublic class A {\n  public int f(Foo x) { return 17; }\n}\n----\nimport beta.Foo;\npublic class B extends A {\n  public int f(Foo x) { return 42; }\n  public int f(alpha.Foo x) { return 27; }\n}\n</pre>\n</blockquote>\n\n<p>The <code>f(Foo)</code> method defined in class <code>B</code> doesn''t\noverride the \n<code>f(Foo)</code> method defined in class <code>A</code>, because the argument\ntypes are <code>Foo</code>''s from different packages.\n</p>\n\n<p>In this case, the subclass does define a method with a signature identical to the method in the superclass,\nso this is presumably understood. However, such methods are exceptionally confusing. You should strongly consider\nremoving or deprecating the method with the similar but not identical signature.\n</p>', 2, NULL, 'Bad practice - Method doesn''t override method in superclass due to wrong package for parameter', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(461, 'INT_BAD_REM_BY_1', 'INT_BAD_REM_BY_1', 'findbugs', '<p> Any expression (exp % 1) is guaranteed to always return zero.\nDid you mean (exp &amp; 1) or (exp % 2) instead?\n</p>', 3, NULL, 'Correctness - Integer remainder modulo 1', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(462, 'ES_COMPARING_STRINGS_WITH_EQ', 'ES_COMPARING_STRINGS_WITH_EQ', 'findbugs', '<p>This code compares <code>java.lang.String</code> objects for reference\nequality using the == or != operators.\nUnless both strings are either constants in a source file, or have been\ninterned using the <code>String.intern()</code> method, the same string\nvalue may be represented by two different String objects. Consider\nusing the <code>equals(Object)</code> method instead.</p>', 2, NULL, 'Bad practice - Comparison of String objects using == or !=', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(463, 'QF_QUESTIONABLE_FOR_LOOP', 'QF_QUESTIONABLE_FOR_LOOP', 'findbugs', '<p>Are you sure this for loop is incrementing the correct variable?\n   It appears that another variable is being initialized and checked\n   by the for loop.\n</p>', 3, NULL, 'Dodgy - Complicated, subtle or wrong increment in for-loop', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(464, 'VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN', 'VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN', 'findbugs', '<p>\nAn argument not of type Boolean is being formatted with a %b format specifier. This won''t throw an\nexception; instead, it will print true for any nonnull value, and false for null.\nThis feature of format strings is strange, and may not be what you intended.\n</p>', 2, NULL, 'Dodgy - Non-Boolean argument formatted using %b format specifier', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(465, 'XFB_XML_FACTORY_BYPASS', 'XFB_XML_FACTORY_BYPASS', 'findbugs', '<p>\n      This method allocates a specific implementation of an xml interface. It is preferable to use\n      the supplied factory classes to create these objects so that the implementation can be\n      changed at runtime. See\n      </p>\n      <ul>\n         <li>javax.xml.parsers.DocumentBuilderFactory</li>\n         <li>javax.xml.parsers.SAXParserFactory</li>\n         <li>javax.xml.transform.TransformerFactory</li>\n         <li>org.w3c.dom.Document.create<i>XXXX</i></li>\n      </ul>\n      <p>for details.</p>', 3, NULL, 'Dodgy - Method directly allocates a specific implementation of xml interfaces', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 11, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(466, 'WS_WRITEOBJECT_SYNC', 'WS_WRITEOBJECT_SYNC', 'findbugs', '<p> This class has a <code>writeObject()</code> method which is synchronized;\n  however, no other method of the class is synchronized.</p>', 3, NULL, 'Multithreaded correctness - Class''s writeObject() method is synchronized but nothing else is', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(467, 'CN_IDIOM_NO_SUPER_CALL', 'CN_IDIOM_NO_SUPER_CALL', 'findbugs', '<p> This non-final class defines a clone() method that does not call super.clone().\nIf this class ("<i>A</i>") is extended by a subclass ("<i>B</i>"),\nand the subclass <i>B</i> calls super.clone(), then it is likely that\n<i>B</i>''s clone() method will return an object of type <i>A</i>,\nwhich violates the standard contract for clone().</p>\n\n<p> If all clone() methods call super.clone(), then they are guaranteed\nto use Object.clone(), which always returns an object of the correct type.</p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1182} instead.\n</p>', 2, NULL, 'Bad practice - clone method does not call super.clone()', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(468, 'DLS_DEAD_STORE_OF_CLASS_LITERAL', 'DLS_DEAD_STORE_OF_CLASS_LITERAL', 'findbugs', '<p>\nThis instruction assigns a class literal to a variable and then never uses it.\n<a href="//java.sun.com/j2se/1.5.0/compatibility.html#literal">The behavior of this differs in Java 1.4 and in Java 5.</a>\nIn Java 1.4 and earlier, a reference to <code>Foo.class</code> would force the static initializer\nfor <code>Foo</code> to be executed, if it has not been executed already.\nIn Java 5 and later, it does not.\n</p>\n<p>See Sun''s <a href="//java.sun.com/j2se/1.5.0/compatibility.html#literal">article on Java SE compatibility</a>\nfor more details and examples, and suggestions on how to force class initialization in Java 5.\n</p>', 3, NULL, 'Correctness - Dead store of class literal', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(469, 'BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS', 'BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS', 'findbugs', '<p>\nThe <code>equals(Object o)</code> method shouldn''t make any assumptions\nabout the type of <code>o</code>. It should simply return\nfalse if <code>o</code> is not the same type as <code>this</code>.\n</p>', 3, NULL, 'Bad practice - Equals method should not assume anything about the type of its argument', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(470, 'ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD', 'ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD', 'findbugs', '<p> This method synchronizes on a field in what appears to be an attempt\nto guard against simultaneous updates to that field. But guarding a field\ngets a lock on the referenced object, not on the field. This may not \nprovide the mutual exclusion you need, and other threads might \nbe obtaining locks on the referenced objects (for other purposes). An example\nof this pattern would be:\n\n<p><pre>\nprivate Long myNtfSeqNbrCounter = new Long(0);\nprivate Long getNotificationSequenceNumber() {\n     Long result = null;\n     synchronized(myNtfSeqNbrCounter) {\n         result = new Long(myNtfSeqNbrCounter.longValue() + 1);\n         myNtfSeqNbrCounter = new Long(result.longValue());\n     }\n     return result;\n }\n</pre>\n\n\n</p>', 2, NULL, 'Multithreaded correctness - Synchronization on field in futile attempt to guard that field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(471, 'MWN_MISMATCHED_WAIT', 'MWN_MISMATCHED_WAIT', 'findbugs', '<p> This method calls Object.wait() without obviously holding a lock\non the object.&nbsp;  Calling wait() without a lock held will result in\nan <code>IllegalMonitorStateException</code> being thrown.</p>', 3, NULL, 'Multithreaded correctness - Mismatched wait()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(472, 'DM_NEXTINT_VIA_NEXTDOUBLE', 'DM_NEXTINT_VIA_NEXTDOUBLE', 'findbugs', '<p>If <code>r</code> is a <code>java.util.Random</code>, you can generate a random number from <code>0</code> to <code>n-1</code>\nusing <code>r.nextInt(n)</code>, rather than using <code>(int)(r.nextDouble() * n)</code>.\n</p>', 2, NULL, 'Performance - Use the nextInt method of Random rather than nextDouble to generate a random integer', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(473, 'AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION', 'AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION', 'findbugs', '<p>This code contains a sequence of calls to a concurrent abstraction (such as a concurrent hash map). These calls will not be executed atomically.</p>', 2, NULL, 'Sequence of calls to concurrent abstraction may not be atomic', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(474, 'DLS_DEAD_LOCAL_STORE_OF_NULL', 'DLS_DEAD_LOCAL_STORE_OF_NULL', 'findbugs', '<p>The code stores null into a local variable, and the stored value is not\nread. This store may have been introduced to assist the garbage collector, but\nas of Java SE 6.0, this is no longer needed or useful.\n</p>', 3, NULL, 'Dodgy - Dead store of null to local variable', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(475, 'DMI_BLOCKING_METHODS_ON_URL', 'DMI_BLOCKING_METHODS_ON_URL', 'findbugs', '<p> The equals and hashCode\nmethod of URL perform domain name resolution, this can result in a big performance hit.\nSee <a href="http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a> for more information.\nConsider using <code>java.net.URI</code> instead.\n   </p>', 4, NULL, 'Performance - The equals and hashCode methods of URL are blocking', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(476, 'NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE', 'NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE', 'findbugs', '<p> There is a branch of statement that, <em>if executed,</em>  guarantees that\na null value will be dereferenced, which\nwould generate a <code>NullPointerException</code> when the code is executed.\nOf course, the problem might be that the branch or statement is infeasible and that\nthe null pointer exception can''t ever be executed; deciding that is beyond the ability of FindBugs.\nDue to the fact that this value had been previously tested for nullness, this is a definite possibility.\n</p>', 3, NULL, 'Dodgy - Possible null pointer dereference on path that might be infeasible', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(477, 'PT_ABSOLUTE_PATH_TRAVERSAL', 'PT_ABSOLUTE_PATH_TRAVERSAL', 'findbugs', '<p>\nThe software uses an HTTP request parameter to construct a pathname that should be within a restricted directory,\nbut it does not properly neutralize absolute path sequences such as "/abs/path" that can resolve to a location that is outside of that directory.\n\nSee <a href="http://cwe.mitre.org/data/definitions/36.html">http://cwe.mitre.org/data/definitions/36.html</a> for more information.\n</p>\n\n<p>\nFindBugs looks only for the most blatant, obvious cases of absolute path traversal.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more\nvulnerabilities that FindBugs doesn''t report. If you are concerned about absolute path traversal, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>', 2, NULL, 'Absolute path traversal in servlet', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(478, 'NM_VERY_CONFUSING_INTENTIONAL', 'NM_VERY_CONFUSING_INTENTIONAL', 'findbugs', '<p> The referenced methods have names that differ only by capitalization. \nThis is very confusing because if the capitalization were\nidentical then one of the methods would override the other. From the existence of other methods, it\nseems that the existence of both of these methods is intentional, but is sure is confusing. \nYou should try hard to eliminate one of them, unless you are forced to have both due to frozen APIs.\n</p>', 2, NULL, 'Bad practice - Very confusing method names (but perhaps intentional)', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(479, 'XSS_REQUEST_PARAMETER_TO_SEND_ERROR', 'XSS_REQUEST_PARAMETER_TO_SEND_ERROR', 'findbugs', '<p>This code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this untrusted input allows\nfor a reflected cross site scripting\nvulnerability. See <a href="http://en.wikipedia.org/wiki/Cross-site_scripting">http://en.wikipedia.org/wiki/Cross-site_scripting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of cross site scripting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more cross site scripting\nvulnerabilities that FindBugs doesn''t report. If you are concerned about cross site scripting, you should seriously \nconsider using a commercial static analysis or pen-testing tool.\n</p>', 3, NULL, 'Security - Servlet reflected cross site scripting vulnerability', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 20, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '3h', NULL, NULL, NULL, 0, 'HTML'),
(480, 'SE_PRIVATE_READ_RESOLVE_NOT_INHERITED', 'SE_PRIVATE_READ_RESOLVE_NOT_INHERITED', 'findbugs', '<p> This class defines a private readResolve method. Since it is private, it won''t be inherited by subclasses.\nThis might be intentional and OK, but should be reviewed to ensure it is what is intended.\n</p>', 2, NULL, 'Dodgy - private readResolve method not inherited by subclasses', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5h', NULL, NULL, NULL, 0, 'HTML'),
(481, 'DMI_INVOKING_TOSTRING_ON_ARRAY', 'DMI_INVOKING_TOSTRING_ON_ARRAY', 'findbugs', '<p>\nThe code invokes toString on an array, which will generate a fairly useless result\nsuch as [C@16f0472. Consider using Arrays.toString to convert the array into a readable\nString that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.\n</p>', 3, NULL, 'Correctness - Invocation of toString on an array', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(482, 'NP_ARGUMENT_MIGHT_BE_NULL', 'NP_ARGUMENT_MIGHT_BE_NULL', 'findbugs', '<p>\n	A parameter to this method has been identified as a value that should\n	always be checked to see whether or not it is null, but it is being dereferenced\n	without a preceding null check.\n      </p>', 2, NULL, 'Correctness - Method does not check for null argument', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(483, 'CO_ABSTRACT_SELF', 'CO_ABSTRACT_SELF', 'findbugs', '<p> This class defines a covariant version of <code>compareTo()</code>.&nbsp;\n  To correctly override the <code>compareTo()</code> method in the\n  <code>Comparable</code> interface, the parameter of <code>compareTo()</code>\n  must have type <code>java.lang.Object</code>.</p>', 2, NULL, 'Bad practice - Abstract class defines covariant compareTo() method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(484, 'DM_EXIT', 'DM_EXIT', 'findbugs', '<p> Invoking System.exit shuts down the entire Java virtual machine. This\n   should only been done when it is appropriate. Such calls make it\n   hard or impossible for your code to be invoked by other code.\n   Consider throwing a RuntimeException instead.</p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1147} instead.\n</p>', 2, NULL, 'Bad practice - Method invokes System.exit(...)', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(485, 'RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED', 'RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED', 'findbugs', 'The putIfAbsent method is typically used to ensure that a single value is associated with a given key (the first value for which put if absent succeeds). If you ignore the return value and retain a reference to the value passed in, you run the risk of retaining a value that is not the one that is associated with the key in the map. If it matters which one you use and you use the one that isn''t stored in the map, your program will behave incorrectly.', 2, NULL, 'Correctness - Return value of putIfAbsent ignored, value passed to putIfAbsent reused', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(486, 'UL_UNRELEASED_LOCK_EXCEPTION_PATH', 'UL_UNRELEASED_LOCK_EXCEPTION_PATH', 'findbugs', '<p> This method acquires a JSR-166 (<code>java.util.concurrent</code>) lock,\nbut does not release it on all exception paths out of the method.  In general, the correct idiom\nfor using a JSR-166 lock is:\n</p>\n<pre>\n    Lock l = ...;\n    l.lock();\n    try {\n        // do something\n    } finally {\n        l.unlock();\n    }\n</pre>', 3, NULL, 'Multithreaded correctness - Method does not release lock on all exception paths', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(487, 'SE_BAD_FIELD', 'SE_BAD_FIELD', 'findbugs', '<p>\n      This Serializable class defines a non-primitive instance field which is neither transient, \n      Serializable, or <code>java.lang.Object</code>, and does not appear to implement the <code>Externalizable</code> \n      interface or the <code>readObject()</code> and <code>writeObject()</code> methods.  \n      Objects of this class will not be deserialized correctly if a non-Serializable object is stored in this field.\n      </p>', 2, NULL, 'Non-transient non-serializable instance field in serializable class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(488, 'SA_LOCAL_SELF_ASSIGNMENT', 'SA_LOCAL_SELF_ASSIGNMENT', 'findbugs', '<p> This method contains a self assignment of a local variable; e.g.</p>\n<pre>\n  public void foo() {\n    int x = 3;\n    x = x;\n  }\n</pre>\n<p>\nSuch assignments are useless, and may indicate a logic error or typo.\n</p>', 3, NULL, 'Dodgy - Self assignment of local variable', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(489, 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD', 'findbugs', '<p>The program is dereferencing a public or protected field that does not seem to ever have a non-null\n value written to it. Unless the field is initialized via some mechanism not seen by the analysis, \n dereferencing this value will generate a null pointer exception.</p>', 2, NULL, 'Read of unwritten public or protected field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(490, 'RR_NOT_CHECKED', 'RR_NOT_CHECKED', 'findbugs', '<p> This method ignores the return value of one of the variants of\n  <code>java.io.InputStream.read()</code> which can return multiple bytes.&nbsp;\n  If the return value is not checked, the caller will not be able to correctly\n  handle the case where fewer bytes were read than the caller requested.&nbsp;\n  This is a particularly insidious kind of bug, because in many programs,\n  reads from input streams usually do read the full amount of data requested,\n  causing the program to fail only sporadically.</p>', 2, NULL, 'Bad practice - Method ignores results of InputStream.read()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(491, 'ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD', 'ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD', 'findbugs', '<p> This instance method writes to a static field. This is tricky to get\ncorrect if multiple instances are being manipulated,\nand generally bad practice.\n</p>', 3, NULL, 'Dodgy - Write to static field from instance method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5h', NULL, NULL, NULL, 0, 'HTML'),
(492, 'EQ_SELF_NO_OBJECT', 'EQ_SELF_NO_OBJECT', 'findbugs', '<p> This class defines a covariant version of <code>equals()</code>.&nbsp;\n  To correctly override the <code>equals()</code> method in\n  <code>java.lang.Object</code>, the parameter of <code>equals()</code>\n  must have type <code>java.lang.Object</code>.</p>\n\n<p>\nThis rule is deprecated, use {rule:squid:S1201} instead.\n</p>', 2, NULL, 'Bad practice - Covariant equals() method defined', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(493, 'NP_TOSTRING_COULD_RETURN_NULL', 'NP_TOSTRING_COULD_RETURN_NULL', 'findbugs', '<p>\n	This toString method seems to return null in some circumstances. A liberal reading of the\n	spec could be interpreted as allowing this, but it is probably a bad idea and could cause\n	other code to break. Return the empty string or some other appropriate string rather than null.\n      </p>', 3, NULL, 'Bad practice - toString method may return null', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(494, 'GC_UNRELATED_TYPES', 'GC_UNRELATED_TYPES', 'findbugs', '<p> This call to a generic collection method contains an argument\n     with an incompatible class from that of the collection''s parameter\n	(i.e., the type of the argument is neither a supertype nor a subtype \n		of the corresponding generic type argument).\n     Therefore, it is unlikely that the collection contains any objects \n	that are equal to the method argument used here.\n	Most likely, the wrong value is being passed to the method.</p>\n	<p>In general, instances of two unrelated classes are not equal. \n	For example, if the <code>Foo</code> and <code>Bar</code> classes\n	are not related by subtyping, then an instance of <code>Foo</code>\n		should not be equal to an instance of <code>Bar</code>.\n	Among other issues, doing so will likely result in an equals method\n	that is not symmetrical. For example, if you define the <code>Foo</code> class\n	so that a <code>Foo</code> can be equal to a <code>String</code>,\n	your equals method isn''t symmetrical since a <code>String</code> can only be equal\n	to a <code>String</code>.\n	</p>\n	<p>In rare cases, people do define nonsymmetrical equals methods and still manage to make \n	their code work. Although none of the APIs document or guarantee it, it is typically\n	the case that if you check if a <code>Collection&lt;String&gt;</code> contains\n	a <code>Foo</code>, the equals method of argument (e.g., the equals method of the \n	<code>Foo</code> class) used to perform the equality checks.\n	</p>', 3, NULL, 'Correctness - No relationship between generic parameter and method argument', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(495, 'IL_INFINITE_RECURSIVE_LOOP', 'IL_INFINITE_RECURSIVE_LOOP', 'findbugs', '<p>This method unconditionally invokes itself. This would seem to indicate\nan infinite recursive loop that will result in a stack overflow.</p>', 3, NULL, 'Correctness - An apparent infinite recursive loop', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(496, 'DM_STRING_TOSTRING', 'DM_STRING_TOSTRING', 'findbugs', '<p> Calling <code>String.toString()</code> is just a redundant operation.\n  Just use the String.</p>', 0, NULL, 'Performance - Method invokes toString() method on a String', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(497, 'AM_CREATES_EMPTY_ZIP_FILE_ENTRY', 'AM_CREATES_EMPTY_ZIP_FILE_ENTRY', 'findbugs', '<p>The code calls <code>putNextEntry()</code>, immediately\nfollowed by a call to <code>closeEntry()</code>. This results\nin an empty ZipFile entry. The contents of the entry\nshould be written to the ZipFile between the calls to\n<code>putNextEntry()</code> and\n<code>closeEntry()</code>.</p>', 2, NULL, 'Bad practice - Creates an empty zip file entry', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(498, 'NS_NON_SHORT_CIRCUIT', 'NS_NON_SHORT_CIRCUIT', 'findbugs', '<p> This code seems to be using non-short-circuit logic (e.g., &amp;\nor |)\nrather than short-circuit logic (&amp;&amp; or ||).\nNon-short-circuit logic causes both sides of the expression\nto be evaluated even when the result can be inferred from\nknowing the left-hand side. This can be less efficient and\ncan result in errors if the left-hand side guards cases\nwhen evaluating the right-hand side can generate an error.\n\n<p>See <a href="http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.22.2">the Java\nLanguage Specification</a> for details\n\n</p>', 2, NULL, 'Dodgy - Questionable use of non-short-circuit logic', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(499, 'DM_BOOLEAN_CTOR', 'DM_BOOLEAN_CTOR', 'findbugs', '<p> Creating new instances of <code>java.lang.Boolean</code> wastes\n  memory, since <code>Boolean</code> objects are immutable and there are\n  only two useful values of this type.&nbsp; Use the <code>Boolean.valueOf()</code>\n  method (or Java 1.5 autoboxing) to create <code>Boolean</code> objects instead.</p>', 2, NULL, 'Performance - Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(500, 'BC_BAD_CAST_TO_CONCRETE_COLLECTION', 'BC_BAD_CAST_TO_CONCRETE_COLLECTION', 'findbugs', '<p>\nThis code casts an abstract collection (such as a Collection, List, or Set)\nto a specific concrete implementation (such as an ArrayList or HashSet).\nThis might not be correct, and it may make your code fragile, since\nit makes it harder to switch to other concrete implementations at a future\npoint. Unless you have a particular reason to do so, just use the abstract\ncollection class.\n</p>', 3, NULL, 'Dodgy - Questionable cast to concrete collection', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(501, 'SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS', 'SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS', 'findbugs', '<p> This class is an inner class, but does not use its embedded reference\n  to the object which created it except during construction of the\ninner object.&nbsp; This reference makes the instances\n  of the class larger, and may keep the reference to the creator object\n  alive longer than necessary.&nbsp; If possible, the class should be\n  made into a <em>static</em> inner class. Since the reference to the\n   outer object is required during construction of the inner instance,\n   the inner class will need to be refactored so as to\n   pass a reference to the outer instance to the constructor\n   for the inner class.</p>', 2, NULL, 'Performance - Could be refactored into a static inner class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(502, 'LI_LAZY_INIT_STATIC', 'LI_LAZY_INIT_STATIC', 'findbugs', '<p> This method contains an unsynchronized lazy initialization of a non-volatile static field.\nBecause the compiler or processor may reorder instructions,\nthreads are not guaranteed to see a completely initialized object,\n<em>if the method can be called by multiple threads</em>.\nYou can make the field volatile to correct the problem.\nFor more information, see the\n<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/">Java Memory Model web site</a>.\n</p>', 3, NULL, 'Multithreaded correctness - Incorrect lazy initialization of static field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(503, 'NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER', 'NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER', 'findbugs', '<p>The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed\nin order to compile it in later versions of Java.</p>', 2, NULL, 'Bad practice - Use of identifier that is a keyword in later versions of Java', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 6, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(504, 'ICAST_INTEGER_MULTIPLY_CAST_TO_LONG', 'ICAST_INTEGER_MULTIPLY_CAST_TO_LONG', 'findbugs', '<p>\nThis code performs integer multiply and then converts the result to a long,\nas in:\n<code>\n<pre> \n	long convertDaysToMilliseconds(int days) { return 1000*3600*24*days; } \n</pre></code>\nIf the multiplication is done using long arithmetic, you can avoid\nthe possibility that the result will overflow. For example, you\ncould fix the above code to:\n<code>\n<pre> \n	long convertDaysToMilliseconds(int days) { return 1000L*3600*24*days; } \n</pre></code>\nor \n<code>\n<pre> \n	static final long MILLISECONDS_PER_DAY = 24L*3600*1000;\n	long convertDaysToMilliseconds(int days) { return days * MILLISECONDS_PER_DAY; } \n</pre></code>\n</p>', 3, NULL, 'Dodgy - Result of integer multiplication cast to long', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(505, 'STI_INTERRUPTED_ON_UNKNOWNTHREAD', 'STI_INTERRUPTED_ON_UNKNOWNTHREAD', 'findbugs', '<p>\nThis method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is\nnot the current thread. As the interrupted() method is static, the interrupted method will be called on a different\nobject than the one the author intended.\n</p>', 3, NULL, 'Correctness - Static Thread.interrupted() method invoked on thread instance', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(506, 'DMI_DOH', 'DMI_DOH', 'findbugs', '<p>This partical method invocation doesn''t make sense, for reasons that should be apparent from inspection.</p>', 2, NULL, 'D''oh! A nonsensical method invocation', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(507, 'SA_FIELD_SELF_ASSIGNMENT', 'SA_FIELD_SELF_ASSIGNMENT', 'findbugs', '<p> This method contains a self assignment of a field; e.g.\n</p>\n<pre>\n  int x;\n  public void foo() {\n    x = x;\n  }\n</pre>\n<p>Such assignments are useless, and may indicate a logic error or typo.</p>', 3, NULL, 'Correctness - Self assignment of field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(508, 'DMI_EMPTY_DB_PASSWORD', 'DMI_EMPTY_DB_PASSWORD', 'findbugs', '<p>This code creates a database connect using a blank or empty password. This indicates that the database is not protected by a password. \n</p>', 3, NULL, 'Security - Empty database password', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(509, 'IJU_BAD_SUITE_METHOD', 'IJU_BAD_SUITE_METHOD', 'findbugs', '<p> Class is a JUnit TestCase and defines a suite() method.\nHowever, the suite method needs to be declared as either\n<pre>public static junit.framework.Test suite()</pre>\nor \n<pre>public static junit.framework.TestSuite suite()</pre>\n</p>', 3, NULL, 'Correctness - TestCase declares a bad suite method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(510, 'VA_FORMAT_STRING_MISSING_ARGUMENT', 'VA_FORMAT_STRING_MISSING_ARGUMENT', 'findbugs', '<p>\nNot enough arguments are passed to satisfy a placeholder in the format string.\nA runtime exception will occur when \nthis statement is executed.\n</p>', 3, NULL, 'Correctness - Format string references missing argument', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(511, 'BIT_ADD_OF_SIGNED_BYTE', 'BIT_ADD_OF_SIGNED_BYTE', 'findbugs', '<p> Adds a byte value and a value which is known to the 8 lower bits clear.\nValues loaded from a byte array are sign extended to 32 bits\nbefore any any bitwise operations are performed on the value.\nThus, if <code>b[0]</code> contains the value <code>0xff</code>, and\n<code>x</code> is initially 0, then the code \n<code>((x &lt;&lt; 8) + b[0])</code>  will sign extend <code>0xff</code>\nto get <code>0xffffffff</code>, and thus give the value\n<code>0xffffffff</code> as the result.\n</p>\n\n<p>In particular, the following code for packing a byte array into an int is badly wrong: </p>\n<pre>\nint result = 0;\nfor(int i = 0; i &lt; 4; i++) \n  result = ((result &lt;&lt; 8) + b[i]);\n</pre>\n\n<p>The following idiom will work instead: </p>\n<pre>\nint result = 0;\nfor(int i = 0; i &lt; 4; i++) \n  result = ((result &lt;&lt; 8) + (b[i] &amp; 0xff));\n</pre>', 3, NULL, 'Correctness - Bitwise add of signed byte value', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(512, 'SBSC_USE_STRINGBUFFER_CONCATENATION', 'SBSC_USE_STRINGBUFFER_CONCATENATION', 'findbugs', '<p> The method seems to be building a String using concatenation in a loop.\nIn each iteration, the String is converted to a StringBuffer/StringBuilder,\n   appended to, and converted back to a String.\n   This can lead to a cost quadratic in the number of iterations,\n   as the growing string is recopied in each iteration. </p>\n\n<p>Better performance can be obtained by using\na StringBuffer (or StringBuilder in Java 1.5) explicitly.</p>\n\n<p> For example:</p>\n<pre>\n  // This is bad\n  String s = "";\n  for (int i = 0; i &lt; field.length; ++i) {\n    s = s + field[i];\n  }\n\n  // This is better\n  StringBuffer buf = new StringBuffer();\n  for (int i = 0; i &lt; field.length; ++i) {\n    buf.append(field[i]);\n  }\n  String s = buf.toString();\n</pre>\n\n<p>\n  This rule is deprecated, use {rule:squid:S1643} instead.\n</p>', 3, NULL, 'Performance - Method concatenates strings using + in a loop', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(513, 'TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED', 'TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED', 'findbugs', '<p>\n        A value specified as carrying a type qualifier annotation is\n        consumed in a location or locations requiring that the value not\n        carry that annotation.\n        </p>\n        \n        <p>\n        More precisely, a value annotated with a type qualifier specifying when=ALWAYS\n        is guaranteed to reach a use or uses where the same type qualifier specifies when=NEVER.\n        </p>\n        \n        <p>\n        For example, say that @NonNegative is a nickname for\n        the type qualifier annotation @Negative(when=When.NEVER).\n        The following code will generate this warning because\n        the return statement requires a @NonNegative value,\n        but receives one that is marked as @Negative.   \n        </p>\n        <blockquote>\n<pre>\npublic @NonNegative Integer example(@Negative Integer value) {\n    return value;\n}\n</pre>\n        </blockquote>', 3, NULL, 'Correctness - Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(514, 'EQ_ALWAYS_TRUE', 'EQ_ALWAYS_TRUE', 'findbugs', '<p> This class defines an equals method that always returns true. This is imaginative, but not very smart.\nPlus, it means that the equals method is not symmetric.\n</p>', 4, NULL, 'Correctness - equals method always returns true', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(515, 'ISC_INSTANTIATE_STATIC_CLASS', 'ISC_INSTANTIATE_STATIC_CLASS', 'findbugs', '<p> This class allocates an object that is based on a class that only supplies static methods. This object\ndoes not need to be created, just access the static methods directly using the class name as a qualifier.</p>', 2, NULL, 'Bad practice - Needless instantiation of class that only supplies static methods', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(516, 'BC_BAD_CAST_TO_ABSTRACT_COLLECTION', 'BC_BAD_CAST_TO_ABSTRACT_COLLECTION', 'findbugs', '<p>\nThis code casts a Collection to an abstract collection\n(such as <code>List</code>, <code>Set</code>, or <code>Map</code>).\nEnsure that you are guaranteed that the object is of the type\nyou are casting to. If all you need is to be able\nto iterate through a collection, you don''t need to cast it to a Set or List.\n</p>', 2, NULL, 'Dodgy - Questionable cast to abstract collection', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(517, 'IT_NO_SUCH_ELEMENT', 'IT_NO_SUCH_ELEMENT', 'findbugs', '<p> This class implements the <code>java.util.Iterator</code> interface.&nbsp;\n  However, its <code>next()</code> method is not capable of throwing\n  <code>java.util.NoSuchElementException</code>.&nbsp; The <code>next()</code>\n  method should be changed so it throws <code>NoSuchElementException</code>\n  if is called when there are no more elements to return.</p>', 1, NULL, 'Bad practice - Iterator next() method can''t throw NoSuchElementException', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(518, 'EI_EXPOSE_REP', 'EI_EXPOSE_REP', 'findbugs', '<p> Returning a reference to a mutable object value stored in one of the object''s fields\n  exposes the internal representation of the object.&nbsp;\n   If instances\n   are accessed by untrusted code, and unchecked changes to\n   the mutable object would compromise security or other\n   important properties, you will need to do something different.\n  Returning a new copy of the object is better approach in many situations.</p>', 2, NULL, 'Malicious code vulnerability - May expose internal representation by returning reference to mutable object', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 20, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(519, 'MSF_MUTABLE_SERVLET_FIELD', 'MSF_MUTABLE_SERVLET_FIELD', 'findbugs', '<p>A web server generally only creates one instance of servlet or jsp class (i.e., treats\nthe class as a Singleton), \nand will \nhave multiple threads invoke methods on that instance to service multiple \nsimultaneous requests.\nThus, having a mutable instance field generally creates race conditions.', 2, NULL, 'Multithreaded correctness - Mutable servlet field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(520, 'BIT_IOR_OF_SIGNED_BYTE', 'BIT_IOR_OF_SIGNED_BYTE', 'findbugs', '<p> Loads a value from a byte array and performs a bitwise OR with\nthat value. Values loaded from a byte array are sign extended to 32 bits\nbefore any any bitwise operations are performed on the value.\nThus, if <code>b[0]</code> contains the value <code>0xff</code>, and\n<code>x</code> is initially 0, then the code \n<code>((x &lt;&lt; 8) | b[0])</code>  will sign extend <code>0xff</code>\nto get <code>0xffffffff</code>, and thus give the value\n<code>0xffffffff</code> as the result.\n</p>\n\n<p>In particular, the following code for packing a byte array into an int is badly wrong: </p>\n<pre>\nint result = 0;\nfor(int i = 0; i &lt; 4; i++) \n  result = ((result &lt;&lt; 8) | b[i]);\n</pre>\n\n<p>The following idiom will work instead: </p>\n<pre>\nint result = 0;\nfor(int i = 0; i &lt; 4; i++) \n  result = ((result &lt;&lt; 8) | (b[i] &amp; 0xff));\n</pre>', 3, NULL, 'Correctness - Bitwise OR of signed byte value', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(521, 'JLM_JSR166_LOCK_MONITORENTER', 'JLM_JSR166_LOCK_MONITORENTER', 'findbugs', '<p> This method performs synchronization on an implementation of\n<code>java.util.concurrent.locks.Lock</code>.  You should use\nthe <code>lock()</code> and <code>unlock()</code> methods instead.\n</p>', 3, NULL, 'Multithreaded correctness - Synchronization performed on java.util.concurrent Lock', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(522, 'SE_NONSTATIC_SERIALVERSIONID', 'SE_NONSTATIC_SERIALVERSIONID', 'findbugs', '<p> This class defines a <code>serialVersionUID</code> field that is not static.&nbsp;\n  The field should be made static\n   if it is intended to specify\n   the version UID for purposes of serialization.</p>', 2, NULL, 'Bad practice - serialVersionUID isn''t static', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(523, 'BC_VACUOUS_INSTANCEOF', 'BC_VACUOUS_INSTANCEOF', 'findbugs', '<p>\nThis instanceof test will always return true (unless the value being tested is null). \nAlthough this is safe, make sure it isn''t\nan indication of some misunderstanding or some other logic error.\nIf you really want to test the value for being null, perhaps it would be clearer to do\nbetter to do a null test rather than an instanceof test.\n</p>', 3, NULL, 'Dodgy - instanceof will always return true', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(524, 'RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN', 'RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN', 'findbugs', 'This method compares two Boolean values using the == or != operator. Normally, there are only two Boolean values (Boolean.TRUE and Boolean.FALSE), but it is possible to create other Boolean objects using the new Boolean(b) constructor. It is best to avoid such objects, but if they do exist, then checking Boolean objects for equality using == or != will give results than are different than you would get using .equals(...)', 2, NULL, 'Correctness - Suspicious reference comparison of Boolean values', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(525, 'NS_DANGEROUS_NON_SHORT_CIRCUIT', 'NS_DANGEROUS_NON_SHORT_CIRCUIT', 'findbugs', '<p> This code seems to be using non-short-circuit logic (e.g., &amp;\nor |)\nrather than short-circuit logic (&amp;&amp; or ||). In addition, \nit seem possible that, depending on the value of the left hand side, you might not\nwant to evaluate the right hand side (because it would have side effects, could cause an exception\nor could be expensive.</p>\n<p>\nNon-short-circuit logic causes both sides of the expression\nto be evaluated even when the result can be inferred from\nknowing the left-hand side. This can be less efficient and\ncan result in errors if the left-hand side guards cases\nwhen evaluating the right-hand side can generate an error.\n</p>\n\n<p>See <a href="http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.22.2">the Java\nLanguage Specification</a> for details\n\n</p>', 3, NULL, 'Dodgy - Potentially dangerous use of non-short-circuit logic', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(526, 'BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY', 'BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY', 'findbugs', '<p>This code is casting the result of calling toArray() on a collection to a type more specific than Object[], as in:</p>\n<pre>\n  String[] getAsArray(Collection<String> c) {\n    return (String[]) c.toArray();\n  }\n</pre>\n<p>This will usually fail by throwing a ClassCastException. The <code>toArray()</code> of almost all collections return an <code>Object[]</code>. They can''t really do anything else, since the Collection object has no reference to the declared generic type of the collection.</p>\n<p>The correct way to do get an array of a specific type from a collection is to use <code>c.toArray(new String[]);</code> or <code>c.toArray(new String[c.size()]);</code> (the latter is slightly more efficient).</p>\n<p>There is one common/known exception exception to this. The toArray() method of lists returned by Arrays.asList(...) will return a covariantly typed array. For example, <code>Arrays.asArray(new String[] { "a" }).toArray()</code> will return a String []. FindBugs attempts to detect and suppress such cases, but may miss some.</p>', 4, NULL, 'Correctness - Impossible downcast of toArray() result', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(527, 'MS_OOI_PKGPROTECT', 'MS_OOI_PKGPROTECT', 'findbugs', '<p>\n A final static field that is\ndefined in an interface references a mutable\n   object such as an array or hashtable.\n   This mutable object could\n   be changed by malicious code or\n        by accident from another package.\n   To solve this, the field needs to be moved to a class\n   and made package protected\n   to avoid\n        this vulnerability.</p>', 2, NULL, 'Malicious code vulnerability - Field should be moved out of an interface and made package protected', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 18, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(528, 'EC_UNRELATED_TYPES', 'EC_UNRELATED_TYPES', 'findbugs', '<p> This method calls equals(Object) on two references of different\nclass types with no common subclasses.\nTherefore, the objects being compared\nare unlikely to be members of the same class at runtime\n(unless some application classes were not analyzed, or dynamic class\nloading can occur at runtime).\nAccording to the contract of equals(),\nobjects of different\nclasses should always compare as unequal; therefore, according to the\ncontract defined by java.lang.Object.equals(Object),\nthe result of this comparison will always be false at runtime.\n</p>', 3, NULL, 'Correctness - Call to equals() comparing different types', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(529, 'MS_EXPOSE_REP', 'MS_EXPOSE_REP', 'findbugs', '<p> A public static method returns a reference to\n   an array that is part of the static state of the class.\n   Any code that calls this method can freely modify\n   the underlying array.\n   One fix is to return a copy of the array.</p>', 3, NULL, 'Malicious code vulnerability - Public static method may expose internal representation by returning array', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 20, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(530, 'NP_IMMEDIATE_DEREFERENCE_OF_READLINE', 'NP_IMMEDIATE_DEREFERENCE_OF_READLINE', 'findbugs', '<p> The result of invoking readLine() is immediately dereferenced. If there are no more lines of text\nto read, readLine() will return null and dereferencing that will generate a null pointer exception.\n</p>', 3, NULL, 'Dodgy - Immediate dereference of the result of readLine()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(531, 'ESync_EMPTY_SYNC', 'ESync_EMPTY_SYNC', 'findbugs', '<p> The code contains an empty synchronized block:</p>\n<pre>\nsynchronized() {}\n</pre>\n<p>Empty synchronized blocks are far more subtle and hard to use correctly\nthan most people recognize, and empty synchronized blocks\nare almost never a better solution\nthan less contrived solutions.\n</p>', 2, NULL, 'Multithreaded correctness - Empty synchronized block', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 46, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(532, 'HRS_REQUEST_PARAMETER_TO_COOKIE', 'HRS_REQUEST_PARAMETER_TO_COOKIE', 'findbugs', '<p>This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added to an HTTP response, it will allow a HTTP response splitting\nvulnerability. See <a href="http://en.wikipedia.org/wiki/HTTP_response_splitting">http://en.wikipedia.org/wiki/HTTP_response_splitting</a>\nfor more information.</p>\n<p>FindBugs looks only for the most blatant, obvious cases of HTTP response splitting.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more \nvulnerabilities that FindBugs doesn''t report. If you are concerned about HTTP response splitting, you should seriously \nconsider using a commercial static analysis or pen-testing tool.\n</p>', 2, NULL, 'Security - HTTP cookie formed from untrusted input', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 20, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(533, 'UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS', 'UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS', 'findbugs', '<p> This anonymous class defined a method that is not directly invoked and does not override\na method in a superclass. Since methods in other classes cannot directly invoke methods\ndeclared in an anonymous class, it seems that this method is uncallable. The method\nmight simply be dead code, but it is also possible that the method is intended to\noverride a method declared in a superclass, and due to an typo or other error the method does not,\nin fact, override the method it is intended to.\n</p>', 3, NULL, 'Correctness - Uncallable method defined in anonymous class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(534, 'DLS_OVERWRITTEN_INCREMENT', 'DLS_OVERWRITTEN_INCREMENT', 'findbugs', '<p>\nThe code performs an increment operation (e.g., <code>i++</code>) and then\nimmediately overwrites it. For example, <code>i = i++</code> immediately\noverwrites the incremented value with the original value.\n</p>', 3, NULL, 'Correctness - Overwritten increment', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(535, 'PT_RELATIVE_PATH_TRAVERSAL', 'PT_RELATIVE_PATH_TRAVERSAL', 'findbugs', '<p>\nThe software uses an HTTP request parameter to construct a pathname that should be within a restricted directory,\nbut it does not properly neutralize sequences such as ".." that can resolve to a location that is outside of that directory.\n\nSee <a href="http://cwe.mitre.org/data/definitions/23.html">http://cwe.mitre.org/data/definitions/23.html</a> for more information.</p>\n\n<p>\nFindBugs looks only for the most blatant, obvious cases of relative path traversal.\nIf FindBugs found <em>any</em>, you <em>almost certainly</em> have more\nvulnerabilities that FindBugs doesn''t report. If you are concerned about relative path traversal, you should seriously\nconsider using a commercial static analysis or pen-testing tool.\n</p>', 2, NULL, 'Relative path traversal in servlet', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(536, 'DuplicatedBlocks', 'DuplicatedBlocks', 'common-php', '<p>\n  An issue is created on a file as soon as there is at least one block of duplicated code on this file.\n</p>', 2, NULL, 'Source files should not have any duplicated blocks', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 36, NULL, 'LINEAR', NULL, '10min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(537, 'InsufficientCommentDensity', 'InsufficientCommentDensity', 'common-php', '<p>\n  An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.\n</p>', 2, NULL, 'Source files should have a sufficient density of comment lines', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '1min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(538, 'SkippedUnitTests', 'SkippedUnitTests', 'common-php', '<p>\n  Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.\n</p>', 2, NULL, 'Skipped unit tests should be either removed or fixed', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'LINEAR', NULL, '10min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(539, 'InsufficientLineCoverage', 'InsufficientLineCoverage', 'common-php', '<p>\n  An issue is created on a file as soon as the line coverage on this file is less than the required threshold.It gives the number of lines to be covered in order to reach the required threshold.\n</p>', 2, NULL, 'Insufficient line coverage by unit tests', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'LINEAR', NULL, '1min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(540, 'FailedUnitTests', 'FailedUnitTests', 'common-php', '<p>\n  Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.\n</p>', 2, NULL, 'Failed unit tests should be fixed', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'LINEAR', NULL, '10min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(541, 'InsufficientBranchCoverage', 'InsufficientBranchCoverage', 'common-php', '<p>\n  An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.\n</p>', 2, NULL, 'Insufficient branch coverage by unit tests', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(542, 'FieldsetWithoutLegendCheck', NULL, 'Web', '<p>\nFor users of assistive technology such as screen readers, it may be challenging to know what is expected in each form''s input.\nThe input''s label alone might not be sufficient: ''street'' could be part of a billing or a shipping address for instance.\n</p>\n\n<p>\nFieldset legends are read out loud by screen readers before the label each time the focus is set on an input.\nFor example, a legend ''Billing address'' with a label ''Street'' will read ''Billing address street''.\nLegends should be short, and ''Your'' should not be repeated in both the legend and the label, as it would result in ''Your address Your City'' being read.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;fieldset&gt;                                 &lt;!-- Non-Compliant --&gt;\n  Street: &lt;input type="text"&gt;&lt;br /&gt;\n  Town: &lt;input type="text"&gt;&lt;br /&gt;\n  Country: &lt;input type="text"&gt;&lt;br /&gt;\n&lt;/fieldset&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;fieldset&gt;                                 &lt;!-- Compliant --&gt;\n  &lt;legend&gt;Billing address&lt;/legend&gt;\n  Street: &lt;input type="text"&gt;&lt;br /&gt;\n  Town: &lt;input type="text"&gt;&lt;br /&gt;\n  Country: &lt;input type="text"&gt;&lt;br /&gt;\n&lt;/fieldset&gt;\n</pre>', 2, NULL, '"fieldset" tags should contain a "legend"', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'accessibility', 0, 'HTML'),
(543, 'LinkToNothingCheck', NULL, 'Web', '<p>\n  There are two ways to build a link that has the sole purpose of running JavaScript code.\n  The goal of this rule is to ban such patterns in order to support browsing with JavaScript disabled.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;a href="#" onclick="alert(''Clicked!''); return false;"&gt;Run JavaScript Code&lt;/a&gt; &lt;!-- Noncompliant --&gt;\n&lt;a href="javascript:void(0)" onclick="alert(''Clicked!''); return false;"&gt;Run JavaScript Code&lt;/a&gt;  &lt;!-- Noncompliant --&gt;\n&lt;a id="inPageAnchor"&gt;Jump down the page to me&lt;/a&gt;  &lt;!-- Compliant --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;a id="inPageAnchor"&gt;Jump down the page to me&lt;/a&gt;  &lt;!-- Compliant --&gt;\n</pre>', 2, NULL, 'Links should not target "#" or "javascript:void(0)"', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 11, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '15min', NULL, NULL, 'user-experience', 0, 'HTML'),
(544, 'InternationalizationCheck', NULL, 'Web', '<p>\n  Web applications can be made available in multiple languages through the use of internationalization.\n  This allows the server to plug in the correct version of a piece of text based on the language chosen,\n  but it requires that internationalization messages be used instead of hard-coded text.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;form method="post"&gt;\n    &lt;label for="username"&gt;Username:&lt;/label&gt;\n    &lt;input type="text" id="username" name="username"&gt;\n    &lt;br&gt;\n    &lt;label for="password"&gt;Password:&lt;/label&gt;\n    &lt;input type="password" id="password" name="password"&gt;\n    &lt;br&gt;\n    &lt;input type="submit" name="submit" value="${buttonValue}"&gt;\n  &lt;/form&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;form method="post"&gt;\n    &lt;label for="username"&gt;&lt;fmt:message key="login.label.username" /&gt;:&lt;/label&gt;\n    &lt;input type="text" id="username" name="username"&gt;\n    &lt;br&gt;\n    &lt;label for="password"&gt;&lt;fmt:message key="login.label.password" /&gt;:&lt;/label&gt;\n    &lt;input type="password" id="password" name="password"&gt;\n    &lt;br&gt;\n    &lt;input type="submit" name="submit" value="${buttonValue}"&gt;\n  &lt;/form&gt;\n</pre>', 2, NULL, 'Labels should be defined in the resource bundle', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 11, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '15min', NULL, NULL, 'jsp-jsf,user-experience', 0, 'HTML'),
(545, 'WmodeIsWindowCheck', NULL, 'Web', '<p>\nBrowsers best support the <code>window</code> mode for the <code>wmode</code> parameter, also in terms of accessibility.\nAs it is the default mode, it is acceptable to either not specify a <code>wmode</code> parameter altogether, or to set it explicitly to <code>window</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="550" height="400"&gt;\n  &lt;param name="movie" value="movie_name.swf" /&gt;\n  &lt;param name="wmode" value="direct" /&gt;                              &lt;!-- Non-Compliant --&gt;\n&lt;/object&gt;\n\n&lt;embed src="movie_name.swf"\n       width="550"\n       height="400"\n       wmode="direct"                                                                 &lt;!-- Non-Compliant --&gt;\n       type="application/x-shockwave-flash"\n       pluginspage="http://www.macromedia.com/go/getflashplayer" /&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="550" height="400"&gt;\n  &lt;param name="movie" value="movie_name.swf" /&gt;\n&lt;/object&gt;\n\n&lt;embed src="movie_name.swf"\n       width="550"\n       height="400"\n       type="application/x-shockwave-flash"\n       pluginspage="http://www.macromedia.com/go/getflashplayer" /&gt;\n</pre>\n\n<p>or:</p>\n\n<pre>\n&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="550" height="400"&gt;\n  &lt;param name="movie" value="movie_name.swf" /&gt;\n  &lt;param name="wmode" value="window" /&gt;\n&lt;/object&gt;\n\n&lt;embed src="movie_name.swf"\n       width="550"\n       height="400"\n       wmode="window"\n       type="application/x-shockwave-flash"\n       pluginspage="http://www.macromedia.com/go/getflashplayer" /&gt;\n</pre>', 2, NULL, 'Flash animations should be embedded using the window mode', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'accessibility', 0, 'HTML'),
(546, 'UnclosedTagCheck', NULL, 'Web', '<p>\nEven if all browsers are fault-tolerant, HTML tags should be closed to prevent any unexpected behavior.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Test Page    &lt;!-- Noncompliant; title not closed --&gt;\n  &lt;!-- Noncompliant; head not closed --&gt;\n  &lt;body&gt;\n    &lt;em&gt;Emphasized Text  &lt;!-- Noncompliant; em not closed --&gt;\n  &lt;!-- Noncompliant; body not closed --&gt;\n&lt;/html&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Test Page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;em&gt;Emphasized Text&lt;/em&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>', 1, NULL, 'All HTML tags should be closed', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, NULL, 0, 'HTML'),
(547, 'RequiredAttributeCheck', NULL, 'Web', '<p>\n  This rule checks that the specified attributes are present in HTML tags.\n</p>\n<p>\n  For a required attribute list of: <code>img.alt,img.height,img.width</code>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;img src="/images/queen.png"&gt; &lt;!-- Noncompliant; missing all required attributes --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;img src="/images/queen.png" width="60" height="85" alt="Elizabeth II"&gt;\n</pre>', 2, NULL, 'Required attributes should be used', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(548, 'PageWithoutTitleCheck', NULL, 'Web', '<p>\n  Titles are important because they are displayed in search engine results as well as the browser''s toolbar.\n</p>\n\n<p>\nThis rule verifies that the <code>&lt;head&gt;</code> tag contains a <code>&lt;title&gt;</code> one, and the <code>&lt;html&gt;</code> tag a <code>&lt;head&gt;</code> one.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;html&gt;         &lt;!-- Non-Compliant --&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;html&gt;         &lt;!-- Compliant --&gt;\n\n&lt;head&gt;\n  &lt;title&gt;Some relevant title&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n...\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>', 2, NULL, '"title" should be present in all pages', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'user-experience', 0, 'HTML'),
(549, 'TableWithoutCaptionCheck', NULL, 'Web', '<p>\nIn order to be accessible to visually impaired users, it is important that tables have a caption briefly describing its contents.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;table&gt;                                                         &lt;!-- Non-Compliant --&gt;\n  ...\n&lt;table&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;table&gt;                                                         &lt;!-- Compliant --&gt;\n  &lt;caption&gt;New York City Marathon Results 2013&lt;/caption&gt;\n  ...\n&lt;table&gt;\n</pre>', 2, NULL, '"<table>" tags should contain a "<caption>"', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'accessibility', 0, 'HTML'),
(550, 'PageWithoutFaviconCheck', NULL, 'Web', '<p>\nFavicons are shown for example in the browser''s address bar, bookmark list, or tabs.\nThey enable users to quickly identify and recognize websites.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;head&gt;                                                                  &lt;!-- Non-Compliant --&gt;\n  &lt;title&gt;...&lt;title&gt;\n&lt;/head&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;head&gt;                                                                  &lt;!-- Compliant --&gt;\n  &lt;title&gt;...&lt;title&gt;\n  &lt;link rel="shortcut icon" href="http://example.com/myicon.ico" /&gt;\n&lt;/head&gt;\n</pre>', 2, NULL, 'Favicons should be used in all pages', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'user-experience', 0, 'HTML'),
(551, 'MultiplePageDirectivesCheck', NULL, 'Web', '<p>\n  While you can use as many <code>page</code> directives as you like, it is more readable to set multiple page attributes in a single directive.\n</p>\n<p>\n  The exception to this rule is when multiple packages are being imported.\n  In that case, imports may be done in separate directives and all other attributes should be set in a single, additional directive.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;%@ page session="false" %&gt;\n&lt;%@ page import="java.util.*" %&gt;\n&lt;%@ page errorPage="error.jsp" %&gt; &lt;!-- Noncompliant --&gt;\n&lt;%@ page import="java.text.*" %&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;%@ page session="false"\n                   errorPage="error.jsp" %&gt;\n&lt;%@ page import="java.util.*" %&gt;\n&lt;%@ page import="java.text.*" %&gt;\n</pre>', 1, NULL, 'Multiple "page" directives should not be used', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'convention,jsp-jsf', 0, 'HTML'),
(552, 'ImgWithoutAltCheck', NULL, 'Web', '<p>\nThe <code>alt</code> attribute provides a textual alternative to an image.\nIt is used whenever the actual image cannot be rendered.\nCommon reasons for that include:\n</p>\n\n<ul>\n  <li>The image can no longer be found</li>\n  <li>Visually impaired users using a screen reader software</li>\n  <li>Images loading is disabled, to reduce data consumption on mobile phones</li>\n</ul>\n\n<p>\n  Empty <code>alt</code> attributes are not allowed, since purely decorative images should be specified using CSS, not using the <code>img</code> tag.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;img src="foo.png" /&gt;                                           &lt;!-- Noncompliant --&gt;\n&lt;img src="foo.png" alt="" /&gt;                                    &lt;!-- Noncompliant --&gt;\n&lt;input type="image" src="bar.png" /&gt;                            &lt;!-- Noncompliant --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;img src="foo.png" alt="Some textual description of foo.png" /&gt;\n&lt;input type="image" src="bar.png" alt="Textual description of bar.png" /&gt;\n</pre>', 2, NULL, 'Images tags and buttons should have an "alt" attribute', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'accessibility', 0, 'HTML'),
(553, 'InputWithoutLabelCheck', NULL, 'Web', '<p>The <code>&lt;label&gt;</code> tag defines a label for the <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code> and <code>&lt;textarea&gt;</code> elements.</p>\n\n<p>\nThe <code>&lt;label&gt;</code> tag does not render as anything special.\nHowever, it provides a usability improvement for mouse users: When the text within the &lt;label&gt; element is clicked, the associated input field is toogled.\nIt also improves the usability for visually impaired users: Screen readers will announce the label text whenever the focus is set on the input field.\n</p>\n\n<p>The <code>for</code> attribute of the <code>&lt;label&gt;</code> tag should be equal to the <code>id</code> attribute of the related element to bind them together.</p>\n\n<p>The purpose of this rule is to make sure that any &lt;input&gt; (except "submit", "button", "image" and "hidden" ones), &lt;select&gt; and &lt;textarea&gt; field has an associated label element.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;input type="text" name="firstname" /&gt;               &lt;!-- Non-Compliant - no id --&gt;\n&lt;input type="text" name="lastname" id="lastname" /&gt;  &lt;!-- Non-Compliant - no matching label for "lastname" --&gt;\n\n&lt;label for="address"&gt;Address&lt;/label&gt;\n&lt;input type="text" name="address" id="address" /&gt;    &lt;!-- Compliant --&gt;\n\n&lt;input type="hidden" name="time" value="..."&gt;        &lt;!-- Compliant - "hidden" type is excluded --&gt;\n&lt;input type="submit" value="Send" /&gt;                 &lt;!-- Compliant - "submit" type is excluded --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;label for="firstname"&gt;First name&lt;/label&gt;\n&lt;input type="text" name="firstname" id="firstname" /&gt;\n\n&lt;label for="lastname"&gt;Last name&lt;/label&gt;\n&lt;input type="text" name="lastname" id="lastname" /&gt;\n\n&lt;label for="address"&gt;Address&lt;/label&gt;\n&lt;input type="text" name="address" id="address" /&gt;\n\n&lt;input type="hidden" name="time" value="..."&gt;\n&lt;input type="submit" value="Send" /&gt;\n</pre>', 2, NULL, '"input", "select" and "textarea" tags should have an associated "label" one', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'accessibility,user-experience', 0, 'HTML'),
(554, 'IllegalNamespaceCheck', NULL, 'Web', '<p>This rule allows to ban declaration of some namespaces in the root element of XHML documents.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>\nIn this example the value of the "namespaces" parameter is set to "http://java.sun.com/jsf/facelets".\n</p>\n\n<pre>\n&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;\n&lt;html xmlns="http://www.w3.org/1999/xhtml"\n        xmlns:ui="http://java.sun.com/jsf/facelets"    &lt;!-- Noncompliant --&gt;\n        xmlns:h="http://java.sun.com/jsf/html"\n        xmlns:f="http://java.sun.com/jsf/core"&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;\n&lt;html xmlns="http://www.w3.org/1999/xhtml"\n        xmlns:h="http://java.sun.com/jsf/html"\n        xmlns:f="http://java.sun.com/jsf/core"&gt;\n</pre>', 2, NULL, 'Disallowed namespaces should not be used in XHTML documents', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(555, 'ChildElementIllegalCheck', NULL, 'Web', '<p>\n  This rule checks that the specified child tag does not appear as a direct child of the specified parent.\n</p>\n<p>\n  Assuming a parent/child combination of <code>&lt;head&gt;</code>/<code>&lt;body&gt;</code>:\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;head&gt;\n  ...\n  &lt;body&gt;  &lt;!-- Noncompliant --&gt;\n    ...\n  &lt;/body&gt;\n&lt;/head&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;head&gt;\n  ...\n&lt;/head&gt;\n</pre>', 2, NULL, 'Disallowed child elements should not be used', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 'HTML'),
(556, 'AvoidHtmlCommentCheck', NULL, 'Web', '<p>\n  Using HTML-style comments in a page that will be generated or interpolated server-side before being served\n  to the user increases the risk of exposing data that should be kept private.\n  For instance, a developer comment or line of debugging information that''s left in a page could easily (and has) inadvertently expose:\n</p>\n<ul>\n  <li>Version numbers and host names</li>\n  <li>Full, server-side path names</li>\n  <li>Sensitive user data</li>\n</ul>\n<p>\n  Because every other language has its own native comment format, there is no justification for using HTML-style comments in anything other than a pure HTML or XML file.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;%\n      out.write("&lt;!-- ${username} --&gt;");  // Noncompliant\n  %&gt;\n  &lt;!-- &lt;% out.write(userId) %&gt; --&gt;  // Noncompliant\n  &lt;!-- #{userPhone} --&gt;  // Noncompliant\n  &lt;!-- ${userAddress} --&gt; // Noncompliant\n\n  &lt;!-- Replace ''world'' with name --&gt; // Noncompliant\n  &lt;h2&gt;Hello world!&lt;/h2&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;%-- Replace ''world'' with name %&gt;  // Compliant\n  &lt;h2&gt;Hello world!&lt;/h2&gt;\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="http://cwe.mitre.org/data/definitions/615.html">MITRE, CWE-615</a> - Information Exposure Through Comments</li>\n  <li><a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\n</ul>', 2, NULL, 'HTML comments should not be used', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'cwe,owasp-a6,security', 0, 'HTML'),
(557, 'LinkToImageCheck', NULL, 'Web', '<p>\nWhenever a user clicks one a link that targets an image, the website''s navigation menu will be lost.\nFrom a user point of view, it is as if she left the website.\nThe only way to return to it is using the browser''s ''Back'' button.\nInstead, it is better to create a page which will display the image using the <code>&lt;img&gt;</code> tag and preserve the navigation menu.\n</p>\n\n<p>\nFurther, in terms of accessibility, when the image is embedded into a page, content providers are able to provide an alternate text equivalent through the <code>alt</code> attribute.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;a href="image.png"&gt;...&lt;/a&gt;  &lt;!-- Non-Compliant --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;a href="page.html"&gt;...&lt;/a&gt;  &lt;!-- Compliant --&gt;\n</pre>', 2, NULL, 'Links should not directly target images', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '15min', NULL, NULL, 'accessibility,user-experience', 0, 'HTML'),
(558, 'TableHeaderHasIdOrScopeCheck', NULL, 'Web', '<p>\nAssociating table headers with a row, column, or a group of rows or columns enables screen reader softwares to announce the header prior to the data.\nThis considerably increases the accessibility of tables to visually impaired users.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;table border="1"&gt;\n  &lt;caption&gt;Contact Information&lt;/caption&gt;\n  &lt;tr&gt;\n    &lt;td&gt;&lt;/td&gt;\n    &lt;th&gt;Name&lt;/th&gt;                                          &lt;!-- Non-Compliant --&gt;\n    &lt;th&gt;Phone#&lt;/th&gt;                                        &lt;!-- Non-Compliant --&gt;\n    &lt;th&gt;City&lt;/th&gt;                                          &lt;!-- Non-Compliant --&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;1.&lt;/td&gt;\n    &lt;th&gt;Joel Garner&lt;/th&gt;                                   &lt;!-- Non-Compliant --&gt;\n    &lt;td&gt;412-212-5421&lt;/td&gt;\n    &lt;td&gt;Pittsburgh&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;2.&lt;/td&gt;\n    &lt;th&gt;Clive Lloyd&lt;/th&gt;                                   &lt;!-- Non-Compliant --&gt;\n    &lt;td&gt;410-306-1420&lt;/td&gt;\n    &lt;td&gt;Baltimore&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;table border="1"&gt;\n  &lt;caption&gt;Contact Information&lt;/caption&gt;\n  &lt;tr&gt;\n    &lt;td&gt;&lt;/td&gt;\n    &lt;th scope="col"&gt;Name&lt;/th&gt;                              &lt;!-- Compliant --&gt;\n    &lt;th scope="col"&gt;Phone#&lt;/th&gt;                            &lt;!-- Compliant --&gt;\n    &lt;th scope="col"&gt;City&lt;/th&gt;                              &lt;!-- Compliant --&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;1.&lt;/td&gt;\n    &lt;th scope="row"&gt;Joel Garner&lt;/th&gt;                       &lt;!-- Compliant --&gt;\n    &lt;td&gt;412-212-5421&lt;/td&gt;\n    &lt;td&gt;Pittsburgh&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;2.&lt;/td&gt;\n    &lt;th scope="row"&gt;Clive Lloyd&lt;/th&gt;                       &lt;!-- Compliant --&gt;\n    &lt;td&gt;410-306-1420&lt;/td&gt;\n    &lt;td&gt;Baltimore&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</pre>\n\n<p>or:</p>\n\n<pre>\n&lt;table border="1"&gt;\n  &lt;caption&gt;Contact Information&lt;/caption&gt;\n  &lt;tr&gt;\n    &lt;td&gt;&lt;/td&gt;\n    &lt;th id="name"&gt;Name&lt;/th&gt;                                &lt;!-- Compliant --&gt;\n    &lt;th id="phone"&gt;Phone#&lt;/th&gt;                             &lt;!-- Compliant --&gt;\n    &lt;th id="city"&gt;City&lt;/th&gt;                                &lt;!-- Compliant --&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;1.&lt;/td&gt;\n    &lt;th id="person1" headers="name"&gt;Joel Garner&lt;/th&gt;       &lt;!-- Compliant --&gt;\n    &lt;td headers="phone person1"&gt;412-212-5421&lt;/td&gt;\n    &lt;td headers="city person1"&gt;Pittsburgh&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;2.&lt;/td&gt;\n    &lt;th id="person2" headers="name"&gt;Clive Lloyd&lt;/th&gt;       &lt;!-- Compliant --&gt;\n    &lt;td headers="phone person2"&gt;410-306-1420&lt;/td&gt;\n    &lt;td headers="city person2"&gt;Baltimore&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</pre>', 2, NULL, '<th> table headers tags should have an ''id'' or a ''scope'' attribute', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'accessibility', 0, 'HTML'),
(559, 'IllegalAttributeCheck', NULL, 'Web', '<p>\n  This rule checks that the specified attributes are not present in HTML tags.\n</p>\n<p>\n  For a disallowed attribute list of: <code>a.name</code>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;a href="blah.com" name="Blah link"&gt; &lt;!-- Noncompliant; name attribute is used --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;a href="blah.com"&gt;\n</pre>', 2, NULL, 'Disallowed attributes should not be used', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 'HTML'),
(560, 'ItemTagNotWithinContainerTagCheck', NULL, 'Web', '<p>\n  Using a <code>&lt;li&gt;</code> or <code>&lt;dt&gt;</code> item tag outside of a <code>&lt;ul&gt;</code>,\n  <code>&lt;ol&gt;</code> or <code>&lt;dl&gt;</code> one does not make sense and indicates a bug.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;li&gt;Apple&lt;/li&gt;          &lt;!-- Non-Compliant --&gt;\n&lt;li&gt;Strawberry&lt;/li&gt;     &lt;!-- Non-Compliant --&gt;\n\n&lt;li&gt;Apple&lt;/li&gt;          &lt;!-- Non-Compliant --&gt;\n&lt;li&gt;Strawberry&lt;/li&gt;     &lt;!-- Non-Compliant --&gt;\n\n&lt;dt&gt;Apple&lt;/dt&gt;          &lt;!-- Non-Compliant --&gt;\n&lt;dt&gt;Strawberry&lt;/dt&gt;     &lt;!-- Non-Compliant --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;ul&gt;\n  &lt;li&gt;Apple&lt;/li&gt;        &lt;!-- Compliant --&gt;\n  &lt;li&gt;Strawberry&lt;/li&gt;   &lt;!-- Compliant --&gt;\n&lt;/ul&gt;\n\n&lt;ol&gt;\n  &lt;li&gt;Apple&lt;/li&gt;        &lt;!-- Compliant --&gt;\n  &lt;li&gt;Strawberry&lt;/li&gt;   &lt;!-- Compliant --&gt;\n&lt;/ol&gt;\n\n&lt;dl&gt;\n  &lt;dt&gt;Apple&lt;/dt&gt;        &lt;!-- Compliant --&gt;\n  &lt;dt&gt;Strawberry&lt;/dt&gt;   &lt;!-- Compliant --&gt;\n&lt;/dl&gt;\n</pre>', 3, NULL, '"<li>" and "<dt>" item tags should be in "<ul>", "<ol>" or "<dl>" container tags', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'bug', 0, 'HTML'),
(561, 'DoctypePresenceCheck', NULL, 'Web', '<p>\nThe <code>&lt;!DOCTYPE&gt;</code> declaration tells the web browser which (X)HTML version is being used on the page, and therefore how to interpret the various elements.\nValidators also rely on it to know which rules to enforce.\nIt should always preceed the <code>&lt;html&gt;</code> tag.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;html&gt;            &lt;!-- Noncompliant --&gt;\n...\n&lt;/html&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;            &lt;!-- Compliant --&gt;\n...\n&lt;/html&gt;\n</pre>', 2, NULL, 'A <!DOCTYPE> declaration should appear before the <html> tag', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 8, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'user-experience', 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(562, 'LinksIdenticalTextsDifferentTargetsCheck', NULL, 'Web', '<p>\n  When links with different targets are given identical link text, this can produce confusion for users of assistive technologies,\n  some of which provide users the ability to view a list of all links on the page.\n  When this list of links is presented to the user they may be left not knowing the links go to different destinations.\n  Even if they do realize the links go to different destinations, they may be left not knowing which link to follow to go to the destination they desire.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;a href="a.html"&gt;qux&lt;/a&gt;\n&lt;a href="b.html"&gt;qux&lt;/a&gt;          &lt;!-- Noncompliant; same text, different targets --&gt;\n\n&lt;a href="c.html"&gt;foo&lt;/a&gt;\n&lt;a href="d.html"&gt;foo&lt;/a&gt;          &lt;!-- Noncompliant; same text, different targets --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;a href="a.html"&gt;qux&lt;/a&gt;\n&lt;a href="b.html"&gt;qaz&lt;/a&gt;          &lt;!-- Compliant; different text, different targets --&gt;\n\n&lt;a href="c.html"&gt;foo&lt;/a&gt;\n&lt;a href="c.html"&gt;foo&lt;/a&gt;          &lt;!-- Compliant; same text, same targets --&gt;\n</pre>', 2, NULL, 'Links with identical texts should have identical targets', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'accessibility', 0, 'HTML'),
(563, 'ImgWithoutWidthOrHeightCheck', NULL, 'Web', '<p>\nIf the <code>width</code> and <code>height</code> attributes are set, the space required for the image is reserved immediately by the browser, even before it actually starts to load the image.\nWithout those attributes, the page layout constantly changes as images are loaded until they are all loaded, which can disorient users.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;img src="logo.png" alt="My Company" /&gt;                           &lt;!-- Non-Compliant --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;img src="logo.png" alt="My Company" width="100" height="50" /&gt;   &lt;!-- Compliant --&gt;\n</pre>', 2, NULL, 'Images tags and buttons should have a "width" and a "height" attribute', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'user-experience', 0, 'HTML'),
(564, 'BoldAndItalicTagsCheck', NULL, 'Web', '<p>\n  The &lt;strong&gt;/&lt;b&gt; and&lt;em&gt;/&lt;i&gt; tags have exactly the same effect in most web browsers, but there is a fundamental difference between them: &lt;strong> and &lt;em&gt; have a semantic meaning whereas &lt;b&gt; and &lt;i&gt; only convey styling information like CSS.\n</p>\n\n<p>\nWhen &lt;b&gt; can have simply no effect on a some device with limited display or when a screen reader software is used by a blind person, &lt;strong&gt; will:\n</p>\n\n<ul>\n <li>Speak with lower tone when using a screen reader such as Jaws</li>\n <li>And display the text bold in normal browsers</li>\n</ul>\n\n<p>Consequently:</p>\n\n<ul>\n <li>in order to convey semantics, the &lt;b&gt; and &lt;i&gt; tags shall never be used,</li>\n <li>in order to convey styling information, the &lt;b&gt; and &lt;i&gt; should be avoided and CSS should be used instead.</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;i&gt;car&lt;/i&gt;                 &lt;!-- Noncompliant --&gt;\n&lt;b&gt;train&lt;/b&gt;               &lt;!-- Noncompliant --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;em&gt;car&lt;/em&gt;               &lt;!-- Compliant --&gt;\n&lt;strong&gt;train&lt;/strong&gt;     &lt;!-- Compliant --&gt;\n</pre>', 2, NULL, '<strong> and <em> tags should be used instead of <b> and <i>', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'accessibility', 0, 'HTML'),
(565, 'ParentElementIllegalCheck', NULL, 'Web', '<p>\n  This rule is deprecated, use <code>Web:ChildElementIllegalCheck</code> instead.\n</p>\n<p>\nChecker for illegal parent element.\n<br/>\nE.g.: title must not have parent element body.\n</p>', 2, NULL, 'Parent Element Illegal', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 'HTML'),
(566, 'S1827', NULL, 'Web', '<p>\n  With the advent of HTML5, many old attributes were deprecated.\n  To ensure the best user experience, deprecated attributes should not be used. This rule checks for the following deprecated attributes, where CSS should be used instead.\n</p>\n\n<h3>Attributes</h3>\n<table>\n  <tr><th>Attribute</th><th>Removed from</th></tr>\n  <tr><td><code>accept</code></td><td><code>form</code></td></tr>\n  <tr><td><code>align</code></td><td><code>caption</code>, <code>col</code>, <code>div</code>, <code>embed</code>, <code>h1-h6</code>, <code>hr</code>, <code>iframe</code>, <code>img</code>, <code>input</code>, <code>legend</code>, <code>object</code>, <code>p</code>, <code>table</code>, <code>tbody</code>, <code>thead</code>, <code>tfoot</code>, <code>td</code>, <code>th</code>, <code>tr</code></td></tr>\n  <tr><td><code>alink</code></td><td><code>body</code></td></tr>\n  <tr><td><code>allowtransparency</code></td><td><code>iframe</code></td></tr>\n  <tr><td><code>archive</code></td><td><code>object</code></td></tr>\n  <tr><td><code>axis</code></td><td><code>td</code>, <code>th</code></td></tr>\n  <tr><td><code>background</code></td><td><code>body</code>, <code>table</code>, <code>thead</code>, <code>tbody</code>, <code>tfoot</code>, <code>tr</code>, <code>td</code>, <code>th</code></td></tr>\n  <tr><td><code>bgcolor</code></td><td><code>body</code>, <code>table</code>, <code>td</code>, <code>th</code>, <code>tr</code></td></tr>\n  <tr><td><code>border</code></td><td><code>img</code> (<code>border="0"</code> allowed), <code>object</code></td></tr>\n  <tr><td><code>bordercolor</code></td><td><code>table</code></td></tr>\n  <tr><td><code>cellpadding</code></td><td><code>table</code></td></tr>\n  <tr><td><code>cellspacing</code></td><td><code>table</code></td></tr>\n  <tr><td><code>char</code></td><td><code>col</code>, <code>tbody</code>, <code>thead</code>, <code>tfoot</code>, <code>td</code>, <code>th</code>, <code>tr</code></td></tr>\n  <tr><td><code>charoff</code></td><td><code>col</code>, <code>tbody</code>, <code>thead</code>, <code>tfoot</code>, <code>td</code>, <code>th</code>, <code>tr</code></td></tr>\n  <tr><td><code>charset</code></td><td><code>a</code>, <code>link</code></td></tr>\n  <tr><td><code>classid</code></td><td><code>object</code></td></tr>\n  <tr><td><code>clear</code></td><td><code>br</code></td></tr>\n  <tr><td><code>code</code></td><td><code>object</code></td></tr>\n  <tr><td><code>codebase</code></td><td><code>object</code></td></tr>\n  <tr><td><code>codetype</code></td><td><code>object</code></td></tr>\n  <tr><td><code>color</code></td><td><code>hr</code></td></tr>\n  <tr><td><code>compact</code></td><td><code>dl</code>, <code>ol</code>, <code>ul</code></td></tr>\n  <tr><td><code>coords</code></td><td><code>a</code></td></tr>\n  <tr><td><code>datafld</code></td><td><code>a</code>, <code>applet</code>, <code>button</code>, <code>div</code>, <code>fieldset</code>, <code>frame</code>, <code>iframe</code>, <code>img</code>, <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>, <code>object</code>, <code>param</code>, <code>select</code>, <code>span</code>, <code>textarea</code></td></tr>\n  <tr><td><code>dataformatas</code></td><td><code>button</code>, <code>div</code>, <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>, <code>object</code>, <code>option</code>, <code>select</code>, <code>span</code>, <code>table</code></td></tr>\n  <tr><td><code>datapagesize</code></td><td><code>table</code></td></tr>\n  <tr><td><code>datasrc</code></td><td><code>a</code>, <code>applet</code>, <code>button</code>, <code>div</code>, <code>frame</code>, <code>iframe</code>, <code>img</code>, <code>input</code>, <code>label</code>, <code>legend</code>, <code>marquee</code>, <code>object</code>, <code>option</code>, <code>select</code>, <code>span</code>, <code>table</code>, <code>textarea</code></td></tr>\n  <tr><td><code>declare</code></td><td><code>object</code></td></tr>\n  <tr><td><code>event</code></td><td><code>script</code></td></tr>\n  <tr><td><code>for</code></td><td><code>script</code></td></tr>\n  <tr><td><code>frame</code></td><td><code>table</code></td></tr>\n  <tr><td><code>frameborder</code></td><td><code>iframe</code></td></tr>\n  <tr><td><code>height</code></td><td><code>td</code>, <code>th</code></td></tr>\n  <tr><td><code>hspace</code></td><td><code>embed</code>, <code>iframe</code>, <code>img</code>, <code>input</code>, <code>object</code></td></tr>\n  <tr><td><code>ismap</code></td><td><code>input</code></td></tr>\n  <tr><td><code>langauge</code></td><td><code>script</code> (<code>language="javascript"</code>, case insensitive, allowed)</td></tr>\n  <tr><td><code>link</code></td><td><code>body</code></td></tr>\n  <tr><td><code>lowsrc</code></td><td><code>img</code></td></tr>\n  <tr><td><code>marginbottom</code></td><td><code>body</code></td></tr>\n  <tr><td><code>marginheight</code></td><td><code>body</code>, <code>iframe</code></td></tr>\n  <tr><td><code>marginleft</code></td><td><code>body</code></td></tr>\n  <tr><td><code>marginright</code></td><td><code>body</code></td></tr>\n  <tr><td><code>margintop</code></td><td><code>body</code></td></tr>\n  <tr><td><code>marginwidth</code></td><td><code>body</code>, <code>iframe</code></td></tr>\n  <tr><td><code>methods</code></td><td><code>a</code>, <code>link</code></td></tr>\n  <tr><td><code>name</code></td><td><code>a</code> (<code>name="[a''s element id]"</code> allowed), <code>embed</code>, <code>img</code>, <code>option</code></td></tr>\n  <tr><td><code>nohref</code></td><td><code>area</code></td></tr>\n  <tr><td><code>noshade</code></td><td><code>hr</code></td></tr>\n  <tr><td><code>nowrap</code></td><td><code>td</code>, <code>th</code></td></tr>\n  <tr><td><code>profile</code></td><td><code>head</code></td></tr>\n  <tr><td><code>rules</code></td><td><code>table</code></td></tr>\n  <tr><td><code>scheme</code></td><td><code>meta</code></td></tr>\n  <tr><td><code>scope</code></td><td><code>td</code></td></tr>\n  <tr><td><code>scrolling</code></td><td><code>iframe</code></td></tr>\n  <tr><td><code>shape</code></td><td><code>a</code></td></tr>\n  <tr><td><code>size</code></td><td><code>hr</code></td></tr>\n  <tr><td><code>standby</code></td><td><code>object</code></td></tr>\n  <tr><td><code>summary</code></td><td><code>table</code></td></tr>\n  <tr><td><code>target</code></td><td><code>link</code></td></tr>\n  <tr><td><code>text</code></td><td><code>body</code></td></tr>\n  <tr><td><code>type</code></td><td><code>li</code>, <code>param</code>, <code>ul</code></td></tr>\n  <tr><td><code>urn</code></td><td><code>a</code>, <code>link</code></td></tr>\n  <tr><td><code>usemap</code></td><td><code>input</code></td></tr>\n  <tr><td><code>valign</code></td><td><code>col</code>, <code>tbody</code>, <code>thead</code>, <code>tfoot</code>, <code>td</code>, <code>th</code>, <code>tr</code></td></tr>\n  <tr><td><code>valuetype</code></td><td><code>param</code></td></tr>\n  <tr><td><code>version</code></td><td><code>html</code></td></tr>\n  <tr><td><code>vlink</code></td><td><code>body</code></td></tr>\n  <tr><td><code>vspace</code></td><td><code>embed</code>, <code>iframe</code>, <code>img</code>, <code>input</code>, <code>object</code></td></tr>\n  <tr><td><code>width</code></td><td><code>col</code>, <code>hr</code>, <code>pre</code>, <code>table</code>, <code>td</code>, <code>th</code></td></tr>\n</table>\n\n<h2>See</h2>\n<ul>\n  <li>W3C, <a href="http://www.w3.org/TR/html5-diff">Differences in HTML5</a></li>\n  <li>W3C, <a href="http://www.w3.org/TR/html5/obsolete.html">Obsolete Features</a></li>\n  <li>WHATWG, <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/obsolete.html">Obsolete Features</a></li>\n</ul>', 2, NULL, 'Attributes deprecated in HTML5 should not be used', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 8, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'html5,obsolete', 0, 'HTML'),
(567, 'FileLengthCheck', NULL, 'Web', '<p>\n  A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\n  Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.\n  Those smaller files will not only be easier to understand but also probably easier to test.\n</p>', 2, NULL, 'Files should not have too many lines', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, 'brain-overload', 0, 'HTML'),
(568, 'MetaRefreshCheck', NULL, 'Web', '<p>\nUse of <code>&lt;meta http-equiv="refresh"&gt;</code> is discouraged by the World Wide Web Consortium (W3C).\nIf a user clicks the ''Back'' button, some browers will go back to the redirecting page, which will prevent the user from actually going back.\n</p>\n\n<p>\nTo refresh the page, a better alternative is to use Ajax, to refresh only what needs to be refreshed and not the whole page.\nTo redirect to another page, using the HTTP response status code 301 ''Moved Permanently'' and 302 ''Found'' is a better option.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;head&gt;\n  &lt;meta http-equiv="refresh" content="5"&gt;   &lt;!-- Non-Compliant --&gt;\n  &lt;meta name="description" content="..."&gt;\n&lt;/head&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;head&gt;\n  &lt;meta name="description" content="..."&gt;\n&lt;/head&gt;\n</pre>', 2, NULL, 'Meta tags should not be used to refresh the page nor for redirection', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'user-experience', 0, 'HTML'),
(569, 'IllegalTabCheck', NULL, 'Web', '<p>\n  Developers should not need to configure the tab width of their text editors in order to be able to read source code.\n  So the use of tabulation character must be banned.\n</p>', 1, NULL, 'Tabulation characters should not be used', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'convention', 0, 'HTML'),
(570, 'DynamicJspIncludeCheck', NULL, 'Web', '<p>\n  Content that doesn''t change or that doesn''t change often should be included using a mechanism which won''t try to interpret it.\n  Specifically, <code>&lt;%@ include file="..." %&gt;</code>, which includes the file in the JSP servlet translation phase (i.e. it happens once),\n  should be used instead of <code>&lt;jsp:include page="..." /&gt;</code>, which includes the page on the file, when the content is being served to the user.\n</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;jsp:include page="header.jsp"&gt;  &lt;!-- Noncompliant --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;%@ include file="header.jsp"&gt;\n</pre>', 3, NULL, 'Dynamic includes should not be used', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'jsp-jsf', 0, 'HTML'),
(571, 'NonConsecutiveHeadingCheck', NULL, 'Web', '<p>\nHeading tags are used by search engines and screen reader softwares to construct an outline of the page.\nStarting at <code>&lt;h1&gt;</code> and not skipping any level eases this automatic construction.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;h2&gt;My Title&lt;/h2&gt;     &lt;!-- Non-Compliant - h1 is not being used --&gt;\n\n&lt;h3&gt;My Sub Title&lt;/h3&gt; &lt;!-- Compliant --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;h1&gt;My Title&lt;/h1&gt;     &lt;!-- Compliant --&gt;\n\n&lt;h2&gt;My Sub Title&lt;/h2&gt; &lt;!-- Compliant --&gt;\n</pre>', 2, NULL, 'Heading tags should be used starting from H1 until H6', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'accessibility', 0, 'HTML'),
(572, 'WhiteSpaceAroundCheck', NULL, 'Web', '<p>\n  The proper use of white space makes a major contribution to code readability.\n  This rule check that there is a space character after the beginning and before the end of each comment\n  (<code>&lt;!-- ... --&gt;</code>), directive (<code>&lt;%@ ... %&gt;</code>), and expression (<code>&lt;% ... %&gt;</code>).\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;!--Do the thing--&gt;  &lt;!-- Noncompliant; missing space at beginning and end of text--&gt;\n&lt;%@page import="java.io.*,java.util.*" %&gt; &lt;!-- Noncompliant; missing space at beginning --&gt;\n&lt;% String title = "My Page";%&gt; &lt;!-- Noncompliant; missing space at end --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;!-- Do the thing --&gt;\n&lt;%@ page import="java.io.*,java.util.*" %&gt;\n&lt;% String title = "My Page"; %&gt;\n</pre>', 1, NULL, 'White space should be used in JSP/JSF tags', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention,jsp-jsf', 0, 'HTML'),
(573, 'IllegalTagLibsCheck', NULL, 'Web', '<p>\n  This rule checks that the disallowed tag libraries are not used.\n</p>\n<p>\n  Given the default parameter for this rule:\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;%@ taglib uri="http://java.sun.com/jstl/sql" prefix="prefixOfTag" &gt; &lt;!-- Noncompliant --&gt;\n&lt;jsp:directive.taglib uri="http://java.sun.com/jstl/sql" prefix="prefixOfTag" /&gt; &lt;!-- Noncompliant --&gt;\n</pre>', 3, NULL, 'Disallowed "taglibs" should not be used', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(574, 'MaxLineLengthCheck', NULL, 'Web', '<p>\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n</p>', 1, NULL, 'Lines should not be too long', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(575, 'DoubleQuotesCheck', NULL, 'Web', '<p>\nChecker to find use of single quote where double quote is preferred.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;div id=''header''&gt;&lt;/div&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;div id="header"&gt;&lt;/div&gt;\n</pre>', 1, NULL, 'Attributes should be quoted using double quotes rather than single ones', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(576, 'ServerSideImageMapsCheck', NULL, 'Web', '<p>\nThe <code>ismap</code> attribute in an <code>img</code> tag creates a server-side image map: The browser sends the coordinates of the clicked point to the server.\nFor any person who cannot use a mouse, this form of navigation is inaccessible because it is the position of the cursor on the image that determines the action.\n</p>\n<p>\nOn the other hand, client-side image maps, which use the <code>usemap</code> attribute allow for each clickable area to specify an alternate text, enabling accessibility for the blind.\nFurther, in terms of separation of concerns, it is definitely better to leave the task of mapping pixels to links to the client.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;a href="click_on_world_map.php" target="_self"&gt;\n  &lt;img src="world_map.png" ismap&gt;                   &lt;!-- Non-Compliant --&gt;\n&lt;/a&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;img src="world_map.png" usemap="#world_map"&gt;       &lt;!-- Compliant --&gt;\n\n&lt;map name="world_map"&gt;\n  &lt;area shape="rect" coords="0,0,10,10" href="france.html" alt="France"&gt;\n  &lt;area shape="circle" coords="20,20,10" href="spain.html" alt="Spain"&gt;\n  &lt;area shape="circle" coords="30,30,8" href="england.html" alt="England"&gt;\n  &lt;!-- ... --&gt;\n&lt;/map&gt;\n</pre>', 2, NULL, 'Server-side image maps ("ismap" attribute) should not be used', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, 'accessibility', 0, 'HTML'),
(577, 'FrameWithoutTitleCheck', NULL, 'Web', '<p>\n  Frames allow different web pages to be put together on the same visual space. Users without disabilities can easily scan the contents of all frames at once. However, visually impaired users using screen readers hear the page content linearly.\n</p>\n<p>\nThe <code>title</code> attribute is used to list all the page''s frames, enabling those users to easily navigate between them.\nTherefore, the <code>&lt;frame&gt;</code> and <code>&lt;iframe&gt;</code> tags should always have a <code>title</code> attribute.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;frame src="index.php?p=menu"&gt;                                      &lt;-- Non-Compliant --&gt;\n&lt;frame src="index.php?p=home" name="contents"&gt;                      &lt;-- Non-Compliant --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;frame src="index.php?p=menu" title="Navigation menu"&gt;              &lt;-- Compliant --&gt;\n&lt;frame src="index.php?p=home" title="Main content" name="contents"&gt; &lt;-- Compliant --&gt;\n</pre>', 2, NULL, '"<frames>" should have a "title" attribute', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 11, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'accessibility', 0, 'HTML'),
(578, 'S1436', NULL, 'Web', '<p>\nThis rule allows you to make sure that each HTML page contains an element with your configured ID, regardless of element type.\nThis rule is useful, for instance, if your design requires a placeholder to be present in each page, for example to dynamically insert a footer.\n</p>\n\n<h2>Compliant Solution</h2>\n\n<p>In the following example, the expected ID is "#footer":</p>\n<pre>\n&lt;div id="#footer"&gt;\n...\n&lt;/div&gt;\n</pre>', 2, NULL, 'An element with a specific "id" attribute should be present in each HTML page', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'convention', 1, 'HTML'),
(579, 'HeaderCheck', NULL, 'Web', '<p>\n  Each source file should start with a header stating file ownership and the license which must be used to distribute the application.\n  This rule must be fed with the header text that is expected at the beginning of every file.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;html&gt;                                    &lt;!-- Non-Compliant --&gt;\n...\n&lt;/html&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;!-- Copyright 2013 SonarSource SA --&gt;    &lt;!-- Compliant --&gt;\n&lt;html&gt;\n...\n&lt;/html&gt;\n</pre>', 4, NULL, 'Copyright and license headers should be defined', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 21, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, NULL, 0, 'HTML'),
(580, 'S1829', NULL, 'Web', '<p>\n  It is considered best-practice to use relative URLs in web pages to prevent having to update the addresses if the web address in use changes.\n  Moreover, if some absolute URLs are missed in such a process, it will obviously impact the user experience.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;img src="http://www.myserver.com/smiley.gif" alt="Smiley face" height="42" width="42" /&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;img src="smiley.gif" alt="Smiley face" height="42" width="42" /&gt;\n</pre>', 3, NULL, 'Web pages should not contain absolute URIs', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'pitfall', 0, 'HTML'),
(581, 'LibraryDependencyCheck', NULL, 'Web', '<p>\n  This rule verifies if some given Java packages or classes are used in a JSP file.\n  The following code illustrates this rule, with <code>java.sql,ArrayList</code> as libraries:</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;%@ page import="java.sql.*" %&gt;     &lt;!-- Non-Compliant --&gt;\n&lt;% java.util.ArrayList clients; %&gt;  &lt;!-- Non-Compliant --&gt;\n&lt;% java.lang.String name; %&gt;        &lt;!-- Compliant --&gt;\n</pre>', 2, NULL, 'Some Java packages or classes should not be used in JSP files', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'jsp-jsf', 1, 'HTML'),
(582, 'ChildElementRequiredCheck', NULL, 'Web', '<p>\n  This rule checks that the specified child elements are present inside the specified parent elements.\n</p>\n<p>\n  Given a parent/child combination of <code>&lt;head&gt;</code>/<code>&lt;title&gt;</code>:\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;html&gt;\n  &lt;head&gt;\n  &lt;/head&gt;  &lt;!-- Noncompliant; no title element --&gt;\n  &lt;body&gt;\n    ...\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My Page&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    ...\n</pre>', 2, NULL, 'Child element should be used', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 'HTML'),
(583, 'InlineStyleCheck', NULL, 'Web', '<p>\n  The goal of this rule is to ban the usage of HTML "style" property to make sure that all CSS styles are defined in CSS classes.\n  Consolidating all styling into classes makes it easier to read, understand and maintain.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;body&gt;\n  &lt;h1 style="color: blue;"&gt;Hello World!&lt;/h1&gt;  &lt;!-- Noncompliant --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        color: blue;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1 style="color: blue;"&gt;Hello World!&lt;/h1&gt;\n</pre>', 1, NULL, 'The "style" attribute should not be used', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '15min', NULL, NULL, NULL, 0, 'HTML'),
(584, 'IllegalElementCheck', NULL, 'Web', '<p>\n  This rule checks that the specified HTML elements are not present.\n</p>\n<p>\n  For a disallowed list of "font,center":\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;center&gt;&lt;font color="red"&gt;Hello World!&lt;/font&gt;&lt;/center&gt; &lt;!-- Noncompliant --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;div class="centerRed"&gt;Hello World!&lt;/div&gt;\n</pre>', 2, NULL, 'Disallowed elements should not be used', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(585, 'ParentElementRequiredCheck', NULL, 'Web', '<p>\n  This rule checks that required HTML parent elements are present for certain child elements.\n</p>', 2, NULL, 'Parent elements should be used', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 11, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, NULL, 1, 'HTML'),
(586, 'JspScriptletCheck', NULL, 'Web', '<p>JSP expressions (using <code><%= ... %></code> have been deprecated because they:</p>\n<ul>\n  <li>Are not unit testable.</li>\n  <li>Are not reusable.</li>\n  <li>Cannot make use of object oriented concepts such as inheritence.</li>\n  <li>Have poor error handling capabilities: if an exception is thrown, an empty page is rended.</li>\n  <li>Mix the business and presentation logic.</li>\n</ul>\n\n<p>\nJSP Standard Tag Library (JSTL) and Expression Language should be used instead,\nenabiling the adoption of the model-view-controller (MVC) design pattern\nwhich reduces the coupling between the presentation tier and the business logic.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;input type="text" name="foo" value="&lt;%= request.getParameter("foo") %&gt;" /&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;input type="text" name="foo" value="${fn:escapeXml(param.foo)}" /&gt;\n</pre>', 2, NULL, 'JSP expressions should not be used', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'jsp-jsf,obsolete', 0, 'HTML'),
(587, 'ComplexityCheck', NULL, 'Web', '<p>\n  Checks cyclomatic complexity against a specified limit.\n  The complexity is measured by counting decision tags (such as if and forEach) and boolean operators in expressions (&quot;&amp;&amp;&quot; and &quot;||&quot;),\n  plus one for the body of the document. It is a measure of the minimum number of possible paths to render the page.\n</p>', 2, NULL, 'Files should not be too complex', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'LINEAR_OFFSET', NULL, '1min', NULL, '30min', 'per complexity point above the threshold', NULL, 'brain-overload', 0, 'HTML'),
(588, 'UnsupportedTagsInHtml5Check', NULL, 'Web', '<p>\nWith the advent of HTML5, many old elements were deprecated. To ensure the best user experience, deprecated elements should not be used. This rule checks for the following deprecated elements:\n</p>\n\n<table>\n  <tr><th>Element</th><th>Remediation Action</th></tr>\n  <tr><td><code>basefont</code>, <code>big</code>, <code>blink</code>, <code>center</code>, <code>font</code>, <code>marquee</code>, <code>multicol</code>, <code>nobr</code>, <code>spacer</code>, <code>tt</code></td><td>use CSS</td></tr>\n  <tr><td><code>acronym</code></td><td>use <code>abbr</code></td></tr>\n  <tr><td><code>applet</code></td><td>use <code>embed</code> or <code>object</code></td></tr>\n  <tr><td><code>bgsound</code></td><td>use <code>audio</code></td></tr>\n  <tr><td><code>frame</code>, <code>frameset</code>, <code>noframes</code></td><td>restructure the page to remove frames</td></tr>\n  <tr><td><code>isindex</code></td><td>use form controls</td></tr>\n  <tr><td><code>dir</code></td><td>use <code>ul</code></td></tr>\n  <tr><td><code>hgroup</code></td><td>use <code>header</code> or <code>div</code></td></tr>\n  <tr><td><code>listing</code></td><td>use <code>pre</code> and <code>code</code></td></tr>\n  <tr><td><code>nextid</code></td><td>use GUIDS</td></tr>\n  <tr><td><code>noembed</code></td><td>use <code>object</code> instead of <code>embed</code> when fallback is necessary</td></tr>\n  <tr><td><code>plaintext</code></td><td>use the "text/plain" MIME type</td></tr>\n  <tr><td><code>strike</code></td><td>use <code>del</code> or <code>s</code></td></tr>\n  <tr><td><code>xmp</code></td><td>use <code>pre</code> or <code>code</code>, and escape "&lt;" and "&nbsp;" characters</td></tr>\n</table>\n\n<h2>See</h2>\n<ul>\n  <li>W3C, <a href="http://www.w3.org/TR/html5-diff">Obsolete Features</a></li>\n  <li>WHATWG, <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/obsolete.html">Obsolete Features</a></li>\n</ul>', 2, NULL, 'Elements deprecated in HTML5 should not be used', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 8, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'html5,obsolete,user-experience', 0, 'HTML'),
(589, 'LongJavaScriptCheck', NULL, 'Web', '<p>\n  Long pieces of JavaScript should be located in dedicated *.js source files.\n  This makes maintenance of both the script and the pages that use it easier.\n  Additionally, it offers some efficiencies in serving the files, since it takes better advantage of\n  browser caching to only re-serve the parts of a web page that have actually changed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;head&gt;\n  ...\n  &lt;script type="text/javascript" language="JavaScript"&gt;\n    function doTheThing(arg1) {\n    ...\n    ...\n    }\n\n    function doTheOtherThing(arg1) {\n    ...\n    }\n\n    function andSoOn() {\n    ...\n    }\n  &lt;/script&gt;\n&lt;/head&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;head&gt;\n  ...\n  &lt;script type="text/javascript" language="JavaScript" src="myLongScript.js"&gt; &lt;/script&gt;\n&lt;/head&gt;\n</pre>', 3, NULL, 'Javascript scriptlets should not have too many lines of code', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '2min', NULL, NULL, 'number of lines over the threshold', NULL, 'brain-overload', 0, 'HTML'),
(590, 'MouseEventWithoutKeyboardEquivalentCheck', NULL, 'Web', '<p>\nOffering the same experience with the mouse and the keyboard allow users to pick their preferred device.\nAdditionally, users of assistive technology will also be able to browse the site even if they cannot use the mouse.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;a onClick="doSomething();" ...&gt;                                &lt;!-- Non-Compliant - ''onKeyPress'' missing --&gt;\n&lt;a onMouseover="doSomething();" ...&gt;                            &lt;!-- Non-Compliant - ''onFocus'' missing --&gt;\n&lt;a onMouseout="doSomething();" ...&gt;                             &lt;!-- Non-Compliant - ''onBlur'' missing --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;a onClick="doSomething();" onKeyPress="doSomething();" ...&gt;    &lt;!-- Compliant --&gt;\n&lt;a onMouseover="doSomething();" onFocus="doSomething();" ...&gt;   &lt;!-- Compliant --&gt;\n&lt;a onMouseout="doSomething();" onBlur="doSomething();" ...&gt;     &lt;!-- Compliant --&gt;\n</pre>', 2, NULL, 'Mouse events should have a corresponding keyboard event', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'accessibility', 0, 'HTML'),
(591, 'S1443', NULL, 'Web', '<p>\nMost browsers automatically fill the content of input elements of type ''password'' when this password has already been provided in the past.\n</p>\n\n<p>\nImagine that user B takes control of a machine belonging to a user A.\nAccessing a secured web site as user A is trivial for user B if form input elements are automatically filled in by the browser on the site''s login page.\n</p>\n\n<p>\n  Beginning with HTML 5 the ability to turn this functionality off exists on a field-by-field basis using the <code>autocomplete</code> attribute.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>For HTML5:</p>\n<pre>\n&lt;input type="password" /&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<p>For HTML5:</p>\n<pre>\n&lt;input type="password" autocomplete="off" /&gt;\n</pre>', 3, NULL, '"autocomplete" should be set to "off" on input elements of type "password"', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'html5,security', 0, 'HTML'),
(592, 'FlashUsesBothObjectAndEmbedCheck', NULL, 'Web', '<p>\n  The <code>&lt;object&gt;</code> tag is used by Internet Explorer 3.0 or later on Windows platforms or any browser that supports the use of the Flash ActiveX control.\n  The <code>&lt;embed&gt;</code> tag is used by Netscape Navigator 2.0 or later, or browsers that support the use of the Netscape-compatible plug-in version of Flash Player.\n</p>\n\n<p>\n  When an ActiveX-enabled browser loads the HTML page, it reads the values set on the <code>&lt;object&gt;</code> and ignores the <code>&lt;embed&gt;</code> tag.\n  When browsers using the Flash plug-in load the HTML page, they read the values set on the <code>&lt;embed&gt;</code> tag and ignore the <code>&lt;object&gt;</code> tag.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="100" height="100"&gt;      &lt;!-- Non-Compliant --&gt;\n  &lt;param name="movie" value="movie_name.swf" /&gt;\n&lt;/object&gt;\n\n&lt;embed src="movie_name.swf"                                                                 &lt;!-- Non-Compliant --&gt;\n       width="550"\n       height="400"\n       type="application/x-shockwave-flash"\n       pluginspage="http://www.macromedia.com/go/getflashplayer" /&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="100" height="100"&gt;      &lt;!-- Compliant --&gt;\n  &lt;param name="movie" value="movie_name.swf" /&gt;\n  &lt;embed src="movie_name.swf"                                                               &lt;!-- Compliant --&gt;\n  width="550"\n  height="400"\n  type="application/x-shockwave-flash"\n  pluginspage="http://www.macromedia.com/go/getflashplayer" /&gt;\n&lt;/object&gt;\n</pre>', 2, NULL, 'Flash animations should be embedded using both the <object> and <embed> tags', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 11, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'cross-browser', 0, 'HTML'),
(593, 'UnifiedExpressionCheck', NULL, 'Web', '<p>This rule allows to make sure that all JSF Expressions are syntactically correct.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"\n"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;\n&lt;html xmlns="http://www.w3.org/1999/xhtml"\n   xmlns:h="http://java.sun.com/jsf/html"&gt;\n   &lt;h:body&gt;\n     First name\n     &lt;h:outputText value="#{user.firstName && @@}"/&gt;   &lt;!-- Noncompliant --&gt;\n   &lt;/h:body&gt;\n&lt;/html&gt;\n</pre>', 4, NULL, 'JSF expressions should be syntactically valid', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, NULL, 0, 'HTML'),
(594, 'AvoidCommentedOutCodeCheck', NULL, 'Web', '<p>Programmers should not comment out code as it bloats programs and reduces readability.\n  Unused code should be deleted and can be retrieved from source control history if required.</p>\n\n<h2>See</h2>\n<ul>\n  <li>MISRA C:2004, 2.4 - Sections of code should not be "commented out".</li>\n  <li>MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments.</li>\n  <li>MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments.</li>\n  <li>MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out"</li>\n</ul>', 2, NULL, 'Sections of code should not be "commented out"', 'READY', 'web', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'misra,unused', 0, 'HTML'),
(595, 'InsufficientCommentDensity', NULL, 'common-js', '<p>An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.</p>', 2, NULL, 'Source files should have a sufficient density of comment lines', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '2min', NULL, NULL, 'number of lines required to meet minimum density', NULL, 'convention', 0, 'HTML'),
(596, 'DuplicatedBlocks', NULL, 'common-js', '<p>An issue is created on a file as soon as there is at least one block of duplicated code on this file.</p>', 2, NULL, 'Source files should not have any duplicated blocks', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 36, NULL, 'LINEAR_OFFSET', NULL, '10min', NULL, '10min', 'Number of duplicate blocks', NULL, 'pitfall', 0, 'HTML'),
(597, 'InsufficientLineCoverage', NULL, 'common-js', '<p>An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.</p>', 2, NULL, 'Lines should have sufficient coverage by unit tests', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'LINEAR', NULL, '2min', NULL, NULL, 'number of lines under the coverage threshold', NULL, 'bad-practice', 0, 'HTML'),
(598, 'InsufficientBranchCoverage', NULL, 'common-js', '<p>An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.</p>', 2, NULL, 'Branches should have sufficient coverage by unit tests', 'READY', 'js', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'LINEAR', NULL, '5min', NULL, NULL, 'number of uncovered conditions', NULL, 'bad-practice', 0, 'HTML'),
(599, 'S101', NULL, 'php', '<p>\n  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class names match a provided regular expression.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression:</p>\n<pre>\nclass my_class {...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>', 2, NULL, 'Class names should comply with a naming convention', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(600, 'S139', NULL, 'php', '<p>\n  This rule verifies that single-line comments are not located at the end of a line of code. The main idea behind this rule is that in order to be really readable,\n  trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of the code, not too long to be visible)\n  but most often, automatic code formatters would not handle this correctly: the code would end up less readable. Comments are far better placed on the previous empty line\n  of code, where they will always be visible and properly formatted.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n$a = $b + $c; // This is a trailing comment that can be very very long\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\n$a = $b + $c;\n</pre>\n\n<h2>Exceptions</h2>\n<p>By default, the property "legalTrailingCommentPattern" allows to ignore comments containing only one word :</p>\n<pre>\ndoSomething(); //FIXME\n</pre>', 0, NULL, 'Comments should not be located at the end of lines of code', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '1min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(601, 'S100', NULL, 'php', '<p>\n  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all function names match a provided regular expression.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression: ^[a-z][a-zA-Z0-9]*$</p>\n<pre>\nfunction DoSomething(){...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(){...}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Methods with an <code>@inheritdoc</code> annotation,  as well as magic methods <code>(__construct(), __destruct(), __call(), __callStatic(), __get(), __set(), __isset(), __unset(), __sleep(), __wakeup(), __toString(), __invoke(), __set_state(), __clone(), __debugInfo())</code> are ignored.</p>\n<pre>\nfunction __construct(){...}\nfunction __destruct(){...}\n\n/**\n * {@inheritdoc}\n*/\nfunction myFunc(){...}\n</pre>', 2, NULL, 'Function names should comply with a naming convention', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '10min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(602, 'S2042', NULL, 'php', '<p>\n  A class that grows too much tends to aggregate too many responsibilities, and inevitably becomes harder to understand and to maintain. Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well-defined topics.\n</p>', 2, NULL, 'Classes should not have too many lines', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'LINEAR', NULL, '1h', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(603, 'S138', NULL, 'php', '<p>\n  A function that grows too large tends to aggregate too many responsibilities.\n  Such function inevitably become harder to understand and therefore harder to maintain.\n</p>\n<p>\n  Above a specific threshold, it is strongly advised to refactor into smaller function which focus on well-defined tasks.\n  Those smaller function will not only be easier to understand, but also probably easier to test.\n</p>', 2, NULL, 'Functions should not have too many lines', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '20min', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(604, 'S2041', NULL, 'php', '<p>\n  <code>echo</code> can be called with or without parentheses, but it is best practice to leave parentheses off the call because using parentheses with multiple arguments will result in a parse error.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\necho("Hello");  // Noncompliant, but it works\necho("Hello", "World"); // Noncompliant. Parse error\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\necho "Hello";\necho "Hello","World!";\n</pre>', 1, NULL, 'Parentheses should not be used for calls to "echo"', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'pitfall', 0, 'HTML'),
(605, 'S1523', NULL, 'php', '<p>\n  The <code>eval</code> function is a way to run arbitrary code at run-time.\n</p>\n<p>According to the PHP documentation</p>\n<blockquote>The eval() language construct is very dangerous because it allows execution of arbitrary PHP code. Its use thus is discouraged. If you have carefully verified that there is no other option than to use this construct, pay special attention not to pass any user provided data into it without properly validating it beforehand.</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\neval($code_to_be_dynamically_executed)\n</pre>', 2, NULL, '"eval" function should not be used', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 20, NULL, 'LINEAR', NULL, '30min', NULL, NULL, NULL, NULL, 'security', 0, 'HTML'),
(606, 'S1151', NULL, 'php', '<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code> clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of <code>case</code> clause should be extracted in a dedicated function</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>The following code snippet illustrates this rule with the default threshold of 5:</p>\n<pre>\nswitch ($var) {\n  case 0:  // 6 lines till next case\n    methodCall1();\n    methodCall2();\n    methodCall3();\n    methodCall4();\n    break;\n  default:\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch ($var) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    break;\n}\n\nfunction doSomething(){\n  methodCall1("");\n  methodCall2("");\n  methodCall3("");\n  methodCall4("");\n}\n</pre>', 2, NULL, '"switch/case" clauses should not have too many lines', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(607, 'S2038', NULL, 'php', '<p>\n  Shared coding conventions allow teams to collaborate effectively. Writing colors in upper case makes them stand out at such, thereby making the code easier to read.\n</p>\n<p>\n  This rule checks that hexadecimal color definitions are written in upper case.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n$white = ''#ffffff'';  // Noncompliant\n$dkgray = ''#006400'';\n$aqua = ''#00ffff'';   // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n$white = ''#FFFFFF'';  // Compliant\n$dkgray = ''#333'';\n$aqua = ''#00FFFF'';   // Compliant\n</pre>', 1, NULL, 'Colors should be defined in upper case', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(608, 'S2037', NULL, 'php', '<p>\n  References in a class to static members (field or method) in that class can be made using either <code>self::$var</code> or <code>static::$var</code> (introduced in 5.3). The difference between the two is one of scope. Confusingly, in subclasses, the use of <code>self::</code> references the original definition of the member, i.e. the superclass version, rather than any override at the subclass level. <code>static::</code>, on the other hand, references the class that was called at runtime.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\n\nclass Toy {\n\n    public static function status() {\n        self::getStatus();                  // Noncompliant; will always print "Sticks are fun!" even when called from a subclass which overrides this method;\n    }\n\n    protected static function getStatus() {\n        echo "Sticks are fun!";\n    }\n}\n\nclass Ball extends Toy {\n\n    protected static function getStatus() { // Doesn''t actually get called\n        echo "Balls are fun!";\n    }\n}\n\n$myBall = new Ball();\n$myBall::status();                          // Will print "Sticks are fun!"\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\n\nclass Toy {\n\n    public static function status() {\n        static::getStatus();   // Compliant\n    }\n\n    protected static function getStatus() {\n        echo "Sticks are fun!";\n    }\n}\n\nclass Ball extends Toy {\n\n    protected static function getStatus() {\n        echo "Balls are fun!";\n    }\n}\n\n$myBall = new Ball();\n$myBall::status();             // Will print "Balls are fun!"\n</pre>', 2, NULL, 'Static members should be referenced with "static::"', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'pitfall', 0, 'HTML'),
(609, 'S2036', NULL, 'php', '<p>\n  Files that define symbols such as classes and variables may be included into many files. Simply performing that inclusion should have no effect on those files other than declaring new symbols. For instance, a file containing a class definition should not also contain side-effects such as <code>print</code> statements that will be evaluated automatically on inclusion. Logic should be segregated into symbol-only files and side-effect-only files. The type of operation which is not allowed in a symbol-definition file includes but is not limited to:\n</p>\n<ul>\n  <li>generating output</li>\n  <li>modifying <code>ini</code> settings</li>\n  <li>emitting errors or exceptions</li>\n  <li>modifying global or static variables</li>\n  <li>reading/writing files</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\n\nprint "Include worked!";\n\nclass foo {\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\n\nclass foo {\n\n  public function log() {\n    print "Include worked!";\n  }\n\n}\n</pre>', 3, NULL, 'Files that define symbols should not cause side-effects', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 11, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, 'psr1,user-experience', 0, 'HTML'),
(610, 'S1311', NULL, 'php', '<p>\n  The Cyclomatic Complexity is measured by the number of <code>&&</code> and <code>||</code> operators and <code>if</code>, <code>while</code>, <code>do</code>, <code>for</code>, <code>?:</code>, <code>catch</code>, <code>switch</code>, <code>case</code>, <code>return</code> and <code>throw</code> statements in the body of a class plus one for each constructor, method, static initializer, or instance initializer in the class. The last return statement in method, if exists, is not taken into account.</br>\n  Even when the Cyclomatic Complexity of a class is very high, this complexity might be well distributed among all methods. Nevertheless, most of the time, a very complex class is a class which breaks the Single Responsibility Principle and which should be re-factored to be split in several classes.\n</p>', 2, NULL, 'Classes should not be too complex', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '1h', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(611, 'S1808', NULL, 'php', '<p>\n    Shared coding conventions make it possible for a team to collaborate efficiently. This rule allows to check compliance with a formatting standards. Default parameters value make this rule compliant with PSR2.\n</p>\n\n<p>Quotes below are from the PSR-2 Coding Style Guide or the PHP: Language Reference - Manual.</p>\n\n<h1>"namespace" declarations should be followed by a blank line</h1>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnamespace Vendor\\Package;\nuse FooClass;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nnamespace Vendor\\Package;\n\nuse FooClass;\n</pre>\n\n<h1>"use" declarations should be placed after "namespace" declarations</h1>\n<h2>Noncompliant Code Example</h2>\n<pre>\nuse FooClass;\n\nnamespace Vendor\\Package;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nnamespace Vendor\\Package;\n\nuse FooClass;\n</pre>\n\n<h1>"use" declarations should be follow by a blank line</h1>\n<h2>Noncompliant Code Example</h2>\n<pre>\nuse FooClass;\n$foo = 1;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nuse FooClass;\n\n$foo = 1;\n</pre>\n\n<h1>Open curly braces should be at the beginning of a new line for classes and functions</h1>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n    function my_function(){\n        ...\n    }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n    function my_function()\n    {\n        ...\n    }\n}\n</pre>\n\n<h1>Open curly braces should be at the end of line for control structures</h1>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($something)\n{\n    ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif ($something) {\n    ...\n}\n</pre>\n{code}\n\n<h1>There should be exactly one space between closing parenthesis and opening curly braces</h1>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($something)      {\n    ...\n}\n</pre>\n{code}\n\n<h2>Compliant Solution</h2>\n<pre>\nif ($something) {\n    ...\n}\n</pre>\n\n<h1>There should be exactly one space between control structure keyword and opening parenthesis or curly brace</h1>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif($something) {\n    ...\n}\n\ntry{\n    ...\n} catch (Exception $e) {\n    ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif ($something) {\n    ...\n}\n\ntry {\n    ...\n} catch (Exception $e) {\n    ...\n}\n</pre>\n\n<h1>There should not be any space after the opening parenthesis and before the closing parenthesis</h1>\n<h2>Noncompliant Code Example</h2>\n<pre>\nanalyse( $fruit );\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nanalyse($fruit);\n</pre>\n\n<h1>There should be one space after each ";" in {{for}} statement</h1>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor ($i = 0;$i < 10;   $i)\n    ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor ($i = 0; $i < 10; $i) {\n    ...\n}\n</pre>\n\n<h1>Commas should be followed by one space and not preceded by any</h1>\n<h2>Noncompliant Code Example</h2>\n<pre>\npressJuce($apply ,$orange);\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npressJuce($apply, $orange);\n</pre>\n\n<h1>There should not be any space after a method name</h1>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndo_something ();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndo_something();\n</pre>\n\n<h1>In foreach statement there should be one space before and after "as" keyword and "=>" operator.</h1>\n<h2>Noncompliant Code Example</h2>\n<pre>\nforeach ($fruits    as $fruit_key =>     $fruit) {\n    ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nforeach ($fruits as $fruit_key => $fruit) {\n    ...\n}\n</pre>\n\n<h1>Close curly brace and the next "else", "catch" and "finally" keywords should be located on the same line</h1>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($something) {\n    ...\n}\nelse {\n    ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif ($something) {\n    ...\n} else {\n    ...\n}\n</pre>\n\n<h1>List of implemented interfaces should be correctly indented</h1>\n<blockquote>\n    Lists of implements may be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there should be only one interface per line.\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass ClassName extends ParentClass implements \\ArrayAccess, \\Countable,\n    \\Serializable\n{\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass ClassName extends ParentClass implements\n    \\ArrayAccess,\n    \\Countable,\n    \\Serializable\n{\n}\n</pre>\n\n<h1>Arguments in method/function declarations should be correctly indented</h1>\n<blockquote>\n    Argument lists may be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list should be on the next line, and there should be only one argument per line.\n\n    When the argument list is split across multiple lines, the closing parenthesis and opening brace should be placed together on their own line with one space between them.\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nnamespace Vendor\\Package;\n\nclass ClassName\n{\n    public function aVeryLongMethodName(ClassTypeHint $arg1,   // Noncompliant\n        &$arg2, array $arg3 = []) {\n\n        $noArgs_longVars = function () use ($longVar1,         // Noncompliant\n            $longerVar2,\n            $muchLongerVar3\n            ) {\n                // body\n            };\n    }\n}\n</pre>\n\n<h1>Arguments in method/function calls should be correctly indented</h1>\n<blockquote>\n    Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line.\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt?php\n$foo->bar($longArgument,    // Noncompliant\n    $longerArgument,\n    $muchLongerArgument);   // Noncompliant - closing parenthesis should be place on the next line\n</pre>\n\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt?php\n$foo->bar(\n    $longArgument,\n    $longerArgument,\n    $muchLongerArgument\n);\n</pre>\n\n<h1>Closures declaration should be correctly spaced</h1>\n<blockquote>\n    Closures MUST be declared with a space after the function keyword, and a space before and after the use keyword.\n    </blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n$closureWithArgsAndVars = function($arg1, $arg2)use   ($var1, $var2) {\n    // body\n};\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n$closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) {\n    // body\n};\n</pre>\n\n<h1>Class names, "extends" and "implements" keywords should be located on the same line</h1>\n<p>\n  The goal of this coding rule is to make it obvious at first look that a class extends some other classes and/or implements some interfaces. The names of extended classes or implemented interfaces can be located on next lines.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt?php\nclass ClassName\nextends ParentClass {...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt?php\nclass ClassName extends ParentClass {...}\n</pre>\n\n<p>or</p>\n<pre>\n&lt?php\nclass ClassName extends\nParentClass {...}\n</pre>', 1, NULL, 'Source code should comply with formatting standards', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '1min', NULL, NULL, NULL, NULL, 'convention,psr2', 0, 'HTML'),
(612, 'S1766', NULL, 'php', '<p>\nFor better readability, do not put multiple property declarations in the same statement.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt?php\nclass Foo\n{\n   private $bar = 1, $bar2 = 2;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt?php\nclass Foo\n{\n   private $bar1 = 1;\n   private $bar2 = 2;\n}\n</pre>', 1, NULL, 'More than one property should not be declared per statement', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention,psr2', 0, 'HTML'),
(613, 'S1116', NULL, 'php', '<p>\n  Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:\n<ul>\n  <li>It was meant to be replaced by an actual statement, but this was forgotten.</li>\n  <li>There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>.</li>\n</ul>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>The following code snippet illustrates this rule with a maximum number of 4 parameters:</p>\n<pre>\nfunction doSomething() {\n  ;                                             // Noncompliant - was used as a kind of TODO marker\n}\n\nfunction doSomethingElse($p) {\n  echo $p;;                                     // Noncompliant - double ;\n}\n\nfor ($i = 1; $i <= 10; doSomething($i), $i++);  // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething() {}\n\nfunction doSomethingElse($p) {\n  echo $p;\n\n  for ($i = 1; $i <= 10; $i++) {\n    doSomething($i);\n  }\n}\n</pre>\n\n<h2>See</h2>\n<a href="https://www.securecoding.cert.org/confluence/display/seccode/MSC12-C.+Detect+and+remove+code+that+has+no+effect+or+is+never+executed">CERT, MSC12-C</a> - Detect and remove code that has no effect <br/>\n<a href="https://www.securecoding.cert.org/confluence/display/cplusplus/MSC12-CPP.+Detect+and+remove+code+that+has+no+effect">CERT, MSC12-CPP</a> - Detect and remove code that has no effect <br/>', 2, NULL, 'Empty statements should be removed', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'cert,unused', 0, 'HTML'),
(614, 'S1765', NULL, 'php', '<p>\nThe PHP 4 method of declaring a variable, using the <code>var</code> keyword, was deprecated in early versions of PHP 5. Even though it''s not considered deprecated in the most recent versions, it''s nonetheless not best practice to use it. When <code>var</code> does appear, it is interpreted as a synonym for <code>public</code> and treated as such. Therefore <code>public</code> should be used instead.\n</p>\n<p>\nFrom the PHP Manual:\n</p>\n<blockquote>\nThe PHP 4 method of declaring a variable with the var keyword is still supported for compatibility reasons (as a synonym for the public keyword). In PHP 5 before 5.1.3, its usage would generate an E_STRICT warning.\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt?php\nclass Foo\n{\n    var $bar = 1;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt?php\nclass Foo\n{\n    public $bar = 1;\n}\n</pre>', 1, NULL, 'The "var" keyword should not be used', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention,psr2', 0, 'HTML'),
(615, 'S1117', NULL, 'php', '<p>\n  Shadowing fields with a local variable or with a function parameter is a bad practice reducing code readability.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public $myField;\n\n  public function doSomething() {\n    $myField = 0;\n    ...\n  }\n\n  public function doSomethingElse($myField) {\n    ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n  public $myField;\n\n  public function Foo($myField) {\n    $this->myField = $myField;\n  }\n\n  public static function build($myField) {\n    ...\n  }\n\n  public function setMyField($myField){\n    $this->myField = $myField;\n  }\n}\n</pre>', 2, NULL, 'Local variables should not have the same name as class fields', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'pitfall', 0, 'HTML'),
(616, 'S1763', NULL, 'php', '<p>\n  Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, and <code>goto</code>) and <code>throw</code> expressions move control flow out of the current code block. Typically, any statements in a block that come after a jump or throw are simply wasted keystrokes lying in wait to confuse the unwary.\n</p>\n<p>\n  Rarely, as illustrated below, code after a jump or throw is reachable. However, such code is difficult to understand, and should be refactored.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction fun($a) {\n  $i = 10;\n  return $i + $a;\n  $i++;             // this is never executed\n}\n\nfunction foo($a) {\n  if ($a == 5) {\n    goto error;\n  } else {\n    // do the job\n  }\n  return;\n\n  error:\n    printf("don''t use 5"); // this is reachable but unreadable\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction fun($a) {\n  $i = 10;\n  return $i + $a;\n}\n\nfunction foo($a) {\n  if ($a == 5) {\n    handleError();\n  } else {\n    // do the job\n  }\n  return;\n}\n</pre>', 2, NULL, 'Jump statements should not be followed by other statements', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, 'misra,unused', 0, 'HTML'),
(617, 'S2046', NULL, 'php', '<p>\n  Shared coding conventions allow teams to collaborate effectively. This rule flags all Perl-style comments.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n$myvar; # Noncompliant; this comment should have started with "//"\n</pre>\n\n\n<h2>Compliant Solution</h2>\n<pre>\n$myvar; // Compliant; this comment started with "//"\n</pre>', 1, NULL, 'Perl-style comments should not be used', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(618, 'S2043', NULL, 'php', '<p>\n  Superglobal variables are predefined variables available in all scopes throughout a script. However, accessing them directly is considered bad practice. Instead, they should be accessed through an object or framework that handles sanitation and validation.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n$name = $_POST[''name''];\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n$name = $this->params()->fromPost(''name'');\n</pre>', 2, NULL, 'Superglobals should not be accessed directly', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 20, NULL, 'LINEAR', NULL, '15min', NULL, NULL, NULL, NULL, 'security', 0, 'HTML'),
(619, 'S2044', NULL, 'php', '<p>\n  Both <code>php_sapi_name()</code> and the <code>PHP_SAPI</code> constant give the same value. But calling the method is less efficient that simply referencing the constant.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (php_sapi_name() == ''test'') { ... }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (PHP_SAPI == ''test'') { ... }\n</pre>', 1, NULL, '"php_sapi_name()" should not be used', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, 'performance', 0, 'HTML'),
(620, 'S1451', NULL, 'php', '<p>\nEach source file should start with a header comment stating file ownership and the license which must be used to distribute the application.</br>\nThis rule must be fed with the header comment that is expected at the beginning of every file. This expected header comment should not contain any <code>&lt;?php</code> and <code>?&gt;</code> tags.\n</p>\n\n<p>For example, for SonarSource''s open source softwares, the <code>headerFormat</code> property must be set to:</p>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>', 4, NULL, 'Copyright and license headers should be defined', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(621, 'S2047', NULL, 'php', '<p>\n  Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the documentation. Toward that end, methods returning a boolean property should have names that start with "is" or "has" rather than with "get".\n</p>\n<p>\n  Note that this rule will only apply to functions that are documented to return a boolean.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @return boolean\n */\npublic function getFoo() // Noncompliant\n{\n  return foo;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n/**\n * @return boolean\n */\npublic function isFoo()\n{\n  return true;\n}\n</pre>', 1, NULL, 'The names of methods with boolean return values should start with "is" or "has"', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '15min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(622, 'S128', NULL, 'php', '<p>\n  When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While this is sometimes intentional, it often is a mistake which leads to unexpected behavior.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both ''doSomething()'' and ''doSomethingElse()'' will be executed. Is it on purpose ?\n    do_something();\n  default:\n    do_something_else();\n   break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch ($myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    do_something();\n    break;\n  default:\n    do_something_else();\n    break;\n}\n</pre>\n\n<h2>Exception</h2>\n<p>This rule is relaxed in following cases:</p>\n<pre>\nswitch ($myVariable) {\n  case 0:                  // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    do_something();\n    break;\n  case 2:                  // Use of return statement\n    return;\n  case 3:                  // Use of throw statement\n    throw new IllegalStateException();\n  case 4:                  // Use of continue statement\n    continue;\n  case 4:                  // Call exit\n    exit(0);\n  case 5:\n    echo ''Second case, which falls through'';\n    // no break        <- "no break" comment is used when fall-through is intentional in a non-empty case body\n  default:                 // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>', 3, NULL, 'Switch cases should end with an unconditional break statement', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'LINEAR', NULL, '10min', NULL, NULL, NULL, NULL, 'cert,cwe,pitfall', 0, 'HTML'),
(623, 'S125', NULL, 'php', '<p>\n  Programmers should not comment out code as it bloats programs and reduces readability.<br/>\n  Unused code should be deleted and can be retrieved from source control history if required.\n</p>', 2, NULL, 'Sections of code should not be "commented out"', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '20min', NULL, NULL, NULL, NULL, 'unused', 0, 'HTML'),
(624, 'S127', NULL, 'php', '<p>\n  Loop counters should not be modified in the body of the loop to prevent unexpected side effects.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor ($i = 0; $i < 10; $i++) {\n  echo $i;\n  if(condition) {\n    $i = 20;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor ($i = 0; $i < 10; $i++) {\n  echo $i;\n}\n</pre>', 2, NULL, 'A loop''s counter should not be assigned within the loop body', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'LINEAR', NULL, '10min', NULL, NULL, NULL, NULL, 'pitfall', 0, 'HTML'),
(625, 'S126', NULL, 'php', '<p>\n  This rule applies whenever an <code>if</code> statement is followed by one or more <code>elseif</code> statements; the final <code>elseif</code> shall be followed by an <code>else</code> statement.\n</p>\n\n<p>\n  The requirement for a final <code>else</code> statement is defensive programming.\n  The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is consistent with the requirement to have a final default clause in a <code>switch</code> statement.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  do_something();\n} else if (condition2) {\n  do_something_else();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  do_something();\n} else if (condition2) {\n  do_something_else();\n} else {\n  throw new InvalidArgumentException(''message'');\n}\n</pre>\n\n<h2>See</h2>\n<a href="https://www.securecoding.cert.org/confluence/display/seccode/MSC01-C.+Strive+for+logical+completeness">CERT, MSC01-C</a> - Strive for logical completeness <br/>\n<a href="https://www.securecoding.cert.org/confluence/display/cplusplus/MSC01-CPP.+Strive+for+logical+completeness">CERT, MSC01-CPP</a> - Strive for logical completeness <br/>\n<a href="https://www.securecoding.cert.org/confluence/display/jg/64.+Strive+for+logical+completeness">CERT, MSC64-Java</a> - Strive for locical completeness <br/>', 2, NULL, '"if ... else if" constructs shall be terminated with an "else" clause', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, 'cert', 0, 'HTML'),
(626, 'S1820', NULL, 'php', '<p>\n  A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and having a lot of fields is an indication that a class has grown too large.\n</p>\n<p>\n  Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.\n</p>', 2, NULL, 'Classes should not have too many fields', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'LINEAR', NULL, '1h', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(627, 'S881', NULL, 'php', '<p>\n  The use of increment and decrement operators in combination with other arithmetic operators is not recommended, because: <br/>\n  It can significantly impair the readability of the code.<br/>\n  It introduces additional side effects into a statement, with the potential for undefined behavior.<br/>\n  It is safer to use these operators in isolation from any other arithmetic operators.<br/>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n$u8a = ++$u8b + $u8c--;\n$foo = $bar++ / 4;\n</pre>\n\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++$u8b;\n$u8a = $u8b + $u8c;\n$u8c--;\n$foo = $bar / 4;\n$bar++;\n</pre>', 2, NULL, 'Increment (++) and decrement (--) operators should not be mixed with other operators in an expression', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, 'cert,misra', 0, 'HTML'),
(628, 'S1264', NULL, 'php', '<p>\n  When only the condition expression is defined in a <code>for</code> loop, but the init and increment expressions are missing, a <code>while</code> loop should be used instead to increase readability.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor(;condition;) { /*...*/ }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nwhile(condition) { /*...*/ }\n</pre>', 1, NULL, 'A "while" loop should be used instead of a "for" loop', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(629, 'S1757', NULL, 'php', '<p>\nCoding conventions allow teams to collaborate effectively. For maximum standardization and readability, PHP code should use the long &lt?php ?&gt tags or the short-echo &lt?= ?&gt tags; it should not use the other tag variations.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt?\n$foo = 1;\n?&gt\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt?php\n$foo = 1;\n?&gt\n</pre>', 1, NULL, '"<?php" and "<?=" tags should be used', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention,psr1', 0, 'HTML'),
(630, 'S1793', NULL, 'php', '<p>\nAccording to PSR2 convention:\n</p>\n<blockquote>\nThe keyword elseif SHOULD be used instead of else if so that all control keywords look like single words.\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($expr1) {\n  ...\n} else if ($expr2) {\n  ...\n} else {...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif ($expr1) {\n  ...\n} elseif ($expr2) {\n  ...\n} else {...}\n</pre>', 1, NULL, '"elseif" keyword should be used in place of "else if" keywords', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention,psr2', 0, 'HTML'),
(631, 'S1599', NULL, 'php', '<p>\n  PHP''s variable variables feature is temptingly powerful, but can lead to unmaintainable code.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n$var = ''foo'';\n$$var = ''bar'';      //Noncompliant\n$$$var = ''hello'';  //Noncompliant\n\necho $foo; //will display ''bar''\necho $bar; //will display ''hello''\n</pre>', 2, NULL, 'Variable variables should not be used', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '10min', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(632, 'S131', NULL, 'php', '<p>\n  The requirement for a final <code>default</code> clause is defensive programming.</br>\n  This clause should either take appropriate action or contain a suitable comment as to why no action is taken.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($param) {  //missing default clause\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n}\n\nswitch ($param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch ($param) {\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>', 2, NULL, '"switch" statements should end with a "case default" clause', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, 'cert,cwe', 0, 'HTML'),
(633, 'S1124', NULL, 'php', '<p>\nThe PSR2 standard recommends listing modifiers in the following order to improve the readability of PHP source code:\n</p>\n\n<ol>\n <li>final or abstract</li>\n <li>public or protected or private</li>\n <li>static</li>\n</ol>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic protected $foo;\n...\npublic static final function bar(){...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nprotected static $foo;\n...\nfinal public static function bar(){...}\n</pre>', 1, NULL, 'Modifiers should be declared in the correct order', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention,psr2', 0, 'HTML'),
(634, 'S1125', NULL, 'php', '<p>\n  Remove literal boolean values from conditional expressions to improve readability. Anything that can be tested for equality with a boolean value must itself be a boolean value, and boolean values can be tested atomically.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($booleanVariable == true) { /* ... */ }\nif ($booleanVariable != true) { /* ... */ }\nif ($booleanVariable || false) { /* ... */ }\ndoSomething(!false);\n\n$booleanVariable = condition ? true : exp;\n$booleanVariable = condition ? false : exp;\n$booleanVariable = condition ?  exp : true;\n$booleanVariable = condition ?  exp : false;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif ($booleanVariable) { /* ... */ }\nif (!$booleanVariable) { /* ... */ }\nif ($booleanVariable) { /* ... */ }\ndoSomething(true);\n\n$booleanVariable = condition || exp;\n$booleanVariable = !condition && exp;\n$booleanVariable = !condition ||  exp;\n$booleanVariable = condition && exp;\n</pre>\n\n<h2>Exceptions</h2>\n<p>The use of literal booleans in comparisons which use identity operators (<code>===</code> and <code>!==</code>) are ignored.</p>', 1, NULL, 'Literal boolean values should not be used in condition expressions', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(635, 'S134', NULL, 'php', '<p>\n  Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code> and <code>try</code> statements is a key ingredient for making what''s known as "Spaghetti code".\n</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>The following code snippet illustrates this rule with the default threshold of 3.</p>\n<pre>\n  if (condition1) {                  // Compliant - depth = 1\n    ...\n    if (condition2) {                // Compliant - depth = 2\n      ...\n      for($ = 0; $i < 10; $i++) {  // Compliant - depth = 3, not exceeding the limit\n        ...\n        if (condition4) {            // Non-Compliant - depth = 4\n          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            ...\n          }\n          return;\n        }\n      }\n    }\n  }\n</pre>', 2, NULL, 'Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 36, NULL, 'LINEAR', NULL, '10min', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(636, 'S1126', NULL, 'php', '<p>\n  Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.\n</p>\n<p>\n  Sometimes the developer will not have the time or will simply forget to get back to that tag.\n  This rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n\n\n<h2>Compliant Solution</h2>\n<pre>\nreturn condition;\n</pre>', 1, NULL, 'Return of boolean expressions should not be wrapped into an "if-then-else" statement', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(637, 'S1799', NULL, 'php', '<p>\nThe <code>exit(...)</code> and <code>die(...)</code> statements should absolutely not be used in Web PHP pages as this might lead to a very bad user experience. In such case, the end user might have the feeling that the web site is down or has encountered a fatal error.\n</p>\n<p>\nBut of course PHP can also be used to develop command line application and in such case use of <code>exit(...)</code> or <code>die(...)</code> statement can be justified but must remain limited and not spread all over the application. We expect exceptions to be used to handle errors and those exceptions should be caught just before leaving the application to specify the exit code with help of <code>exit(...)</code> or <code>die(...)</code> statements.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n    public function bar($param)  {\n        if ($param === 42) {\n            exit(23);\n        }\n    }\n}\n{code}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n    public function bar($param)  {\n        if ($param === 42) {\n            throw new Exception(''Value 42 is not expected.'');\n        }\n    }\n}\n</pre>', 3, NULL, '"exit(...)" and "die(...)" statements should not be used', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 19, NULL, 'LINEAR', NULL, '20min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(638, 'S1998', NULL, 'php', '<p>\n  Passing a reference to a function parameter means that any modifications the method makes to the parameter will be made to the original value as well, since references have the effect of pointing two variables at the same memory space. This feature can be difficult to use correctly, particularly if the callee is not expecting a reference, and the improper use of references in function calls can make code less efficient rather than more efficient.\n</p>\n<p>\n  Further, according to the PHP manual:\n</p>\n<blockquote>\n  As of PHP 5.3.0, you will get a warning saying that "call-time pass-by-reference" is deprecated... And as of PHP 5.4.0, call-time pass-by-reference was removed, so using it will raise a fatal error.\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyfun(&$name);  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nmyfun($name);\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="http://cwe.mitre.org/data/definitions/374">MITRE, CWE-374</a> - Weakness Base Passing Mutable Objects to an Untrusted Method</li>\n</ul>', 3, NULL, 'References should not be passed to function calls', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'LINEAR', NULL, '15min', NULL, NULL, NULL, NULL, 'obsolete,performance', 0, 'HTML'),
(639, 'S1996', NULL, 'php', '<p>\n  A file that grows too much tends to aggregate too many responsibilities\n  and inevitably becomes harder to understand and therefore to maintain. This is doubly true for a file with multiple independent classes and interfaces. It is strongly advised to divide the file into one independent class or interface per file.\n</p>', 2, NULL, 'Files should contain only one class or interface each', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '10min', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(640, 'S1997', NULL, 'php', '<p>\n  Shared coding conventions allow teams to collaborate efficiently. To avoid the confusion that can be caused by tangling two coding languages in the same file, inline HTML should be avoided.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  $my_field;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;php\n$name = "George";\n?>\n&lt;p&gt; Hello &lt;?php $name ?>&lt;/p&gt;\n</pre>', 1, NULL, 'Files should not contain inline HTML', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '10min', NULL, NULL, NULL, NULL, 'brain-overload,convention', 0, 'HTML'),
(641, 'S121', NULL, 'php', '<p>\n  Not using curly braces could be error-prone in some cases.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// the two statements seems to be attached to the if statement whereas this is the case only for the first one:\nif (condition)\n  executeSomething();\n  checkSomething();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n  checkSomething();\n}\n</pre>', 2, NULL, '"if/else/for/while/do" statements should always use curly braces', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention,cwe', 0, 'HTML'),
(642, 'S907', NULL, 'php', '<p>\n  <code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such as if, for, while, continue or break should be used instead.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n$i = 0;\nloop:\n  echo("i = $i");\n  $i++;\n  if ($i < 10){\n    goto loop;\n  }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor ($i = 0; $i < 10; $i++){\n  echo("i = $i");\n}\n</pre>', 2, NULL, '"goto" statement should not be used', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '10min', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(643, 'S122', NULL, 'php', '<p>\n  For better readability, do not put more than one statement on a single line.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Anonymous functions containing a single statement ignored.</p>\n<pre>\n$max_comparator = function ($v) { return $v > 2; };           // Compliant\n$max_comparator = function ($v) { echo $v; return $v > 2; };  // Noncompliant\n</pre>', 2, NULL, 'Statements should be on separate lines', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 19, NULL, 'LINEAR', NULL, '1min', NULL, NULL, NULL, NULL, 'convention,psr2', 0, 'HTML'),
(644, 'S1990', NULL, 'php', '<p>\n  There is no need to use the <code>final</code> modifier inside a <code>final</code> class. Everything in it is <code>final</code> by default.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfinal class MyClass {\n\n  public final String getName() {  // Noncompliant\n    return name;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfinal class MyClass {\n\n  public String getName() {  // Compliant\n    return name;\n  }\n}\n</pre>', 1, NULL, '"final" should not be used redundantly', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(645, 'S1066', NULL, 'php', '<p>\n  Merging collapsible <code>if</code> statements increases the code''s readability.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  if (condition2) {\n    ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1 && condition2) {\n  ...\n}\n</pre>', 2, NULL, 'Collapsible "if" statements should be merged', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '6min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(646, 'S1067', NULL, 'php', '<p>\n  The complexity of an expression is defined by the number of <code>&&</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code> operators it contains.</br>\n  A single expression''s complexity should not become too high to keep the code readable.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value 3</p>\n<pre>\nif ((($condition1 && $condition2) || ($condition3 && $condition4)) && $condition5) { ... }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif ( (my_first_condition() || my_second_condition()) && my_last_condition()) { ... }\n</pre>', 2, NULL, 'Expressions should not be too complex', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'LINEAR', NULL, '10min', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(647, 'S2014', NULL, 'php', '<p>\n  <code>$this</code> this refers to the current class instance. But static methods can be accessed without instantiating the class, and <code>$this</code> is not available to them. Using <code>$this</code> in a static context will result in runtime errors.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Clazz {\n  $name=NULL;  // instance variable\n\n  public static function foo(){\n    if ($this->name != NULL) {\n      // ...\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Clazz {\n  $name=NULL;  // instance variable\n\n  public static function foo($nameParam){\n    if ($nameParam != NULL) {\n      // ...\n    }\n  }\n}\n</pre>', 4, NULL, '"$this" should not be used in a static context', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'LINEAR', NULL, '15min', NULL, NULL, NULL, NULL, 'bug', 0, 'HTML'),
(648, 'S1172', NULL, 'php', '<p>\n  Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething($a, $b) { // "$a" is unused\n  return compute($b);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething($b) {\n  return compute($b);\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Methods overriding or implementing another one should be excluded</p>\n<pre>\n/*\n * @inheritdoc\n */\nfunction doSomething($a, $b) {     // no issue reported on $b\n  compute($a);\n}\n</pre>', 2, NULL, 'Unused function parameters should be removed', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'unused', 0, 'HTML'),
(649, 'S2011', NULL, 'php', '<p>\n  Global variables are a useful construct, but they should not be abused. Functions can access the global scope either through the <code>global</code> keyword or though the <code>$GLOBALS</code> array, but these practices considerably reduce the function''s readability and reusability. Instead, the global variable should be passed as a parameter to the function.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n$myGlobalVariable;\n\nfunction foo()\n{\n  global $myGlobalVariable;     // Noncompliant\n  $GLOBALS[''myGlobalVariable'']; // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo($myStateVariable)\n{\n  // ...\n}\n</pre>', 2, NULL, 'The "global" keyword should not be used', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'LINEAR', NULL, '30min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(650, 'S1479', NULL, 'php', '<p>\n  When <code>switch</code> statements have a large set of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map structure would be more readable and maintainable, and should be used instead.\n</p>', 2, NULL, 'Switch statements should not have too many case clauses', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 35, NULL, 'LINEAR', NULL, '30min', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(651, 'S1068', NULL, 'php', '<p>\n  If a private field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will improve maintainability because developers will not wonder what the variable is used for.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private $foo = 4;                       //foo is unused\n\n  public function compute($a) {\n    return $a * 4;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  public function compute($a) {\n    return $a * 4;\n  }\n}\n</pre>', 2, NULL, 'Unused private fields should be removed', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, 'unused', 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(652, 'S2010', NULL, 'php', '<p>\n  PHP has two sets of logical operators: <code>&amp;</code> / <code>||</code>, and <code>and</code> / <code>or</code>. The difference between the sets is precedence. Because <code>and</code> / <code>or</code> have a lower precedence than almost any other operator, using them instead of <code>&&</code> / <code>||</code> may not have the result you expect.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n$have_time = true;\n$have_money = false;\n$take_vacation = $have_time and $have_money;  // Noncompliant. $take_vacation == true.\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n$have_time = true;\n$have_money = false;\n$take_vacation = $have_time && $have_money;  // $take_vacation == false.\n</pre>', 3, NULL, '"&&" and "||" should be used', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, 'pitfall', 0, 'HTML'),
(653, 'S1541', NULL, 'php', '<p>\n  The cyclomatic complexity of functions should not exceed a defined threshold.\n  Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.\n</p>', 2, NULL, 'Functions should not be too complex', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'LINEAR', NULL, '30min', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(654, 'S1788', NULL, 'php', '<p>\nPHP is one of this powerful language allowing to define a default value for a method argument. But all method arguments with a default value should be declared after the method arguments without default value.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>In the following case, calling makeyogurt("raspberry") won''t lead to the expected result :</p>\n<pre>\nfunction makeyogurt($type = "acidophilus", $flavour){...}\n</pre>\n<p>The following warning will be generated at runtime: <code>Missing argument 2 in call to makeyogurt()</code></p>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction makeyogurt($flavour, $type = "acidophilus", ){...}\n</pre>', 3, NULL, 'Method arguments with default value should be last', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'LINEAR', NULL, '20min', NULL, NULL, NULL, NULL, 'bug,psr2', 0, 'HTML'),
(655, 'S113', NULL, 'php', '<p>\n  Some tools such as Git work better when files end with an empty line.\n  This rule simply generates an issue if it is missing.\n</p>\n\n<p>For example, a Git diff look like:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>', 1, NULL, 'Files should contain an empty new line at the end', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(656, 'S1781', NULL, 'php', '<p>\nUsing indifferently lower or upper case for PHP keywords and constants "true", "false" and "null" can impact the readability of PHP source code.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt?php ECHO ''Hello World''; ?&gt\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt?php echo ''Hello World''; ?&gt\n</pre>', 1, NULL, 'PHP keywords and constants "true", "false", "null" should be in lower case', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '1min', NULL, NULL, NULL, NULL, 'convention,psr2', 0, 'HTML'),
(657, 'S1780', NULL, 'php', '<p>\nAccording to PSR2 standard :\n</p>\n<blockquote>\nThe closing ?> tag should be omitted from files containing only PHP.\n</blockquote>', 1, NULL, 'Closing tag "?>" should be omitted on files containing only PHP', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention,psr2', 0, 'HTML'),
(658, 'S115', NULL, 'php', '<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all constant names match a provided regular expression.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ndefine("const1", true);\n\nclass Foo {\n    const const2 = "";\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndefine("CONST1", true);\n\nclass Foo {\n    const CONST2 = "";\n}\n</pre>', 2, NULL, 'Constant names should comply with a naming convention', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(659, 'S116', NULL, 'php', '<p>\n  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field names match a provided regular expression.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  $my_field;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(){...}\n</pre>\n\n<h2>Exceptions</h2>\n<pre>\nclass MyClass {\n  $myField;\n}\n</pre>', 2, NULL, 'Field names should comply with a naming convention', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(660, 'S1131', NULL, 'php', '<p>\n  Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same file.\n</p>\n<p>\n  If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the opportunity to do so.\n</p>', 2, NULL, 'Lines should not end with trailing whitespaces', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '1min', NULL, NULL, NULL, NULL, 'convention,psr2', 0, 'HTML'),
(661, 'S117', NULL, 'php', '<p>\n  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local variable and function parameter names match a provided regular expression.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic function doSomething($my_param){\n  $LOCAL;\n  ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic function doSomething($myParam){\n  $local;\n  ...\n}\n</pre>', 2, NULL, 'Local variable and function parameter names should comply with a naming convention', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(662, 'S1784', NULL, 'php', '<p>\nClass methods may be defined as public, private, or protected. Methods declared without any explicit visibility keyword are defined as public. To prevent any misunderstanding, this visibility should always be explicitly declared.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(){...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic function foo(){...}\n</pre>', 1, NULL, 'Method visibility should be explicitly declared', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(663, 'S1134', NULL, 'php', '<p>\n  <code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</br>\n  Sometimes the developer will not have the time or will simply forget to get back to that tag.\n  This rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction divide($numerator, $denominator) {\n  return $numerator / $denominator;              // FIXME denominator value might be  0\n}\n</pre>', 2, NULL, '"FIXME" tags should be handled', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'LINEAR', NULL, '20min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(664, 'S1135', NULL, 'php', '<p>\n  <code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</br>\n  Sometimes the developer will not have the time or will simply forget to get back to that tag.\n  This rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething() {\n  // TODO\n}\n</pre>', 0, NULL, '"TODO" tags should be handled', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '20min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(665, 'S1488', NULL, 'php', '<p>\n  Declaring a variable only to immediately return [or throw] it is a bad practice.<br/>\n  Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to know exactly what will be returned.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction compute_duration_in_milliseconds() {\n  $duration = ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000 ;\n  return $duration;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction compute_duration_in_milliseconds() {\n  return ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000;\n}\n</pre>', 1, NULL, 'Local variables should not be declared and then immediately returned or thrown', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(666, 'S1536', NULL, 'php', '<p>\n  Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument hides all the previous arguments with the same name. This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction compute($a, $a, $c) { // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction compute($a, $b, $c) { // Compliant\n}\n</pre>', 3, NULL, 'Function argument names should be unique', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, 'pitfall', 0, 'HTML'),
(667, 'S2007', NULL, 'php', '<p>\n  Shared coding conventions allow teams to collaborate efficiently. Defining and using global functions, when the convention dictates OOP can be very confusing and difficult to use properly for three reasons. First, you run the risk of name clashes. Second, global functions must be stateless, or they can cause difficult-to-track bugs. Finally, it is difficult to properly test classes that use global functions.\n</p>\n<p>\n  Instead of being declared globally, such functions should be moved into a class, potentially as static functions, so they can be used without a class instance.\n</p>\n<p>\n  This rule checks that only Object Oriented Programming is used and that no functions or procedures are declared outside of a class.\n</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\n\npublic function doSomething($arg) {\n  //...\n}\nclass MyClass {\n    //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\n\nclass MyClass {\n  public static function doSomething($arg) {\n    //...\n  }\n}\n</pre>', 2, NULL, 'Functions should not be defined outside of classes', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'LINEAR', NULL, '15min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(668, 'S1578', NULL, 'php', '<p>\n  Shared coding conventions allow teams to collaborate effectively. For that reason, file names should conform to a defined standard.\n</p>', 1, NULL, 'File names should comply with a naming convention', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '30min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(669, 'S2004', NULL, 'php', '<p>\n  Nesting functions can quickly turn your code into "spaghetti code". Such code is hard to read, refactor and therefore to maintain.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction f () {\n  function f_inner () {\n    function f_inner_inner() {\n      function f_inner_inner_inner() { // Noncompliant\n      }\n    }\n  }\n}\n</pre>', 2, NULL, 'Functions should not be nested too deeply', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 36, NULL, 'LINEAR', NULL, '20min', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(670, 'S2003', NULL, 'php', '<p>\n  At root,  <code>require</code>, <code>require_once</code>, <code>include</code>, and <code>include_once</code> all perform the same task of including one file in another. However, the way they perform that task differs, and they should not be used interchangeably.\n</p>\n<p>\n  <code>require</code> includes a file but generates a fatal error if an error occurs in the process.\n</p>\n<p>\n  <code>include</code> also includes a file, but generates only a warning if an error occurs.\n</p>\n<p>\n  Predictably, the difference between <code>require</code> and <code>require_once</code> is the same as the difference between <code>include</code> and <code>include_once</code> - the "_once" versions ensure that the specified file is only included once.\n</p>\n<p>\n  Because including the same file multiple times could have unpredictable results, the "once" versions are preferred.\n</p>\n<p>\n  Because <code>include_once</code> generates only warnings, it should be used only when the file is being included conditionally, i.e. when all possible error conditions have been checked beforehand.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ninclude ''code.php'';  //Noncompliant; not a "_once" usage and not conditional\ninclude $user.''_history.php''; // Noncompliant\nrequire ''more_code.php'';  // Noncompliant; not a "_once" usage\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nrequire_once ''code.php'';\nif (is_member($user)) {\n  include_once $user.''_history.php'';\n}\nrequire_once ''more_code.php'';\n</pre>', 3, NULL, '"require_once" and "include_once" should be used instead of "require" and "include"', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, 'bug', 0, 'HTML'),
(671, 'S1106', NULL, 'php', '<p>\n  Shared coding conventions make it possible to collaborate efficiently. This rule make it mandatory to place the open curly brace at the beginning of a line.\n</p>\n<p>The following code snippet illustrates this rule:</p>\n<pre>\nfunction myMethod()\n{                                               //Compliant\n  if(something)\n  {                                             //Compliant\n    executeTask();\n  } else {                                    //Non-Compliant\n    doSomethingElse();\n  }\n}\n</pre>', 2, NULL, 'An open curly brace should be located at the beginning of a line', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '1min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(672, 'S2005', NULL, 'php', '<p>\n  There is no reason to concatenate literal strings. Doing so is an exercise is reducing code readability. Instead, the strings should be combined.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n$msg = "Hello " . "${name}" . "!";  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n$msg = "Hello ${name}!";\n</pre>', 1, NULL, 'String literals should not be concatenated', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(673, 'S1200', NULL, 'php', '<p>\n  According to the Single Responsibility Principle, introduced by Robert C. Martin in his book "Principles of Object Oriented Design", a class should have only one responsibility:\n</p>\n<blockquote>\n  If a class has more than one responsibility, then the responsibilities become coupled.\n  Changes to one responsibility may impair or inhibit the class'' ability to meet the others.\n  This kind of coupling leads to fragile designs that break in unexpected ways when changed.\n</blockquote>\n\n<p>\n  Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.<br/>\n  Nested classes dependencies are not counted as dependencies of the outer class.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>In case the threshold is set to 5</p>\n<pre>\n  class Foo {                 // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n    /**\n     * @var T1\n     */\n    public $a1;               // Foo is coupled to T1\n    /**\n     * @var T2\n     */\n    protected $a2;            // Foo is coupled to T2\n    /**\n     * @var T3\n     */\n    private $a3;              // Foo is coupled to T3\n\n    /**\n     * @param T5\n     * @param T6\n     *\n     * @return T4\n     */\n    public function compute(T5 $a, $b) { // Foo is coupled to T4, T5 and T6\n      $result = new T7();    // Foo is coupled to T7\n      return $result;\n  }\n}\n</pre>', 2, NULL, 'Classes should not be coupled to too many other classes (Single Responsibility Principle)', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'LINEAR', NULL, '2h', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(674, 'S1105', NULL, 'php', '<p>\n  Sharing some coding conventions is a key point to make it possible for a team to efficiently collaborate. This rule make it mandatory to place open curly braces at the end of lines of code.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n\n<h2>Exceptions</h2>\n<pre>\nif(condition) {doSomething();}\n</pre>', 2, NULL, 'An open curly brace should be located at the end of a line', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '1min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(675, 'S2000', NULL, 'php', '<p>\n  Having characters before <code>&lt;?php</code> can cause "Cannot modify header information" errors and similar problems with Ajax requests.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ntest&lt;?php  //Noncompliant\n// ...\n</pre>\n<p>and</p>\n<pre>\n// Noncompliant; newline before opening tag\n  &lt;?php\n// ...\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\n// ...\n</pre>', 3, NULL, 'Files should not contain characters before "<?php"', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'user-experience', 0, 'HTML'),
(676, 'S2002', NULL, 'php', '<p>\n  Just as pain is your body''s way of telling you something is wrong, errors are PHP''s way of telling you there''s something you need to fix. Neither pain, nor PHP errors should be ignored.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n@doSomethingDangerous($password);  // Noncompliant; ''@'' silences errors from function call\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndoSomethingDangerous($password);\n</pre>', 2, NULL, 'Errors should not be silenced', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 40, NULL, 'LINEAR', NULL, '30min', NULL, NULL, NULL, NULL, 'pitfall', 0, 'HTML'),
(677, 'S2001', NULL, 'php', '<p>\n  Deprecated language features are those that have been retained temporarily for backward compatibility, but which will eventually be removed from the language. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated features should be added to the code, and all existing uses should be gradually removed.\n</p>\n<p>\n  The following functions were deprecated in PHP 5:\n</p>\n<table>\n  <tr>\n    <th>Deprecated</th>\n    <th>Use Instead</th>\n  </tr>\n  <tr>\n    <td>call_user_method()</td>\n    <td>call_user_func()</td>\n  </tr>\n  <tr>\n    <td>call_user_method_array()</td>\n    <td>call_user_func_array()</td>\n  </tr>\n  <tr>\n    <td>define_syslog_variables()</td>\n  </tr>\n  <tr>\n    <td>dl()</td>\n  </tr>\n  <tr>\n    <td>ereg()</td>\n    <td>preg_match()</td>\n  </tr>\n  <tr>\n    <td>ereg_replace()</td>\n    <td>preg_replace()</td>\n  </tr>\n  <tr>\n    <td>eregi()</td>\n    <td>preg_match() with ''i'' modifier</td>\n  </tr>\n  <tr>\n    <td>eregi_replace()</td>\n    <td>preg_replace() with ''i'' modifier</td>\n  </tr>\n  <tr>\n    <td>set_magic_quotes_runtime() and its alias, magic_quotes_runtime()</td>\n  </tr>\n  <tr>\n    <td>session_register()</td>\n    <td>$_SESSION superglobal</td>\n  </tr>\n  <tr>\n    <td>session_unregister()</td>\n    <td>$_SESSION superglobal</td>\n  </tr>\n  <tr>\n    <td>session_is_registered()</td>\n    <td>$_SESSION superglobal</td>\n  </tr>\n  <tr>\n    <td>set_socket_blocking()</td>\n    <td>stream_set_blocking()</td>\n  </tr>\n  <tr>\n    <td>split()</td>\n    <td>preg_split()</td>\n  </tr>\n  <tr>\n    <td>spliti()</td>\n    <td>preg_split() with ''i'' modifier</td>\n  </tr>\n  <tr>\n    <td>sql_regcase()</td>\n  </tr>\n  <tr>\n    <td>mysql_db_query()</td>\n    <td>mysql_select_db() and mysql_query()</td>\n  </tr>\n  <tr>\n    <td>mysql_escape_string()</td>\n    <td>mysql_real_escape_string()</td>\n  </tr>\n  <tr>\n    <td>Passing locale category names as strings</td>\n    <td>Use the LC_* family of constants</td>\n  </tr>\n</table>', 1, NULL, 'Functions deprecated in PHP 5 should not be used', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 8, NULL, 'LINEAR', NULL, '15min', NULL, NULL, NULL, NULL, 'obsolete', 0, 'HTML'),
(678, 'S1109', NULL, 'php', '<p>\n  Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the beginning of a line.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition) {\n  doSomething();}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered.</p>\n<pre>\nif(condition) {doSomething();}\n</pre>', 1, NULL, 'A close curly brace should be located at the beginning of a line', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '1min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(679, 'S1600', NULL, 'php', '<p>\n  The following predefined variables are deprecated and should be replaced by the new versions:\n</p>\n<table>\n  <tr>\n    <th>Replace</th>\n    <th>With</th>\n  </tr>\n  <tr>\n    <td>$HTTP_SERVER_VARS</td>\n    <td>$_SERVER</td>\n  </tr>\n  <tr>\n    <td>$HTTP_GET_VARS</td>\n    <td>$_GET</td>\n  </tr>\n  <tr>\n    <td>$HTTP_POST_VARS</td>\n    <td>$_POST</td>\n  </tr>\n  <tr>\n    <td>$HTTP_POST_FILES</td>\n    <td>$_FILES</td>\n  </tr>\n  <tr>\n    <td>$HTTP_SESSION_VARS</td>\n    <td>$_SESSION</td>\n  </tr>\n  <tr>\n    <td>$HTTP_ENV_VARS</td>\n    <td>$_ENV</td>\n  </tr>\n  <tr>\n    <td>$HTTP_COOKIE_VARS</td>\n    <td>$_COOKIE</td>\n  </tr>\n</table>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\necho ''Name parameter value: '' . $HTTP_GET_VARS["name"];\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\necho ''Name parameter value: '' . $_GET["name"];\n</pre>', 2, NULL, 'Deprecated predefined variables should not be used', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 6, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'pitfall', 0, 'HTML'),
(680, 'S1185', NULL, 'php', '<p>\n  Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Child extends Parent {\n\n  public function func($n,$m) {\n    parent::func($n$m);  // Noncompliant\n  }\n}\n\nclass Parent {\n  public function func($n, $m) {\n    // do something\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Child extends Parent {\n\n  public function func($n,$m) {\n    parent::func($n$m);\n    // do additional things...\n  }\n}\n\nclass Parent {\n  public function func($n, $m) {\n    // do something\n  }\n}\n</pre>\n<p>or</p>\n<pre>\nclass Child extends Parent {\n  // function eliminated\n}\n\nclass Parent {\n  public function func($n, $m) {\n    // do something\n  }\n}\n</pre>', 1, NULL, 'Overriding methods should do more than simply call the same method in the super class', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(681, 'S1779', NULL, 'php', '<p>\nAll developers should use the same end-line character(s) to prevent polluting the history changelog of source files in the SCM engine. Moreover some SCM engines like Git might sometimes badly support use of Windows ''CRLF'' end of line characters.\n</p>', 1, NULL, 'Only LF character (Unix-like) should be used to end lines', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention,psr2', 0, 'HTML'),
(682, 'S1603', NULL, 'php', '<p>\n  In PHP 4, any function with the same name as the nesting class was considered a class constructor. In PHP 5, this mechanism has been deprecated and the "__construct" method name should be used instead.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  function Foo(){...}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n  function __construct(){...}\n}\n</pre>', 2, NULL, 'PHP 4 constructor declarations should not be used', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 6, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'pitfall', 0, 'HTML'),
(683, 'S1448', NULL, 'php', '<p>\n  A class that grows too much tends to aggregate too many responsibilities\n  and inevitably becomes harder to understand and therefore to maintain.\n  Above a specific threshold, it is strongly advised to refactor the class\n  into smaller ones which focus on well defined topics.\n</p>', 2, NULL, 'Classes should not have too many methods', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'LINEAR', NULL, '1h', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(684, 'S1605', NULL, 'php', '<p>\n  In PHP 5 both the way to declare a constructor and to make a call to a parent constructor have evolved. When declaring constructors with the PHP5 <code>__construct</code> name, nested calls to parent constructors should also use this new <code>_constructor</code> name.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo extends Bar {\n  function __construct() {\n    parent::Bar();\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo extends Bar {\n  function __construct() {\n    parent::__construct();\n  }\n}\n</pre>', 2, NULL, 'PHP 4 style calls to parent constructors should not be used in PHP5 "__construct" functions', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 6, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(685, 'S104', NULL, 'php', '<p>\n  A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.</br>\n  Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.</br>\n  Those smaller files will not only be easier to understand but also probably easier to test.\n</p>', 2, NULL, 'Files should not have too many lines', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '1h', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(686, 'S1142', NULL, 'php', '<p>\n  Having too many return statements in a function increases the function''s essential complexity because the flow of execution is broken each time a return statement is encountered. This makes it harder to read and understand the logic of the function.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>The following code snippet illustrates this rule with the default threshold of 3:</p>\n<pre>\nfunction myFunction() { // Noncompliant\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>', 2, NULL, 'Functions should not contain too many return statements', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '20min', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(687, 'S105', NULL, 'php', '<p>\n  Developers should not need to configure the tab width of their text editors in order to be able to read source code.</br>\n  So the use of tabulation character must be banned.\n</p>', 1, NULL, 'Tabulation characters should not be used', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'convention,psr2', 0, 'HTML'),
(688, 'S1481', NULL, 'php', '<p>\n  If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction numberOfMinutes($hours) {\n  $seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction numberOfMinutes($hours) {\n  return hours * 60;\n}\n</pre>', 2, NULL, 'Unused local variables should be removed', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, 'unused', 0, 'HTML'),
(689, 'S1144', NULL, 'php', '<p>\n  Private methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  private function Foo() {}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n\n  public static function doSomething()\n  {\n    $foo = new Foo();\n    ...\n  }\n\n  private function unusedPrivateFunction() {  // Noncompliant\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  private function Foo(){}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n\n  public static function doSomething()\n  {\n    $foo = new Foo();\n  }\n}\n</pre>', 2, NULL, 'Unused private method should be removed', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, 'unused', 0, 'HTML'),
(690, 'S103', NULL, 'php', '<p>\n  Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n</p>', 2, NULL, 'Lines should not be too long', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '1min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(691, 'S108', NULL, 'php', '<p>\n  Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor ($i = 0; $i < 42; $i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty.</p>', 2, NULL, 'Nested blocks of code should not be left empty', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(692, 'S1301', NULL, 'php', '<p>\n  <code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.<br/>\n  For just one or two cases however, the code will be more readable with <code>if</code> statements.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($variable) {\n  case 0:\n    do_something();\n    break;\n  default:\n    do_something_else();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif ($variable == 0) {\n  do_something();\n} else {\n  do_something_else();\n}\n</pre>', 1, NULL, '"switch" statements should have at least 3 "case" clauses', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(693, 'S1145', NULL, 'php', '<p>\n  If statements with conditions that are always false have the effect of making blocks of code non-functional. This can be useful during debugging, but should not be checked in. If statements with conditions that are always true are completely redundant, and make the code less readable.\n</p>\n\n<p>\n  In either case, non-conditional if statements should be removed.\n</p>\n\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {\n  doSomething();\n}\n\nif (false) {\n  doSomethingElse();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n</pre>', 2, NULL, '"if" statement conditions should not always evaluate to "true" or to "false"', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'LINEAR', NULL, '2min', NULL, NULL, NULL, NULL, 'bug,cwe,security', 0, 'HTML'),
(694, 'S1192', NULL, 'php', '<p>\n  Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\n</p>\n<p>\n  On the other hand, constants can be referenced from many places, but only need to be updated in a single place.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction run() {\n  prepare(''action1'');          // Non-Compliant - ''action1'' is duplicated 3 times\n  execute(''action1'');\n  release(''action1'');\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nACTION_1 = ''action1'';\n\nfunction run() {\n  prepare(ACTION_1);\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>', 1, NULL, 'String literals should not be duplicated', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'LINEAR', NULL, '10min', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(695, 'S107', NULL, 'php', '<p>\n  A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>The following code snippet illustrates this rule with a maximum number of 4 parameters:</p>\n<pre>\nfunction doSomething($param1, $param2, $param3, $param4, $param5) {\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething($param1, $param2, $param3, $param4) {\n}\n</pre>', 2, NULL, 'Functions should not have too many parameters', 'READY', 'php', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'LINEAR', NULL, '20min', NULL, NULL, NULL, NULL, 'brain-overload', 0, 'HTML'),
(696, 'NAB_NEEDLESS_BOX_TO_UNBOX', 'NAB_NEEDLESS_BOX_TO_UNBOX', 'fb-contrib', '<p>This method constructs a Boxed Primitive from a primitive only to call the primitiveValue() method to\nconvert it back to a primitive. Just use the primitive value instead.</p>\n<pre>\n  primitive i = new BoxedPrimitive(1).primitiveValue();\n    or\n  primitive i = BoxedPrimitive.valueOf(1).primitiveValue();\n\n    should just use\n  primitive i = 1;\n</pre>', 0, NULL, 'Performance - Method creates Boxed primitive from primitive only to get primitive value', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(697, 'S508C_NON_ACCESSIBLE_JCOMPONENT', 'S508C_NON_ACCESSIBLE_JCOMPONENT', 'fb-contrib', '<p>This class extends the JComponent gui control but does not implement the Accessibility interface.\nThis makes this control unable to be processed by screen readers, etc, for people with reading/vision\ndifficulties</p>', 0, NULL, 'Correctness - Class extends JComponent but does not implement Accessible interface', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(698, 'HES_EXECUTOR_NEVER_SHUTDOWN', 'HES_EXECUTOR_NEVER_SHUTDOWN', 'fb-contrib', '<p>Most <code>ExecutorService</code> objects must be explicitly shutdown,\notherwise, their internal threads can prolong the running of the JVM, even when everything\nelse has stopped.</p>\n\n<p>FindBugs has detected that there are no calls to either the <code>shutdown()</code> or <code>shutdownNow()</code>\nmethod, and thus, the <code>ExecutorService</code> is not guaranteed to ever terminate.  This is especially\nproblematic for <code>Executors.newFixedThreadPool()</code> and most of the other convenience methods in\nthe <code>Executors</code> class.</p>\n\n<p>Even though there are some exceptions to this, particularly when a custom <code>ThreadFactory</code> is\nprovided, or for <code>ThreadPoolExecutor</code>s with <code>allowsCoreThreadTimeOut()</code> set to true,\nit is good practice to explictly shutdown the <code>ExecutorService</code> when its utility is done.</p>', 0, NULL, 'Correctness - Hanging ExecutorService', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(699, 'MDM_SETDEFAULTLOCALE', 'MDM_SETDEFAULTLOCALE', 'fb-contrib', '<p>Do not use the <code>Locale.setDefault()</code> method to change the default locale. It changes the JVM''s default locale for all threads and makes your applications unsafe to threads. It does not affect the host locale. Since changing the JVM''s default locale may affect many different areas of functionality, this method should only be used if the caller is prepared to reinitialize locale-sensitive code running within the same Java Virtual Machine, such as the user interface.</p>', 0, NULL, 'MT Correctness - Method calls Locale.setDefault()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(700, 'CVAA_CONTRAVARIANT_ARRAY_ASSIGNMENT', 'CVAA_CONTRAVARIANT_ARRAY_ASSIGNMENT', 'fb-contrib', '<p>This method contains a contravariant array assignment. Since arrays are mutable data structures, their use \nmust be restricted to covariant or invariant usage</p>\n\n<pre>\nclass A {}\nclass B extends A {}\n\n B[] b = new B[2];\n A[] a = b;\n</pre>', 0, NULL, 'Correctness - Method performs a contravariant array assignment', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(701, 'ITC_INHERITANCE_TYPE_CHECKING', 'ITC_INHERITANCE_TYPE_CHECKING', 'fb-contrib', '<p>This method uses the instanceof operator in a series of if/else statements to\ndifferentiate blocks of code based on type. If these types are related by inheritance,\nit is cleaner to just define a method in the base class, and use overridden methods\nin these classes.</p>', 0, NULL, 'Style - Method uses instanceof on multiple types to arbitrate logic', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(702, 'UCC_UNRELATED_COLLECTION_CONTENTS', 'UCC_UNRELATED_COLLECTION_CONTENTS', 'fb-contrib', '<p>This method adds unrelated objects to a collection or array, requiring careful and brittle\ndata access to that collection. Create a separate class with properties needed, and add\nan instance of this class to the collection or array, if possible.</p>', 0, NULL, 'Style - Method adds unrelated types to collection or array', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(703, 'MDM_LOCK_ISLOCKED', 'MDM_LOCK_ISLOCKED', 'fb-contrib', '<p>Calling <code>ReentrantLock.isLocked()</code> or <code>ReentrantLock.isHeldByCurrentThread()</code> might indicate race conditions or incorrect locking. These methods are designed for use in debug code or monitoring of the system state, not for synchronization control.</p>', 0, NULL, 'MT Correctness - Method tests if a lock is locked', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(704, 'SPP_TEMPORARY_TRIM', 'SPP_TEMPORARY_TRIM', 'fb-contrib', 'This method calls trim() on a String without assigning the new string to another variable.\nIt then calls length() or equals on this trimmed string. If trimming the string was important\nfor determining it''s length of it''s equality, it should be trimmed when you actually go to use it.\nIt would make more sense to first trim the String, store the trimmed value in a variable, and then\ncontinue to test and use that trimmed string.', 0, NULL, 'Style - Method trims a String temporarily', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(705, 'NCMU_NON_COLLECTION_METHOD_USE', 'NCMU_NON_COLLECTION_METHOD_USE', 'fb-contrib', '<p>This method makes calls to collection classes where the method is not defined by the Collections\ninterface, and an equivalent method exists in the interface. By using the new methods,\nyou can define this object by the Collections interface and allow better decoupling.</p>', 0, NULL, 'Style - Method uses old non collections interface methods', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(706, 'SPP_INVALID_CALENDAR_COMPARE', 'SPP_INVALID_CALENDAR_COMPARE', 'fb-contrib', '<p>This method passes a non calendar object to the java.util.Calendar.after or java.util.Calendar.before methods.\nEven though these methods take an Object as a parameter type, only Calendar type objects are supported, otherwise\nfalse is returned</p>', 0, NULL, 'Correctness - Method passes a non calendar object to Calendar.before or Calendar.after', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(707, 'MDM_WAIT_WITHOUT_TIMEOUT', 'MDM_WAIT_WITHOUT_TIMEOUT', 'fb-contrib', '<p>Calling <code>{2}</code> without timeout could block forever. Consider using a timeout to detect deadlocks or performance problems. Thread.join() Object.wait() Condition.await() Lock.lock() Lock.lockInterruptibly()</p>', 0, NULL, 'MT Correctness - Method sleeps without timeout', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(708, 'SPP_USELESS_TERNARY', 'SPP_USELESS_TERNARY', 'fb-contrib', '<p>This method tests the value of a boolean and using a ternary operator to return either true or false.\nThe ternary operator is completely unecessary, just use the original boolean value.</p>', 0, NULL, 'Performance - Method uses a ternary operator to cast a boolean to true or false', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(709, 'CU_CLONE_USABILITY_MISMATCHED_RETURN', 'CU_CLONE_USABILITY_MISMATCHED_RETURN', 'fb-contrib', '<p>This class implements the Cloneable interface but defines its clone method to return a type\nthat is different than the class itself, or any interfaces that the class implements.\n</p>', 0, NULL, 'Style - Clone method declares it returns an type different then the owning class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(710, 'MAC_MANUAL_ARRAY_COPY', 'MAC_MANUAL_ARRAY_COPY', 'fb-contrib', '<p>This method copies data from one array to another manually using a loop.\nIt is much better performing to use System.arraycopy as this method is native.</p>', 0, NULL, 'Performance - Method copies arrays manually', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(711, 'LO_STUTTERED_MESSAGE', 'LO_STUTTERED_MESSAGE', 'fb-contrib', 'This method uses a logger method that takes an exception, and passes the result of\nthe getMessage() method on the exception that occurred as the log message.\nSince you are already passing in the exception, that message is already present in the\nlogs, and by passing it in as the message, you are just stuttering information.\nIt would be more helpful to provide a hand written message that describes the error in\nthis method, possibly including the values of key variables.', 0, NULL, 'Style - Method stutters exception message in logger', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(712, 'NRTL_NON_RECYCLEABLE_TAG_LIB', 'NRTL_NON_RECYCLEABLE_TAG_LIB', 'fb-contrib', '<p>This Tag library class implements an attribute who''s associated backing store field\nis modified at another point in the tag library. In order for a taglibrary to be\nrecycleable, only the container is allowed to change this attribute, through the use\nof the setXXX method of the taglib. By modifying the value programmatically, the\ncontainer will not initialize the attribute correctly on reuse.</p>', 0, NULL, 'Correctness - Tag library is not recycleable', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(713, 'EXS_EXCEPTION_SOFTENING_HAS_CHECKED', 'EXS_EXCEPTION_SOFTENING_HAS_CHECKED', 'fb-contrib', '<p>This method''s exception signature is constrained by an interface of super class to not throw a \nchecked exception that was caught. Therefore this exception was converted to an unchecked exception and \nthrown. It would probably be better to throw the closest checked exception allowed, and to annotate\nthe new exception with the original exception using the initial cause field.</p>', 0, NULL, 'Style - Constrained method converts checked exception to unchecked instead of another allowable checked exception', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(714, 'EXS_EXCEPTION_SOFTENING_NO_CHECKED', 'EXS_EXCEPTION_SOFTENING_NO_CHECKED', 'fb-contrib', '<p>This method''s exception signature is constrained by an interface or super class to not throw\nany checked exceptions. Therefore a caught checked exception was converted to an unchecked exception\nand thrown. However it appears that the class in question is owned by the same author as the constraining\ninterface or superclass. Consider changes the signature of this method to include the checked exception.</p>', 0, NULL, 'Style - Constrained method converts checked exception to unchecked', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(715, 'JVR_JDBC_VENDOR_RELIANCE', 'JVR_JDBC_VENDOR_RELIANCE', 'fb-contrib', '<p>This method uses jdbc vendor specific classes and method to perform database work.\nThis makes the code specific to this vendor, and unable to run on other databases.</p>', 0, NULL, 'Correctness - Method uses jdbc vendor specific classes and methods', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(716, 'SPP_STRINGBUFFER_WITH_EMPTY_STRING', 'SPP_STRINGBUFFER_WITH_EMPTY_STRING', 'fb-contrib', '<p>This method calls the StringBuffer of StringBuilder constructor passing in a constant empty string ("").\nThis is the same as calling the default constructor, but makes the code work harder. Consider passing in a\ndefault size instead.', 0, NULL, 'Performance - Method passes empty string to StringBuffer of StringBuilder constructor', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(717, 'ODN_ORPHANED_DOM_NODE', 'ODN_ORPHANED_DOM_NODE', 'fb-contrib', '<p>This method creates a DOM node but does not attach it to a DOM document.\n</p>', 0, NULL, 'Correctness - Method creates DOM node but doesn''t attach it to a document', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(718, 'SC_SUSPICIOUS_COMPARATOR_RETURN_VALUES', 'SC_SUSPICIOUS_COMPARATOR_RETURN_VALUES', 'fb-contrib', '<p>This compareTo or compare method returns constant values for to represent less than,\nequals and greater than. However it does not return each type. Given that comparators\nare transitive, this seems incorrect.</p>', 0, NULL, 'Correctness - Comparator method doesn''t seem to return all ordering values', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(719, 'NPMC_NON_PRODUCTIVE_METHOD_CALL', 'NPMC_NON_PRODUCTIVE_METHOD_CALL', 'fb-contrib', '<p>This method ignores the return value of a common method that is assumed to be none mutating.\nIf this method does in fact not modify the object it is called on, there is no reason to call\nthis method, and it can be removed.', 0, NULL, 'Correctness - Method ignores return value of a non mutating method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(720, 'ACEM_ABSTRACT_CLASS_EMPTY_METHODS', 'ACEM_ABSTRACT_CLASS_EMPTY_METHODS', 'fb-contrib', '<p>This method is empty or merely throws an exception. Since the class it is defined in is \nabstract, it may be more correct to define this method as abstract instead, so that proper\nsubclass behavior is enforced.</p>', 0, NULL, 'Style - Empty method could be declared abstract', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(721, 'ITU_INAPPROPRIATE_TOSTRING_USE', 'ITU_INAPPROPRIATE_TOSTRING_USE', 'fb-contrib', '<p>This method calls algorithmic operations on a String that was returned from a toString() method.\nAs these methods are for debugging/logging purposes, it shouldn''t be the basis of core logic in your code.', 0, NULL, 'Correctness - Method performs algorithmic operations on the result of a toString() call', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(722, 'SPP_STRINGBUILDER_IS_MUTABLE', 'SPP_STRINGBUILDER_IS_MUTABLE', 'fb-contrib', 'This method calls StringBuilder.append and assigns the results to the same StringBuilder as\n  <pre>sb = sb.append("foo")</pre>\n  As StringBuilder is mutable this is not necessary.\n  This is also true of StringBuffer.', 0, NULL, 'Correctness - Method needlessly assigns a StringBuilder to itself, as it''s mutable', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(723, 'MDM_THREAD_YIELD', 'MDM_THREAD_YIELD', 'fb-contrib', '<p>Manual thread scheduling with <code>Thread.sleep()</code> or <code>Thread.yield()</code> has no guaranteed semantics and is often used to mask race conditions.</p>', 0, NULL, 'MT Correctness - Method attempts to manually schedule threads', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(724, 'NIR_NEEDLESS_INSTANCE_RETRIEVAL', 'NIR_NEEDLESS_INSTANCE_RETRIEVAL', 'fb-contrib', '<p>This method calls a method to load a reference to an object, and then only\nuses it to load a static member of that instance''s class. It is simpler and\nbetter performant to just load the static field from the class itself.</p>', 0, NULL, 'Performance - Method retrieves instance to load static member', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(725, 'AIOB_ARRAY_STORE_TO_NULL_REFERENCE', 'AIOB_ARRAY_STORE_TO_NULL_REFERENCE', 'fb-contrib', '<p>This method attempts to store an array element into an an array that appears to not have been allocated.', 0, NULL, 'Correctness - Method attempts to store an array element to an array that does not appear to be allocated', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(726, 'URV_UNRELATED_RETURN_VALUES', 'URV_UNRELATED_RETURN_VALUES', 'fb-contrib', '<p>This method returns two or more unrelated types of objects (Related only through java.lang.Object).\nThis will be very confusing to the code that must call it.</p>', 0, NULL, 'Style - Method returns different types of unrelated Objects', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(727, 'UMTP_UNBOUND_METHOD_TEMPLATE_PARAMETER', 'UMTP_UNBOUND_METHOD_TEMPLATE_PARAMETER', 'fb-contrib', '<p>This method declares a method level template parameter that is not bound by any parameter of this\nmethod. Therefore the template parameter adds no validation or type safety and can be removed, as it''s\njust confusing to the reader.', 0, NULL, 'Correctness - Method declares unbound method template parameter(s)', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(728, 'ISB_TOSTRING_APPENDING', 'ISB_TOSTRING_APPENDING', 'fb-contrib', '<p>This method concatenates the output of a toString() call into a StringBuffer/Builder.\nIt is simpler just pass the object you want to append to the to append call, as that form\ndoes not suffer the potential for NullPointerExceptions, and is easier to read.</p>', 0, NULL, 'Correctness - Method concatenates the result of a toString() call', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(729, 'SPP_USE_CHARAT', 'SPP_USE_CHARAT', 'fb-contrib', '<p>This method calls the toCharArray method on a String the fetch an array of characters, only\nto retrieve one of those characters by index. It is more performant to just use the charAt method.\n</p>', 0, NULL, 'Performance - Method fetches character array just to do the equivalent of the charAt method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(730, 'TBP_TRISTATE_BOOLEAN_PATTERN', 'TBP_TRISTATE_BOOLEAN_PATTERN', 'fb-contrib', '<p>This method declares that it returns a Boolean value. However the code\ncan return a null value. As this is now three values that can be returned;\nBoolean.TRUE, Boolean.FALSE, null; you have changed what a Boolean means.\nIt would be clearer to just create a new Enum that has the three values\nyou want, and define that the method returns that type.</p>', 0, NULL, 'Style - Method returns null for Boolean type', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(731, 'TR_TAIL_RECURSION', 'TR_TAIL_RECURSION', 'fb-contrib', '<p>This method recursively calls itself as the last statement of the method\n(Tail Recursion). This method can be easily refactored into a simple loop, which\nwill make it more performant, and reduce the stack size requirements.</p>', 0, NULL, 'Performance - Method employs tail recursion', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(732, 'UNNC_UNNECESSARY_NEW_NULL_CHECK', 'UNNC_UNNECESSARY_NEW_NULL_CHECK', 'fb-contrib', '<p>This method allocations an object with new, and then checks that the object is null\nor non null. As the new operator is guaranteed to either succeed or throw an exception,\nthis null check is unnecessary and can be removed.', 0, NULL, 'Correctness - Method checks the result of a new allocation', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(733, 'SPP_USE_ISEMPTY', 'SPP_USE_ISEMPTY', 'fb-contrib', '<p>This method calls the size() method on a collection and compares the result to zero to see if the collection\nis empty. For better code clarity, it is better to just use col.isEmpty() or !col.isEmpty()</p>', 0, NULL, 'Style - Method checks the size of a collection against zero rather than using isEmpty()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(734, 'SG_SLUGGISH_GUI', 'SG_SLUGGISH_GUI', 'fb-contrib', '<p>This method implements an awt or swing listener and performs time \nconsuming operations. Doing these operations in the gui thread will cause the\ninterface to appear sluggish and non-responsive to the user. Consider\nusing a separate thread to do the time consuming work so that the user\nhas a better experience.</p>', 0, NULL, 'Performance - Method performs time consuming operation in gui thread', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(735, 'NCS_NEEDLESS_CUSTOM_SERIALIZATION', 'NCS_NEEDLESS_CUSTOM_SERIALIZATION', 'fb-contrib', '<p>This method implements the Serializable interface by performing the same operations that\nwould be done if this method did not exist. Since this is the case, this method is not needed.</p>', 0, NULL, 'Correctness - Method needlessly implements what is default streaming behavior', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(736, 'USBR_UNNECESSARY_STORE_BEFORE_RETURN', 'USBR_UNNECESSARY_STORE_BEFORE_RETURN', 'fb-contrib', '<p>This method stores the return result in a local variable, and then immediately\nreturns the local variable. It would be simpler just to return the value that is\nassigned to the local variable, directly.\n</p>', 0, NULL, 'Style - Method stores return result in local before immediately returning it', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(737, 'SEC_SIDE_EFFECT_CONSTRUCTOR', 'SEC_SIDE_EFFECT_CONSTRUCTOR', 'fb-contrib', '<p>This method creates an object but does not assign this object to any variable or field.\nThis implies that the class operates through side effects in the constructor, which is a\nbad pattern to use, as it adds unnecessary coupling. Consider pulling the side effect out of\nthe constructor, into a separate method, or into the calling method.', 0, NULL, 'Style - Method uses a Side Effect Constructor', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(738, 'CD_CIRCULAR_DEPENDENCY', 'CD_CIRCULAR_DEPENDENCY', 'fb-contrib', '<p>\nThis class has a circular dependency with other classes. This makes building these classes\ndifficult, as each is dependent on the other to build correctly. Consider using interfaces\nto break the hard dependency.\n</p>', 0, NULL, 'Correctness - Circular Dependencies', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(739, 'S508C_NON_TRANSLATABLE_STRING', 'S508C_NON_TRANSLATABLE_STRING', 'fb-contrib', '<p>This method creates a component and passes a string literal to the title or label\nof the component. As this string will be shown to users, it should be internationalizable\nthrough the use of a resource bundle.</p>', 0, NULL, 'Correctness - Method passes constant string to title/label of component', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(740, 'IICU_INCORRECT_INTERNAL_CLASS_USE', 'IICU_INCORRECT_INTERNAL_CLASS_USE', 'fb-contrib', '<p>This class makes use of internal api classes. As these\nclasses are not documented, nor externally released as part of the api, they are subject\nto change or removal. You should not be using these classes.</p>\nPackages that shouldn''t be used are:\n<ul>\n  <li>com.sun.xxx</li>\n  <li>org.apache.xerces.xxx</li>\n  <li>org.apache.xalan.xxx</li>\n</ul>', 0, NULL, 'Correctness - Class relies on internal api classes', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(741, 'UAA_USE_ADD_ALL', 'UAA_USE_ADD_ALL', 'fb-contrib', '<p>This method uses a simple for loop to copy the contents of a set, list, map key/value, array or other collection\nto another collection. It is simpler and more straight forward to just call the addAll method of the destination collection\npassing in the source collection. In the case that the source is an array, you can use Array.asList method to massage the array\ninto a collection</p>', 0, NULL, 'Style - Method uses simple loop to copy contents of one collection to another', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(742, 'IKNC_INCONSISTENT_HTTP_PARAM_CASING', 'IKNC_INCONSISTENT_HTTP_PARAM_CASING', 'fb-contrib', '<p>This method fetches an HttpServletRequest parameter with a parameter name that was used in other locations\nbut with a different casing. As HttpServletRequest parameters are case sensitive, this will be very confusing.', 0, NULL, 'Style - Method uses the same HttpRequest parameter name but with different casing', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(743, 'STS_SPURIOUS_THREAD_STATES', 'STS_SPURIOUS_THREAD_STATES', 'fb-contrib', '<p>This method invokes the methods wait, notify or notifyAll on a Thread instance.\nDoing so will confuse the internal thread state behaviour causing spurious thread\nwakeups/sleeps because the internal mechanism also uses the thread instance for it''s \nnotifications.\n</p>', 0, NULL, 'MT Correctness - Method calls wait, notify or notifyAll on a Thread instance', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(744, 'MDM_PROMISCUOUS_SERVERSOCKET', 'MDM_PROMISCUOUS_SERVERSOCKET', 'fb-contrib', '<p>Do not use the <code>ServerSocket</code> constructor or <code>ServerSocketFactory.createServerSocket()</code> factory methods that accepts connections on any network interface. By default, an application that listens on a socket will listen for connection attempts on any network interface, which can be a security risk. Only the long form the <code>ServerSocket</code> constructor or <code>ServerSocketFactory.createServerSocket()</code> factory methods take a specific local address to define which network interface the socket should bind.</p>', 0, NULL, 'Correctness - Method creates promiscuous ServerSocket object', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(745, 'LO_INVALID_FORMATTING_ANCHOR', 'LO_INVALID_FORMATTING_ANCHOR', 'fb-contrib', 'This method attempts to use an SLF4J logger to log a parameterized expression using formatting anchors.\nHowever, slf4j uses simple non numbered anchors such as {}, rather than anchors with digits in them as the \ncode uses. Thus no parameter replacement will occur.', 0, NULL, 'Correctness - Method attempts to log using numbered formatting anchors', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(746, 'EXS_EXCEPTION_SOFTENING_NO_CONSTRAINTS', 'EXS_EXCEPTION_SOFTENING_NO_CONSTRAINTS', 'fb-contrib', '<p>This method is not constrained by an interface or superclass, but converts a caught checked exception\nto unchecked exception and thrown. It would be more appropriate just throw the checked exception, adding\nthe exception to the throws clause of the method.', 0, NULL, 'Style - Unconstrained method converts checked exception to unchecked', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(747, 'DLC_DUBIOUS_LIST_COLLECTION', 'DLC_DUBIOUS_LIST_COLLECTION', 'fb-contrib', '<p>This class defines a field based on java.util.List, but uses it to some extent like a Set. Since\nlookup type operations are performed using a linear search for Lists, the performance for large\nLists will be poor. Consider changing this fields implementation to a set based one. If order of\niteration is important to maintain insert order, perhaps consider a LinkedHashSet.</p>', 0, NULL, 'Performance - Class defines List based fields but uses them like Sets', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(748, 'CSBTS_COMMONS_STRING_BUILDER_TOSTRING', 'CSBTS_COMMONS_STRING_BUILDER_TOSTRING', 'fb-contrib', '<p>This method returns the result of toString() on ToStringBuilder without an\nintermediate invocation of append()</p>', 0, NULL, 'Correctness - Method returns the result of invoking toString() without intermediate invocation of append() in ToStringBuilder', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(749, 'PCOA_PARTIALLY_CONSTRUCTED_OBJECT_ACCESS', 'PCOA_PARTIALLY_CONSTRUCTED_OBJECT_ACCESS', 'fb-contrib', '<p>This constructor makes a call to a non-final method. Since this method can be overriden, a subclasses\nimplementation will be executing against an object that has not been initialized at the subclass level.\nYou should mark all methods called from the constructor as final to avoid this problem.</p>', 0, NULL, 'Correctness - Constructor makes call to non-final method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(750, 'AIOB_ARRAY_INDEX_OUT_OF_BOUNDS', 'AIOB_ARRAY_INDEX_OUT_OF_BOUNDS', 'fb-contrib', '<p>This method access an array element using a literal index that is know to be outside the size of the specified\narray. This will cause an ArrayIndexOutOfBoundsException at runtime</p>', 0, NULL, 'Correctness - Method attempts to access an array element outside the array''s size', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(751, 'SNG_SUSPICIOUS_NULL_FIELD_GUARD', 'SNG_SUSPICIOUS_NULL_FIELD_GUARD', 'fb-contrib', '<p>This method tests a field to make sure it''s not null before executing a conditional block of\ncode. However in the conditional block it reassigns the field. It is likely that the guard\nshould have been a check to see if the field is null, not that the field was not null.</p>', 0, NULL, 'Correctness - Method tests a field for not null as guard and reassigns it', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(752, 'SWCO_SUSPICIOUS_WAIT_ON_CONCURRENT_OBJECT', 'SWCO_SUSPICIOUS_WAIT_ON_CONCURRENT_OBJECT', 'fb-contrib', '<p>This method calls wait() on a on mutex defined in the java.util.concurrent package.\nThese classes, define await, instead of wait, and it is most likely that await\nwas intended.</p>', 0, NULL, 'Correctness - Method calls wait when await was probably intended', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(753, 'PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS', 'PRMC_POSSIBLY_REDUNDANT_METHOD_CALLS', 'fb-contrib', '<p>This method makes two consecutive calls to the same method using the same constant\nparameters, on the same instance without any intervening changes to the objects. If this\nmethod does not make changes to the object, which it appears it doesn''t, then making\ntwo calls is just a waste. These method calls could be combined by assigning the\nresult into a temporary, and using the temporary the second time.', 0, NULL, 'Performance - Method appears to call the same method on the same object redundantly', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(754, 'MDM_STRING_BYTES_ENCODING', 'MDM_STRING_BYTES_ENCODING', 'fb-contrib', '<p>The behavior of the <code>String(byte[] bytes)</code> and <code>String.getBytes()</code> is undefined if the string cannot be encoded in the platform''s default charset. Instead, use the <code>String(byte[] bytes, String encoding)</code> or <code>String.getBytes(String encoding)></code> constructor which accepts the string''s encoding as an argument. Be sure to specify the encoding used for the user''s locale.</p>', 0, NULL, 'Correctness - Method encodes String bytes without specifying the character encoding', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(755, 'USS_USE_STRING_SPLIT', 'USS_USE_STRING_SPLIT', 'fb-contrib', '<p>This method uses a StringTokenizer to split up a String and then walks thru the\nseparated elements and builds an array from these enumerated values. It is simpler \nand easier to use the String.split method.</p>\n<p>PLEASE NOTE: String.split will return an array of 1 element when passed the \nempty string, as opposed to using StringTokenizer which returns false on the first\nhasMoreElements/hasMoreTokens call. So you may need to use</p>\n<pre>\n  if (s.length() > 0)\n    return s.split(";");\n  return new String[0];\n</pre>', 0, NULL, 'Style - Method builds String array using String Tokenizing', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(756, 'S508C_NULL_LAYOUT', 'S508C_NULL_LAYOUT', 'fb-contrib', '<p>This class passes null to setLayout, which specifies that components are\nto be laid out using absolute coordinates. This makes making changes for\nfont sizes, etc, difficult as items will not reposition\n</p>', 0, NULL, 'Correctness - Gui uses absolute layout', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(757, 'JAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_EQUALS', 'JAO_JUNIT_ASSERTION_ODDITIES_USE_ASSERT_EQUALS', 'fb-contrib', '<p>This method evaluates a boolean expression and passes that to Assert.assertTrue. It is better \nto pass the two values that are being equated to the Assert.assertEquals method so that the\njunit failure method is more meaningful of the intended test.</p>', 0, NULL, 'Correctness - Method passes boolean expression to Assert.assertTrue', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(758, 'SPP_NON_ARRAY_PARM', 'SPP_NON_ARRAY_PARM', 'fb-contrib', 'This method expects an array to be passed as one of its parameters, but unfortunately defines\nthe parameter as Object. This invocation of this method does not pass an array and will throw\nan exception when run.', 0, NULL, 'Correctness - Method passes a non array object to a parameter that expects an array', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(759, 'IPU_IMPROPER_PROPERTIES_USE_SETPROPERTY', 'IPU_IMPROPER_PROPERTIES_USE_SETPROPERTY', 'fb-contrib', '<p>This method uses the inherited method from Hashtable put(String key, Object value) in\na Properties object. Since the Properties object was intended to be only a String to String\nmap, use of the derived put method is discouraged. Use the Properties.setProperty method instead.', 0, NULL, 'Correctness - Method uses Properties.put instead of Properties.setProperty', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(760, 'DRE_DECLARED_RUNTIME_EXCEPTION', 'DRE_DECLARED_RUNTIME_EXCEPTION', 'fb-contrib', '<p>This method declares a RuntimeException derived class in it''s throws clause.\nThis may indicate a misunderstanding as to how unchecked exceptions are handled.\nIf is felt that a RuntimeException is so prevalent that it should be declared, it \nis probably a better idea to prevent the occurance in code.</p>', 0, NULL, 'Style - Method declares RuntimeException in throws clause', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(761, 'BRPI_BACKPORT_REUSE_PUBLIC_IDENTIFIERS', 'BRPI_BACKPORT_REUSE_PUBLIC_IDENTIFIERS', 'fb-contrib', '<p>This class uses Backport Utils concurrent classes. Updated/Efficient version of these\nclasses are available in versions of the JDK 5.0 and higher, and these\nclasses should only be used if you are targeting JDK 1.4 and lower.\n</p>', 0, NULL, 'Performance - Method uses backport concurrency utils', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(762, 'SPP_USE_CONTAINSKEY', 'SPP_USE_CONTAINSKEY', 'fb-contrib', '<p>This method calls mySet.keySet().contains("foo") when mySet.containsKey("foo") is simpler</p>', 0, NULL, 'Style - Method calls keySet() just to call contains, use containsKey instead', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(763, 'ROOM_REFLECTION_ON_OBJECT_METHODS', 'ROOM_REFLECTION_ON_OBJECT_METHODS', 'fb-contrib', '<p>This method uses reflection to call a method that is defined in java.lang.Object.\nAs these methods are always available, it is not necessary to call these methods with\nreflection.', 0, NULL, 'Correctness - Method uses reflection to call a method available on java.lang.Object', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(764, 'URV_INHERITED_METHOD_WITH_RELATED_TYPES', 'URV_INHERITED_METHOD_WITH_RELATED_TYPES', 'fb-contrib', '<p>This inherited method is defined to return a java.lang.Object. However, the return types returned\nfrom this method can be defined by a more specific class or interface. If possible consider changing the\nreturn type in the inheritance hierarchy of this method, otherwise the caller of this method will be brittle\nin handling of the return type.</p>', 0, NULL, 'Style - Inherited method returns more specific type of object than declared', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(765, 'S508C_SET_COMP_COLOR', 'S508C_SET_COMP_COLOR', 'fb-contrib', '<p>This method sets a Components explicitly foreground or background color which may\ncause difficulty with people with vision problems from using this application.\nColors should be allowed to be set from the operating system.</p>', 0, NULL, 'Correctness - Method explicitly sets the color of a Component', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(766, 'BAS_BLOATED_ASSIGNMENT_SCOPE', 'BAS_BLOATED_ASSIGNMENT_SCOPE', 'fb-contrib', '<p><em>THIS DETECTOR IS HIGHLY EXPERIMENTAL AND IS LIKELY TO CREATE A LOT OF FUD</em>\nThis method assigns a value to a variable in an outer scope compared to where the variable is actually used. \nAssuming this evaluation does not have side effects, the assignment can be moved into the inner scope (if block)\nso that its execution time isn''t taken up if the if guard is false. Care should be\ntaken however that the right hand side of the assignment does not contain side \neffects that are required to happen, or that changes are not made further down that\nwill effect the execution of the assignment when done later on.</p>', 0, NULL, 'Performance - Method assigns a variable in a larger scope then is needed', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(767, 'FCBL_FIELD_COULD_BE_LOCAL', 'FCBL_FIELD_COULD_BE_LOCAL', 'fb-contrib', '<p>This class defines fields that are used in a locals only fashion, \nspecifically private fields or protected fields in final classes that are accessed \nfirst in each method with a store vs. a load. This field could be replaced by one\nor more local variables.</p>', 0, NULL, 'Correctness - Class defines fields that are used only as locals', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(768, 'NOS_NON_OWNED_SYNCHRONIZATION', 'NOS_NON_OWNED_SYNCHRONIZATION', 'fb-contrib', '<p>This method uses a synchronize block where the object that is being synchronized on,\nis not owned by this current instance. This means that other instances may use this same\nobject for synchronization for its own purposes causing synchronization confusion. It is \nalways cleaner and safer to only synchronize on private fields of this class. Note that ''this''\nis not owned by the current instance, but is owned by whomever assigns it to a field of its \nclass. Synchronizing on ''this'' is also not a good idea.</p>', 0, NULL, 'Style - Class uses non owned variables to synchronize on', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(769, 'LGO_LINGERING_GRAPHICS_OBJECT', 'LGO_LINGERING_GRAPHICS_OBJECT', 'fb-contrib', '<p>This method allocates a java.awt.Graphics object but doesn''t dispose of it when done. While\nthe garbage collecter will clean this up, given that a large number of Graphics objects can be\ncreated in a short period of time, it is recommended that you explicitly dispose() of them.\n  </p>', 0, NULL, 'Performance - Method allocations a java.awt.Graphics object without disposing it', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(770, 'SUA_SUSPICIOUS_UNINITIALIZED_ARRAY', 'SUA_SUSPICIOUS_UNINITIALIZED_ARRAY', 'fb-contrib', '<p>This method returns an array that was allocated but apparently not initialized. It is\npossible that the caller of this method will do the work of initializing this array, but\nthat is not a common pattern, and it is assumed that this array has just been forgotten to \nbe initialized.</p>', 0, NULL, 'Correctness - Method returns an array that appears not to be initialized', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(771, 'NMCS_NEEDLESS_MEMBER_COLLECTION_SYNCHRONIZATION', 'NMCS_NEEDLESS_MEMBER_COLLECTION_SYNCHRONIZATION', 'fb-contrib', '<p>This class defines a private collection member as synchronized. It appears however\nthat this collection isn''t only modified in a static initializer, or constructor. As these\ntwo areas are guaranteed to be thread safe, defining this collection as synchronized is\nunnecessary and a potential performance bottleneck.</p>', 0, NULL, 'Performance - Class defines unneeded synchronization on member collection', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(772, 'LO_LOGGER_LOST_EXCEPTION_STACK_TRACE', 'LO_LOGGER_LOST_EXCEPTION_STACK_TRACE', 'fb-contrib', '<p>This method passes an exception as the first argument to a logger method. The stack\ntrace is potentially lost due to the logger emitting the exception using toString(). It\nis better to construct a log message with sufficient context and pass the exception as\nthe second argument to capture the stack trace.</p>', 0, NULL, 'Correctness - Method incorrectly passes exception as first argument to logger method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(773, 'SPP_USE_ISNAN', 'SPP_USE_ISNAN', 'fb-contrib', '<p>This method compares a douhle or float to the constant Double.NaN or Float.NaN. You should use\nDouble.isNaN(d) or Float.isNaN(f) if a primitive; or d.isNaN() or f.isNaN() if a boxed double, instead.</p>', 0, NULL, 'Correctness - Method compares a double to Double.NAN', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(774, 'DSOC_DUBIOUS_SET_OF_COLLECTIONS', 'DSOC_DUBIOUS_SET_OF_COLLECTIONS', 'fb-contrib', '<p>This method creates a set that contains other collections, or a Map whose keySet is\nanother collection. As collections tend to calculate hashCode, equals and compareTo by \niterating the contents of the collection, this can perform poorly.</p>\n<p>In addition, when a set is used, you typically are using it to do ''contains'', or ''find''\ntype functionality, which seems dubious when done on a collection</p>\n<p>Finally, as a collection is often modified, problems will occur if the collection is \ncontained in a set, because the hashCode, equals or compareTo values will change while the\ncollection is in the set</p>\n<p>If you wish to maintain a collection of collections, it is probably better to use a List\nas the outer collection</p>', 0, NULL, 'Performance - Method uses a set of collections', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(775, 'NAB_NEEDLESS_BOXING_PARSE', 'NAB_NEEDLESS_BOXING_PARSE', 'fb-contrib', '<p>This method passes a String to a wrapped primitive object''s valueOf method, which in turn calls\nthe boxedValue() method to convert to a primitive. When it is desired to convert from a String\nto a primitive value, it is simpler to use the BoxedPrimitive.parseBoxedPrimitive(myString)\nmethod. </p>', 0, NULL, 'Performance - Method converts String to primitive using excessive boxing', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(776, 'JAO_JUNIT_ASSERTION_ODDITIES_ASSERT_USED', 'JAO_JUNIT_ASSERTION_ODDITIES_ASSERT_USED', 'fb-contrib', '<p>This method uses a java assert to assure that a certain state is in effect. As this is\na junit test it makes more sense to either check this condition with a junit assert, or allow\na following exception to occur.</p>', 0, NULL, 'Correctness - Method uses java asserts rather than a junit assertion', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(777, 'NAB_NEEDLESS_BOXING_VALUEOF', 'NAB_NEEDLESS_BOXING_VALUEOF', 'fb-contrib', '<p>This method passes a String to a wrapped primitive object''s parse method, which in turn calls\nthe valueOf() method to convert to a boxed primitive. When it is desired to convert from a String\nto a boxed primitive object, it is simpler to use the BoxedPrimitive.valueOf(myString)\nmethod. </p>', 0, NULL, 'Performance - Method converts String to boxed primitive using excessive boxing', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(778, 'UCPM_USE_CHARACTER_PARAMETERIZED_METHOD', 'UCPM_USE_CHARACTER_PARAMETERIZED_METHOD', 'fb-contrib', '<p>This method passes a constant literal String of length 1 as a parameter to a method, that\nexposes a similar method that takes a character. It is simpler and more expedient to handle one\ncharacter, rather than pass a string.</p>', 0, NULL, 'Performance - Method passes constant String of length 1 to character overridden method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(779, 'MDM_SIGNAL_NOT_SIGNALALL', 'MDM_SIGNAL_NOT_SIGNALALL', 'fb-contrib', '<p><code>Condition.signalAll()</code> is prefered over <code>Condition.signal()</code>. Calling <code>signal()</code> only wakes up one thread, meaning that the thread woken up might not be the one waiting for the condition that the caller just satisfied.</p>', 0, NULL, 'MT Correctness - Method calls Condition.signal() rather than Condition.signalAll()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(780, 'SCA_SUSPICIOUS_CLONE_ALGORITHM', 'SCA_SUSPICIOUS_CLONE_ALGORITHM', 'fb-contrib', '<p>The clone method stores a value to a member field of the source object. Normally, all \nchanges are made to the cloned object, and given that cloning is almost always considered\na read-only operation, this seems incorrect.</p>', 0, NULL, 'Correctness - Clone method stores a new value to member field of source object', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(781, 'SPP_USELESS_CASING', 'SPP_USELESS_CASING', 'fb-contrib', 'This method compares two strings with compareToIgnoreCase or equalsIgnoreCase, after having\ncalled toUpperCase or toLowerCase on the string in question. As you are comparing with out\nconcern to case, the toUpperCase or toLowerCase calls are pointless and can be removed.', 0, NULL, 'Performance - Method compares string without case after enforcing a case', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(782, 'DWI_DELETING_WHILE_ITERATING', 'DWI_DELETING_WHILE_ITERATING', 'fb-contrib', '<p>This method removes items from a collection using the remove method of the collection, while\nat the same time iterating across the collection. Doing this will invalidate the iterator, and further\nuse of it, will cause ConcurrentModificationExceptions to be thrown. To avoid this, the remove \nmethod of the iterator should be used.\n</p>', 0, NULL, 'Correctness - Method deletes collection element while iterating', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(783, 'CNC_COLLECTION_NAMING_CONFUSION', 'CNC_COLLECTION_NAMING_CONFUSION', 'fb-contrib', '<p>This class defines a field or local collection variable with a name that contains a different type\nof collection in its name. An example woutd be a Set<User> called userList. This is confusing to the reader,\nand likely caused by a previous refactor of type, without changing the name.</p>', 0, NULL, 'Style - Collection Naming Confusion', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(784, 'CBX_CUSTOM_BUILT_XML', 'CBX_CUSTOM_BUILT_XML', 'fb-contrib', '<p>This method generates an xml based string by concatenating together various \nxml fragments, and variable values. Doing so makes the code difficult to read, modify \nand validate. It is much more clean to built xml structures in external files that are\nread in and transformed into the final product, thru modification by Transformer.setParameter.\n</p>', 0, NULL, 'Style - Method builds xml strings through adhoc concatenation', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(785, 'LII_LIST_INDEXED_ITERATING', 'LII_LIST_INDEXED_ITERATING', 'fb-contrib', '<p>This method uses an integer based for loop to iterator over a java.util.List, by calling\nList.get(i) each time thru the loop. The integer is not used for other reasons. It is better\nto use an Iterator instead, as depending on List implementation, iterators can perform better, \nand they also allow for exchanging of other collection types without issue.</p>', 0, NULL, 'Style - Method uses integer based for loops to iterate over a List', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(786, 'BSB_BLOATED_SYNCHRONIZED_BLOCK', 'BSB_BLOATED_SYNCHRONIZED_BLOCK', 'fb-contrib', '<p>This methods implements a synchronized block, but the code found at the beginning\nof this block  only accesses local variables, and not member variables, or this. \nTo be better performance move the code that access local variables only, above the\nsynchronized block, and leave the synchronized block only for field accesses, or access\nto this object.</p>', 0, NULL, 'Performance - Method overly synchronizes a block of code', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(787, 'NAB_NEEDLESS_BOXING_STRING_CTOR', 'NAB_NEEDLESS_BOXING_STRING_CTOR', 'fb-contrib', '<p>This method passes a primitive value retrieved from a BoxedPrimitive.parseBoxedPrimitive("1") call  to \nthe same class''s constructor. It is simpler to just pass the string to the BoxedPrimitives constructor.\n</p>', 0, NULL, 'Performance - Method passes parsed string to primitive wrapper constructor', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(788, 'ICA_INVALID_CONSTANT_ARGUMENT', 'ICA_INVALID_CONSTANT_ARGUMENT', 'fb-contrib', '<p>This method passes an invalid constant value to a method parameter that expects only a select number of possible values.\nThis is likely going to cause this method to fail to operate correctly.</p>', 0, NULL, 'Correctness - Invalid Constant Argument', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(789, 'JAO_JUNIT_ASSERTION_ODDITIES_IMPOSSIBLE_NULL', 'JAO_JUNIT_ASSERTION_ODDITIES_IMPOSSIBLE_NULL', 'fb-contrib', '<p>This method asserts that a primitive value that was autoboxed into a boxed primitive was not \nnull. This will never happen, as primitives are never null, and thus the autoboxed value isn''t \neither.</p>', 0, NULL, 'Correctness - Method asserts that an auto-boxed value is not null', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(790, 'HES_LOCAL_EXECUTOR_SERVICE', 'HES_LOCAL_EXECUTOR_SERVICE', 'fb-contrib', '<p><code>ExecutorService</code>s are typically instantiated as fields so that many tasks can be executed on a controlled number of <code>Thread</code>s across many method calls.  Therefore, it is unusual for <code>ExecutorService</code>s to be a local variable, where tasks will be added only one time, in the enclosing method. </p>\n\n<p>Furthermore, when a local <code>ExecutorService</code> reaches the end of scope and goes up for garbage collection, the internal <code>Thread</code>s are not necessarily terminated and can prevent the JVM from ever shutting down.</p>\n\n<p>Consider making this local variable a field and create a method that will explicitly shutdown the <code>ExecutorService</code></p>', 0, NULL, 'Correctness - Hanging ExecutorService', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(791, 'AOM_ABSTRACT_OVERRIDDEN_METHOD', 'AOM_ABSTRACT_OVERRIDDEN_METHOD', 'fb-contrib', '<p>This abstract method is derived from a concrete method implementation. It is highly\nsuspect that the super class method''s implementation would be cast away. \n</p>', 0, NULL, 'Correctness - Abstract method overrides a concrete implementation', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(792, 'UEC_USE_ENUM_COLLECTIONS', 'UEC_USE_ENUM_COLLECTIONS', 'fb-contrib', '<p>This class uses an ordinary set or map collection and uses an enum class as the key type.\nIt is better performant to use the jdk 1.5 EnumSet or EnumMap classes.</p>', 0, NULL, 'Performance - Class uses an ordinary set or map with an enum class as the key', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(793, 'SPP_USE_GET0', 'SPP_USE_GET0', 'fb-contrib', 'This Method calls myList.iterator().next() on a List to get the first item. It is more performant \nto just use myList.get(0).', 0, NULL, 'Performance - Method uses iterator().next() on a List to get the first item', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(794, 'CFS_CONFUSING_FUNCTION_SEMANTICS', 'CFS_CONFUSING_FUNCTION_SEMANTICS', 'fb-contrib', '<p>This method appears to modify a parameter, and then return this parameter as the \nmethods return value. This will be confusing to callers of this method, as it won''t be\napparent that the ''original'' passed in parameter will be changed as well. If the purpose\nof this method is to change the parameter, it would be more clear to change the method to \na have a void return value. If a return type is required due to interface or superclass contract,\nperhaps a clone of the parameter should be made.</p>', 0, NULL, 'Style - Method returns modified parameter', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(795, 'BED_BOGUS_EXCEPTION_DECLARATION', 'BED_BOGUS_EXCEPTION_DECLARATION', 'fb-contrib', '<p>This method declares that it throws a checked exception that it does not throw. As this method is\neither a constructor, static method or private method, there is no reason for this method to declare\nthe exception in its throws clause, and just causes calling methods to unnecessarily handle an exception\nthat will never be thrown. The exception in question should be removed from the throws clause.</p>', 0, NULL, 'Correctness - Non derivable method declares throwing an exception that isn''t thrown', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(796, 'NAB_NEEDLESS_BOOLEAN_CONSTANT_CONVERSION', 'NAB_NEEDLESS_BOOLEAN_CONSTANT_CONVERSION', 'fb-contrib', '<p>This method assigns a Boxed boolean constant to a primitive boolean variable, or assigns a primitive boolean\nconstant to a Boxed boolean variable. Use the correct constant for the variable desired. Use</p>\n<pre>\n  boolean b = true;\n  boolean b = false;\n\n  or\n\n  Boolean b = Boolean.TRUE;\n  Boolean b = Boolean.FALSE;\n</pre>', 0, NULL, 'Performance - Method needlessly boxes a boolean constant', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(797, 'SPP_USE_BIGDECIMAL_STRING_CTOR', 'SPP_USE_BIGDECIMAL_STRING_CTOR', 'fb-contrib', '<p>This method calls the BigDecimal constructor that takes a double, and passes a literal double constant value. Since \nthe use of BigDecimal is to get better precision than double, by passing a double, you only get the precision of double number\nspace. To take advantage of the BigDecimal space, pass the number as a string. </p>', 0, NULL, 'Correctness - Method passes double value to BigDecimal Constructor', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(798, 'SPP_EQUALS_ON_ENUM', 'SPP_EQUALS_ON_ENUM', 'fb-contrib', '<p>This method calls the equals(Object) method on an enum instance. Since enums values are singletons,\nyou can use == to safely compare two enum values. In fact, the implementation for Enum.equals does just\nthat.</p>', 0, NULL, 'Correctness - Method calls equals on an enum instance', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(799, 'OCP_OVERLY_CONCRETE_PARAMETER', 'OCP_OVERLY_CONCRETE_PARAMETER', 'fb-contrib', '<p>This method uses concrete classes for parameters when only methods defined in an implemented\ninterface or super class are used. Consider increasing the abstraction of the interface to\nmake low impact changes easier to accomplish in the future.</p>', 0, NULL, 'Style - Method needlessly defines parameter with concrete classes', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(800, 'SPP_INTERN_ON_CONSTANT', 'SPP_INTERN_ON_CONSTANT', 'fb-contrib', '<p>This method calls intern on a constant string. As constant strings are already interned, this call\nis superfluous</p>', 0, NULL, 'Correctness - Method calls intern on a string constant', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(801, 'PIS_POSSIBLE_INCOMPLETE_SERIALIZATION', 'PIS_POSSIBLE_INCOMPLETE_SERIALIZATION', 'fb-contrib', '<p>This method implements Serializable but is derived from a\nclass that does not. The super class has fields that are not serialized\nbecause this class does not take the responsibility of writing these fields out\neither using Serializable''s writeObject method, or Externalizable''s writeExternal\nmethod. Therefore when this class is read from a stream, the superclass fields\nwill only be initialized to the values specified in it''s default constructor.\nIf possible, change the superclass to implement Serializable, or implement\nSerializable or Externalizable methods in the child class.</p>', 0, NULL, 'Correctness - Class doesn''t serialize superclass fields', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(802, 'PCAIL_POSSIBLE_CONSTANT_ALLOCATION_IN_LOOP', 'PCAIL_POSSIBLE_CONSTANT_ALLOCATION_IN_LOOP', 'fb-contrib', '<p>This method allocates an object using the default constructor in a loop, and then\nonly uses it in a quasi-static way. It is never assigned to anything that lives outside\nthe loop, and could potentially be allocated once outside the loop. Often this can be\nachieved by calling a clear() like method in the loop, to reset the state of the object\nin the loop.', 0, NULL, 'Performance - Method allocates an object that is used in a constant way in a loop', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(803, 'PME_POOR_MANS_ENUM', 'PME_POOR_MANS_ENUM', 'fb-contrib', '<p>This field, although defined as a simple variable (int, String, etc) only has a set of constant values\nassigned to it. Thus it appears to be used like an enum value, and should probably be defined as such.\n</p>', 0, NULL, 'Style - Poor Mans Enum', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(804, 'COM_COPIED_OVERRIDDEN_METHOD', 'COM_COPIED_OVERRIDDEN_METHOD', 'fb-contrib', '<p>This method is implemented using an exact copy of it''s super class method''s \nimplementation, which usually means that this method can just be removed.\n</p>', 0, NULL, 'Style - Method is implemented with an exact copy of it''s superclass''s method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(805, 'ISB_INEFFICIENT_STRING_BUFFERING', 'ISB_INEFFICIENT_STRING_BUFFERING', 'fb-contrib', '<p>This method uses StringBuffer or StringBuilder''s append method to concatenate strings. However, it passes the result\nof doing a simple String concatenation to one of these append calls, thus removing any performance gains\nof using the StringBuffer or StringBuilder class.</p>', 0, NULL, 'Performance - Method passes simple concatenating string in StringBuffer or StringBuilder append', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(806, 'MRC_METHOD_RETURNS_CONSTANT', 'MRC_METHOD_RETURNS_CONSTANT', 'fb-contrib', '<p>This private or static method only returns one constant value. As this method is private or static,\nit''s behavior can''t be overridden, and thus the return of a constant value seems dubious.\nEither the method should be changed to return no value, or perhaps another return value\nwas expected to be returned in another code path in this method.</p>', 0, NULL, 'Style - Private method only returns one constant value', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(807, 'MDM_RUNTIME_EXIT_OR_HALT', 'MDM_RUNTIME_EXIT_OR_HALT', 'fb-contrib', '<p>Calling <code>Runtime.exit()</code> or <code>Runtime.halt()</code> shuts down the entire Java virtual machine. This should only been done when it is appropriate. Such calls make it hard or impossible for your code to be invoked by other code. Consider throwing a RuntimeException instead.</p>', 0, NULL, 'Correctness - Method calls Runtime.exit() or Runtime.halt()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(808, 'PMB_POSSIBLE_MEMORY_BLOAT', 'PMB_POSSIBLE_MEMORY_BLOAT', 'fb-contrib', '<p>This class defines static fields that are collections or StringBuffers that do not\nappear to have any way to clear or reduce their size. This is a potential cause of \nmemory bloat.</p>', 0, NULL, 'Correctness - Class defines static field that appears to allow memory bloat', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(809, 'S508C_NO_SETSIZE', 'S508C_NO_SETSIZE', 'fb-contrib', '<p>This class creates a window, and sizes the window using setSize. It is better\nto handle font size changes to use the pack method.\n</p>', 0, NULL, 'Correctness - Window sets size manually, and doesn''t use pack', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(810, 'JAO_JUNIT_ASSERTION_ODDITIES_BOOLEAN_ASSERT', 'JAO_JUNIT_ASSERTION_ODDITIES_BOOLEAN_ASSERT', 'fb-contrib', '<p>This method asserts that a value is equal to true or false. It is simpler to just \nuse assertTrue, or assertFalse, instead.</p>', 0, NULL, 'Style - Method asserts that a value is true or false', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(811, 'NAB_NEEDLESS_BOX_TO_CAST', 'NAB_NEEDLESS_BOX_TO_CAST', 'fb-contrib', '<p>This method constructs a Boxed Primitive from a primitive only to call the primitiveValue() method to\ncast the value to another primitive typee. It is simpler to just use casting</p>\n<pre>\n  primitive i = new BoxedPrimitive(1.0).primitiveValue();\n    or\n  primitive i = BoxedPrimitive.valueOf(1.0).primitiveValue();\n\n    should just use \n  primitive i = (primitive)1.0;\n</pre>', 0, NULL, 'Performance - Method creates Boxed primitive from primitive only to cast to another primitive type', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(812, 'ISB_EMPTY_STRING_APPENDING', 'ISB_EMPTY_STRING_APPENDING', 'fb-contrib', '<p>This method concatenates an empty string with a literal value, in order to convert\nthe literal value into a string. It is more efficient to use String.valueOf() to do the same\nthing as you do not incur the cost of creating a StringBuffer/Builder and calling methods on it\nto accomplish this.</p>', 0, NULL, 'Performance - Method concatenates an empty string to effect type conversion', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(813, 'SPP_USE_STRINGBUILDER_LENGTH', 'SPP_USE_STRINGBUILDER_LENGTH', 'fb-contrib', '<p>This method calls the toString method on a StringBuffer or StringBuilder only to call length() on the resulting\nstring. It is faster, and less memory intensive to just call the length method directly on the StringBuffer or StringBuilder\nitself.</p>', 0, NULL, 'Performance - Method converts StringBuffer or Builder to String just to get it''s length', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(814, 'OC_OVERZEALOUS_CASTING', 'OC_OVERZEALOUS_CASTING', 'fb-contrib', '<p>This method casts the right hand side of an expression to a class that is more specific than the \nvariable on the left hand side of the assignment. The cast only has to be as specific as what the variable\nthat is on the left. Using a more specific type on the right hand side just increases cohesion.', 0, NULL, 'Correctness - Method manually casts the right hand side of an assignment more specifically than needed', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(815, 'CEBE_COMMONS_EQUALS_BUILDER_ISEQUALS', 'CEBE_COMMONS_EQUALS_BUILDER_ISEQUALS', 'fb-contrib', '<p>This method returns the result of equals on the EqualsBuilder type\ninstead of calling the method isEqual().</p>', 0, NULL, 'Correctness - Method returns the result of invoking equals() on EqualsBuilder', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(816, 'SPP_EMPTY_CASING', 'SPP_EMPTY_CASING', 'fb-contrib', 'This method passes the empty string "" to equalsIgnoreCase or compareToIgnoreCase, as the empty string\nis not case sensitive using equals is simpler. It would be even simpler to do a length() == 0 test.', 0, NULL, 'Style - Method passes an empty string to equalsIgnoreCase or compareToIgnoreCase', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(817, 'LO_SUSPECT_LOG_CLASS', 'LO_SUSPECT_LOG_CLASS', 'fb-contrib', '<p>This method creates a Logger by passing in a specification for a class that is unrelated\nto the class in which the logger is going to be used. This is likely caused by copy/paste code.', 0, NULL, 'Correctness - Method specifies an unrelated class when allocating a Logger', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(818, 'IKNC_INCONSISTENT_HTTP_ATTRIBUTE_CASING', 'IKNC_INCONSISTENT_HTTP_ATTRIBUTE_CASING', 'fb-contrib', '<p>This method sets or gets an HttpSession attribute with a parmeter name that was used in other locations\nbut with a different casing. As HttpSession attribute are case sensitive, this will be very confusing.', 0, NULL, 'Style - Method uses the same HttpSession attribute name but with different casing', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(819, 'MDM_BIGDECIMAL_EQUALS', 'MDM_BIGDECIMAL_EQUALS', 'fb-contrib', '<p><code>equals()</code> being called to compare two <code>java.math.BigDecimal</code> numbers. This is normally a mistake, as two <code>BigDecimal</code> objects are only equal if they are equal in both value and scale, so that <i>2.0</i> is not equal to <i>2.00</i>. To compare <code>BigDecimal</code> objects for mathematical equality, use <code>compareTo()</code> instead.</p>', 0, NULL, 'Correctness - Method calls BigDecimal.equals()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(820, 'CVAA_CONTRAVARIANT_ELEMENT_ASSIGNMENT', 'CVAA_CONTRAVARIANT_ELEMENT_ASSIGNMENT', 'fb-contrib', '<p>This method contains a contravariant array element assignment. Since arrays are mutable \ndata structures, their use must be restricted to covariant or invariant usage</p>\n\n<pre>\nclass A {}\nclass B extends A {}\n\n B[] b = new B[2];\n A[] a = b;\n a[0] = new A(); // results in ArrayStoreException (Runtime)\n</pre>', 0, NULL, 'Correctness - Method performs a contravariant array element assignment', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(821, 'SPP_NULL_BEFORE_INSTANCEOF', 'SPP_NULL_BEFORE_INSTANCEOF', 'fb-contrib', 'This method checks a reference for null just before seeing if the reference is an instanceof some class.\nSince instanceof will return false for null references, the null check is not needed.', 0, NULL, 'Correctness - Method checks a reference for null before calling instanceof', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(822, 'JAO_JUNIT_ASSERTION_ODDITIES_INEXACT_DOUBLE', 'JAO_JUNIT_ASSERTION_ODDITIES_INEXACT_DOUBLE', 'fb-contrib', '<p>This method calls assert with two doubles or Doubles. Due to the inprecision of doubles, you\nshould be using the assert method that takes a range parameter that gives a range of error.</p>', 0, NULL, 'Style - Method asserts that two doubles are exactly equal', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(823, 'CTU_CONFLICTING_TIME_UNITS', 'CTU_CONFLICTING_TIME_UNITS', 'fb-contrib', '<p>This method takes two values that appear to be representing time, and performs arithmetic operations on this\ntwo values directly, even though it appears that the two values are representing different time units, such as\nadding a millisecond value to a nanosecond value. You should convert the two values to the same time unit before\nperforming this calculation in order for it to be meaningful.', 0, NULL, 'Correctness - Conflicting Time Units', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(824, 'MDM_THREAD_PRIORITIES', 'MDM_THREAD_PRIORITIES', 'fb-contrib', '<p>Getting or setting thread priorities is not portable and could cause or mask race conditions.</p>', 0, NULL, 'MT Correctness - Method uses suspicious thread priorities', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(825, 'NAB_NEEDLESS_AUTOBOXING_CTOR', 'NAB_NEEDLESS_AUTOBOXING_CTOR', 'fb-contrib', '<p>This method passes a wrapped primitive object to the same class''s constructor.\nSince wrapper classes are immutable, you can just use the original object, rather\nthan constructing a new one. This code works because of an abuse of autoboxing.\n</p>', 0, NULL, 'Performance - Method passes primitive wrapper to same primitive wrapper constructor', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(826, 'NFF_NON_FUNCTIONAL_FIELD', 'NFF_NON_FUNCTIONAL_FIELD', 'fb-contrib', '<p>This serializable class defines a field as both transient and final. As transient fields\nare not serialized across the stream, it is required that some piece of code reinitialize that field\nwhen it is deserialized. But since constructors aren''t called when deserialization, the field is not initialized. \nAnd since the field is final, no other method can initialize it as well.</p>', 0, NULL, 'Correctness - Serializable class defines a final transient field', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(827, 'SPP_SUSPECT_STRING_TEST', 'SPP_SUSPECT_STRING_TEST', 'fb-contrib', '<p>This method tests a string, and groups null values with real strings, leaving empty strings as another\ncase. This might be perfectly valid, but normally, null strings and empty strings are logically handled the same way,\nand so this test may be flawed.</p>\n<p>Pattern found is one of the following\n<pre>if ((s == null) || (s.length() > 0))</pre> -- did you mean ((s == null) || (s.length() == 0))?\n<pre>if ((s == null) || (s.length() != 0))</pre> -- did you mean ((s == null) || (s.length() == 0))?\n<pre>if ((s != null) && (s.length() == 0))</pre> -- did you mean ((s != null) && (s.length() > 0))?\nor perhaps ((s == null) || (s.length() == 0))?\n</p>', 0, NULL, 'Correctness - Method treats null and normal strings differently than an empty strings', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(828, 'SPP_USE_GETPROPERTY', 'SPP_USE_GETPROPERTY', 'fb-contrib', '<table>\n    <tr><td>This method uses</td></tr>\n    <tr><td>String prop = System.getProperties().getProperty("foo");</td></tr\n    <tr><td>instead of simply using</td></tr>\n    <tr><td>String prop = System.getProperty("foo");</td></tr>\n  </table>', 0, NULL, 'Style - Method calls getProperties just to get one property, use getProperty instead', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(829, 'DDC_DOUBLE_DATE_COMPARISON', 'DDC_DOUBLE_DATE_COMPARISON', 'fb-contrib', '<p>This method compares dates with two comparisons, rather than using the reverse comparison.\nSo This pattern\n<pre>\n  if ((date1.equals( date2 )) || (date1.after( date2 )))\n</pre>\ncould become\n<pre>\n  if (date1.compareTo( date2 ) >= 0)\n</pre>\nand\n<pre>\n  if ((date1.equals( date2 )) || (date1.before( date2 )))\n</pre>\ncould become\n<pre>\n  if (date1.compareTo( date2 ) <= 0)\n</pre>\nand\n<pre>\n  if ((date1.before( date2 )) || (date1.after( date2 )))\n</pre>\ncould become\n<pre>\n  if (!date1.equals( date2 ))\n</pre>', 0, NULL, 'Performance - Method uses two date comparisons when one would do', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(830, 'PSC_PRESIZE_COLLECTIONS', 'PSC_PRESIZE_COLLECTIONS', 'fb-contrib', '<p>This method allocates a collection using the default constructor even though it is known\napriori how many items are going to be placed in the collection (or at least a reasonable guess)\nand thus needlessly causes intermediate reallocations of the collection.\n</p>', 0, NULL, 'Performance - Method does not presize the allocation of a collection', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(831, 'LO_SUSPECT_LOG_PARAMETER', 'LO_SUSPECT_LOG_PARAMETER', 'fb-contrib', '<p>This constructor declares a parameter that is a Logger. As loggers are meant to be\ncreated statically per class, it doesn''t make sense that you would pass a Logger from one\nclass to another. Declare the Logger static in each class instead.</p>', 0, NULL, 'Correctness - Constructor declares a Logger parameter', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(832, 'JAO_JUNIT_ASSERTION_ODDITIES_ACTUAL_CONSTANT', 'JAO_JUNIT_ASSERTION_ODDITIES_ACTUAL_CONSTANT', 'fb-contrib', '<p>This method calls assert passing a constant value as the second of the two values. The assert\nmethod assumes that the expected value is the first parameter, and so it appears that the order\nof values has been swapped here.</p>', 0, NULL, 'Style - Method passes constant to second (actual) assertion parameter', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(833, 'SPP_NEGATIVE_BITSET_ITEM', 'SPP_NEGATIVE_BITSET_ITEM', 'fb-contrib', '<p>This method passes a constant negative value as a bit position to a java.util.BitSet. The BitSet class\ndoesn''t support negative values, and thus this method call will not work as expected.</p>', 0, NULL, 'Correctness - Method passes a negative number as a bit to a BitSet which isn''t supported', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(834, 'ABC_ARRAY_BASED_COLLECTIONS', 'ABC_ARRAY_BASED_COLLECTIONS', 'fb-contrib', '<p>This method passes an array as the key to a Map, element in a Set, or item in a List when\nthe contains method is used on the List. Since arrays do not, and cannot override the equals \nmethod, collection inclusion is based on the reference''s address, which is probably not desired.\nIn the case that this is a TreeMap or TreeSet, consider passing a Comparator to the map''s\nconstructor.\n</p>', 0, NULL, 'Correctness - Method uses array as basis of collection', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(835, 'STB_STACKED_TRY_BLOCKS', 'STB_STACKED_TRY_BLOCKS', 'fb-contrib', '<P>This method declares two try catch blocks one after another, where each\ncatch block catches the same type of exception. They also throw uniformly the\nsame type of exception. These two catch blocks can be combined into one to\nsimplify the method.</p>', 0, NULL, 'Style - Method stacks similar try/catch blocks', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(836, 'DWI_MODIFYING_WHILE_ITERATING', 'DWI_MODIFYING_WHILE_ITERATING', 'fb-contrib', '<p>This method modifies the contents of a collection using the collection api methods, while\nat the same time iterating across the collection. Doing this will invalidate the iterator, and further\nuse of it, will cause ConcurrentModificationExceptions to be thrown.\n</p>', 0, NULL, 'Correctness - Method modifies collection element while iterating', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(837, 'CAAL_CONFUSING_ARRAY_AS_LIST', 'CAAL_CONFUSING_ARRAY_AS_LIST', 'fb-contrib', '<p>This method passes an array of primitive values to the Array.asList call. As primitive\nvalues in arrays aren''t automatically promoted to boxed primitives in arrays, the asList call\ncannot convert this array in a list of boxed primitives. It therefore just creates an array\nwith one item in it, the array itself. This is rarely what is desired.\n</p>', 0, NULL, 'Correctness - Method calls Array.asList on an array of primitive values', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(838, 'FP_FINAL_PARAMETERS', 'FP_FINAL_PARAMETERS', 'fb-contrib', '<p>This method correctly does not write to a parameter. To help document this, and to perhaps\nhelp the jvm optimize the invocation of this method, you should consider defining these parameters\nas final.</p>', 0, NULL, 'Style - Method does not define a parameter as final, but could', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(839, 'SJVU_SUSPICIOUS_JDK_VERSION_USE', 'SJVU_SUSPICIOUS_JDK_VERSION_USE', 'fb-contrib', '<p>This method calls a method that does not exist, on a class that does not exist in the jdk that\nthis class has been compiled for. This can happen if you compile the class specifying the -source and\n-target options, and use a version that is before the version of the compiler''s JDK.</p>', 0, NULL, 'Correctness - Method uses rt.jar class or method that does not exist', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(840, 'SPP_INVALID_BOOLEAN_NULL_CHECK', 'SPP_INVALID_BOOLEAN_NULL_CHECK', 'fb-contrib', '<p>This method attempts to check for null by just refering to the variable name\nas would be done in C++. This ordinarily would be considered a compile error, except the\nvariable in question is a Boolean, which does an auto unbox to boolean.</p>\n<pre>\nif (b && b.booleanValue())\nshould be\nif ((b != null) && b.booleanValue())\n</pre>', 0, NULL, 'Correctness - Method uses invalid C++ style null check on Boolean', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(841, 'SPP_STUTTERED_ASSIGNMENT', 'SPP_STUTTERED_ASSIGNMENT', 'fb-contrib', '<p>This method assigns a value twice in a row in a stuttered way such as\n<code>a = a = 5;</code> This is most probably a cut and paste error where the duplicate\nassignment can be removed.</p>', 0, NULL, 'Correctness - Method assigns a value to a local twice in a row', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(842, 'SCR_SLOPPY_CLASS_REFLECTION', 'SCR_SLOPPY_CLASS_REFLECTION', 'fb-contrib', '<p>This method accesses the class object of a class that is already statically bound\nin this context, with Class.forName. Using Class.forName makes reflection more fragile\nin regards to code transformations such as obfuscation, and is unneeded here, since \nthe class in question is already ''linked'' to this class.</p>', 0, NULL, 'Style - Method accesses statically bound class with Class.forName', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(843, 'CHTH_COMMONS_HASHCODE_BUILDER_TOHASHCODE', 'CHTH_COMMONS_HASHCODE_BUILDER_TOHASHCODE', 'fb-contrib', '<p>This method returns the result of hashCode on the HashCodeBuilder type\ninstead of calling the method toHashCode().</p>', 0, NULL, 'Correctness - Method returns the result of invoking hashCode() on HashCodeBuilder', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(844, 'HES_EXECUTOR_OVERWRITTEN_WITHOUT_SHUTDOWN', 'HES_EXECUTOR_OVERWRITTEN_WITHOUT_SHUTDOWN', 'fb-contrib', '<p>Most <code>ExecutorService</code> objects must be explicitly shutdown, otherwise, their internal threads can prevent the JVM from ever shutting down, even when everything else has stopped.</p>\n\n<p>FindBugs has detected that something like the following is happening:<br/>\n<code>\nExecutorService executor = ... //e.g. Executors.newCachedThreadPool();<br/>\n...<br/>\npublic void reset() {<br/>\n&nbsp;&nbsp;&nbsp;this.executor = Executors.newCachedThreadPool(); <br/>\n&nbsp;&nbsp;&nbsp;this.executor.execute(new SampleExecutable()); <br/>\n}<br/>\n</code>\nFor normal objects, losing the last reference to them like this would trigger the object to be cleaned up\nin garbage collection.  For <code>ExecutorService</code>s, this isn''t enough to terminate the internal threads in the\nthread pool, and the <code>ExecutorService</code> isn''t guaranteed to shutdown, causing the JVM to never stop. <br/>\nTo fix this, simply add a call to <code>shutdown()</code> like this:<br/>\n<code>\nExecutorService executor = ... //e.g. Executors.newCachedThreadPool();<br/>\n...<br/>\npublic void reset() {<br/>\n<b>&nbsp;&nbsp;&nbsp;this.executor.shutDown();</b> <br/>\n&nbsp;&nbsp;&nbsp;this.executor = Executors.newCachedThreadPool(); <br/>\n&nbsp;&nbsp;&nbsp;this.executor.execute(new SampleExecutable()); <br/>\n}\n</code>\n</p>\n\n<p>Even though there are some exceptions to this, particularly when a custom <code>ThreadFactory</code> is\nprovided, or for <code>ThreadPoolExecutor</code>s with <code>allowsCoreThreadTimeOut()</code> set to true,\nit is good practice to explictly shutdown the <code>ExecutorService</code> at the end of execution, or\nwhen it is being replaced.</p>\n\n<p><b>Note:</b> <code>ExecutorService</code>s are generally created once in a program''s lifecycle.  If you find yourself\nreplacing the <code>ExecutorService</code>, perhaps you may consider restructuring your code to use calls like\n<code>awaitTermination()</code> or <code>Future</code>s/<code>Callable</code>s to avoid recreating the <code>ExecutorService</code>.</p>', 0, NULL, 'Correctness - Hanging ExecutorService', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(845, 'LSYC_LOCAL_SYNCHRONIZED_COLLECTION', 'LSYC_LOCAL_SYNCHRONIZED_COLLECTION', 'fb-contrib', '<p>This method creates a synchronized collection and store the reference to it\nin a local variable. As local variables are by definition threadsafe, it seems\nquestionable that this collection needs to be synchronized.</p>\n<p>\n<table>\n  <tr><th>If you are using</th><th>consider using</th></tr>\n  <tr><td>java.util.Vector</td><td>java.util.ArrayList</td></tr>\n  <tr><td>java.util.Hashtable</td><td>java.util.HashMap</td></tr>\n  <tr><td>java.lang.StringBuffer</td><td>java.lang.StringBuilder</td></tr>\n</table>\n</p>', 0, NULL, 'Correctness - Method creates local variable-based synchronized collection', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(846, 'SMII_STATIC_METHOD_INSTANCE_INVOCATION', 'SMII_STATIC_METHOD_INSTANCE_INVOCATION', 'fb-contrib', '<p>This method makes a static method call on an instance reference. For\nreading comprehension of the code is better to call the method on the class,\nrather than an instance. Perhaps this method''s static nature has changed since\nthis code was written, and should be revisited.\n</p>', 0, NULL, 'Style - Method calls static method on instance reference', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(847, 'SPP_DOUBLE_APPENDED_LITERALS', 'SPP_DOUBLE_APPENDED_LITERALS', 'fb-contrib', 'This method appends two literal strings to a StringBuilder back to back. This can be done with just\none append call, and may avoid intermediate reallocations of the StringBuilders backing store.', 0, NULL, 'Performance - Method appends two literal strings back to back to a StringBuilder', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(848, 'SACM_STATIC_ARRAY_CREATED_IN_METHOD', 'SACM_STATIC_ARRAY_CREATED_IN_METHOD', 'fb-contrib', '<p>This method creates an array initialized by constants. Each time this method is called\nthis array will be recreated. It would be more performant to define the array as a\nstatic field of the class instead.</p>', 0, NULL, 'Performance - Method creates array using constants', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(849, 'LSC_LITERAL_STRING_COMPARISON', 'LSC_LITERAL_STRING_COMPARISON', 'fb-contrib', '<p>This method calls the equals or compareTo methods on a String variable passing in a String literal.\nA NullPointerException may occur if the string variable is null. If instead the method was called on\nthe string literal, and the variable was passed as an argument, this exception could never happen.</p>', 0, NULL, 'Style - Method makes literal string comparisons passing the literal as an argument', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(850, 'PL_PARALLEL_LISTS', 'PL_PARALLEL_LISTS', 'fb-contrib', '<p>This class appears to maintain two or more lists or arrays who''s contains is related one-for-one\nthrough the index of the list or array. Consider creating a separate class to hold all the related \npieces of information, and adding instances of this class to just one list or array, or if just two values, use\na Map to associate one value with the other.</p>', 0, NULL, 'Style - Class defines two or more one for one associated lists or arrays', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(851, 'SGSU_SUSPICIOUS_GETTER_SETTER_USE', 'SGSU_SUSPICIOUS_GETTER_SETTER_USE', 'fb-contrib', '<p>This method retrieves the property of a java bean, only to use it in the setter\nfor the same property of the same bean. This is usually a copy/paste typo.', 0, NULL, 'Correctness - Method uses same bean''s getter value for setter', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(852, 'NSE_NON_SYMMETRIC_EQUALS', 'NSE_NON_SYMMETRIC_EQUALS', 'fb-contrib', '<p>This class implements an equals method that compares this object against another type of object.\nThis is almost always a bad thing to do, but if it is to be done, you must make sure that the basic\nsymmetry rule of equivalence is maintained, that being if a equals b, then b equals a. It does not\nappear that the class that is being compared to this class knows about this class, and doesn''t compare itself\nto this.</p>', 0, NULL, 'Correctness - Equals method compares this object against other types in a non symmetric way', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(853, 'MUC_MODIFYING_UNMODIFIABLE_COLLECTION', 'MUC_MODIFYING_UNMODIFIABLE_COLLECTION', 'fb-contrib', '<p>This method attempts to modify a collection that it got from a source that could potentially have created an\nimmutable collection, thru Arrays.asList, Collections.unmodifiableXXX, or one of guava''s methods. Doing so will cause\nan exception, as these collections are not mutable.', 0, NULL, 'Correctness - Modifying Unmodifiable Collection', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(854, 'S508C_NO_SETLABELFOR', 'S508C_NO_SETLABELFOR', 'fb-contrib', '<p>This class uses JLabels that do not specify what fields are being labeled.\nThis hampers screen readers from given appropriate feed back to users. Use\nthe JLabel.setLabelFor method to accomplish this.\n</p>', 0, NULL, 'Correctness - JLabel doesn''t specify what it''s labeling', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(855, 'SCI_SYNCHRONIZED_COLLECTION_ITERATORS', 'SCI_SYNCHRONIZED_COLLECTION_ITERATORS', 'fb-contrib', '<p>This method uses a synchronized collection, built from Collections.synchronizedXXXX, but accesses it\nthrough an iterator. Since an iterator is by definition, multithreaded unsafe, this is a conflict in\nconcept. When using iterators, you should do the synchronization manually.</p>', 0, NULL, 'Correctness - Method creates iterators on synchronized collections', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(856, 'IPU_IMPROPER_PROPERTIES_USE', 'IPU_IMPROPER_PROPERTIES_USE', 'fb-contrib', '<p>This method places non-String objects into a Properties object. As the Properties object\nis intented to be a String to String map, putting non String objects is wrong, and takes advantage\nof a design flaw in the Properties class by deriving from Hashtable instead of using aggregation.\nIf you want a collection that holds other types of objects, use a Hashtable, or better still newer collections\nlike HashMap or TreeMap.', 0, NULL, 'Correctness - Method puts non-String values into a Properties object', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(857, 'SNG_SUSPICIOUS_NULL_LOCAL_GUARD', 'SNG_SUSPICIOUS_NULL_LOCAL_GUARD', 'fb-contrib', '<p>This method tests a local variable to make sure it''s not null before executing a conditional block of\ncode. However in the conditional block it reassigns the local variable. It is likely that the guard\nshould have been a check to see if the local variable is null, not that the local variable was not null.</p>', 0, NULL, 'Correctness - Method tests a local variable for not null as guard and reassigns it', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(858, 'CLI_CONSTANT_LIST_INDEX', 'CLI_CONSTANT_LIST_INDEX', 'fb-contrib', '<p>This method accesses an array or list using a constant integer index. Often,\nthis is a typo where a loop variable is intended to be used. If however, specific\nlist indices mean different specific things, then perhaps replacing the list with\na first-class object with meaningful accessors would make the code less brittle.</p>', 0, NULL, 'Correctness - Method accesses list or array with constant index', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(859, 'URV_CHANGE_RETURN_TYPE', 'URV_CHANGE_RETURN_TYPE', 'fb-contrib', '<p>This method is defined to return a java.lang.Object. However, the return types\nreturned from this method can be defined by a more specific class or interface. Since this\nmethod is not derived from a superclass or interface, it would be more clear to\nchange the return type of this method.</p>', 0, NULL, 'Style - Method returns more specific type of object than declared', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(860, 'PDP_POORLY_DEFINED_PARAMETER', 'PDP_POORLY_DEFINED_PARAMETER', 'fb-contrib', '<p>This method defines parameters at a more abstract level than is actually needed to function correctly,\nas the code casts these parameters to more concrete types. Since this method is not derivable, you should \njust define the parameters with the type that is needed.', 0, NULL, 'Correctness - Method defines parameters more abstractly than needed to function properly', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(861, 'MDM_RANDOM_SEED', 'MDM_RANDOM_SEED', 'fb-contrib', '<p><code>Random()</code> constructor without a seed is insecure because it defaults to easily guessable seed: <code>System.currentTimeMillis()</code>. Initialize seed with <code>Random(SecureRandom.getInstance().generateSeed())</code> or use <code>SecureRandom</code> instead.</p>', 0, NULL, 'Correctness - Method creates insecure Random object', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(862, 'UTA_USE_TO_ARRAY', 'UTA_USE_TO_ARRAY', 'fb-contrib', '<p>This method manually loops over a collection, pulling each element out and storing\nit in an array to build an array from the collection. It is easier, and clearer to use\nthe built in collections method toArray. Given a collection ''mycollection'' of type T, use\nmycollection.toArray(new T[mycollection.size()]);', 0, NULL, 'Style - Method manually creates array from collection', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(863, 'CAO_CONFUSING_AUTOBOXED_OVERLOADING', 'CAO_CONFUSING_AUTOBOXED_OVERLOADING', 'fb-contrib', '<p>This class defines two methods that differ only by a parameter being defined\nas Character vs. int, long, float or double. As autoboxing is present, it may be\nassumed that a parameter of ''a'' would map to the Character version, but does not.</p>', 0, NULL, 'Correctness - Class defines methods which confuse Character with int parameters', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(864, 'NAB_NEEDLESS_AUTOBOXING_VALUEOF', 'NAB_NEEDLESS_AUTOBOXING_VALUEOF', 'fb-contrib', '<p>This method passes a wrapped primitive object to the same class''s .valueOf method.\nSince wrapper classes are immutable, you can just use the original object, rather\nthan calling valueOf to create a new one. This code works because of an abuse of autoboxing.\n</p>', 0, NULL, 'Performance - Method passes primitive wrapper to Wrapper class valueOf method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(865, 'UP_UNUSED_PARAMETER', 'UP_UNUSED_PARAMETER', 'fb-contrib', '<p>This method defines parameters that are never used. As this method is either static of private,\nand can''t be derived from, it is safe to remove these parameters and simplify your method.\nYou should consider, while unlikely, that this method may be used reflectively, and thus you will\nwant to change that call as well.', 0, NULL, 'Style - Unused Parameter', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(866, 'WEM_WEAK_EXCEPTION_MESSAGING', 'WEM_WEAK_EXCEPTION_MESSAGING', 'fb-contrib', '<p>This method creates and throws an exception using a static string as the exceptions message.\nWithout any specific context of this particular exception invocation, such as the value of parameters, \nkey member variables, or local variables, it may be difficult to infer how this exception occurred. Consider\nadding context to the exception message.</p>', 0, NULL, 'Style - Method throws exception with static message string', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(867, 'UJM_UNJITABLE_METHOD', 'UJM_UNJITABLE_METHOD', 'fb-contrib', '<p>This method is longer than 8000 bytes. By default the JIT will not attempt to compile this method no matter\nhow hot it is, and so this method will always be interpreted. If performance is important, you should consider\nbreaking this method up in smaller chunks. (And probably a good idea for readability too!).', 0, NULL, 'Performance - Unjitable method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(868, 'CE_CLASS_ENVY', 'CE_CLASS_ENVY', 'fb-contrib', '<p><em>THIS DETECTOR IS HIGHLY EXPERIMENTAL AND IS LIKELY TO CREATE A LOT OF FUD</em></p>\n<p>This method makes extensive use of methods from another class over methods of it''s own\nclass. Typically this means that the functionality that is accomplished by this method\nmost likely belongs with the class that is being used so liberally. Consider refactoring this\nmethod to be contained in that class, and to accept all the parameters needed in the method signature.</p>', 0, NULL, 'Style - Method excessively uses methods of another class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(869, 'LO_INCORRECT_NUMBER_OF_ANCHOR_PARAMETERS', 'LO_INCORRECT_NUMBER_OF_ANCHOR_PARAMETERS', 'fb-contrib', 'This method passes the wrong number of parameters to a slf4j logging method (error, warn, info, debug) based on the number of anchors {} in the \nformat string. An additional exception argument is allowed if found.', 0, NULL, 'Correctness - Method passes an incorrect number of parameters to an SLF4J logging statement', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(870, 'MDM_SECURERANDOM', 'MDM_SECURERANDOM', 'fb-contrib', '<p>The <code>SecureRandom()</code> constructors and <code>SecureRandom.getSeed()</code> method are deprecated. Call <code>SecureRandom.getInstance()</code> and <code>SecureRandom.getInstance().generateSeed()</code> instead.</p>', 0, NULL, 'Correctness - Method calls deprecated SecureRandom method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(871, 'SMA_STUTTERED_METHOD_ARGUMENTS', 'SMA_STUTTERED_METHOD_ARGUMENTS', 'fb-contrib', '<p>This method calls a method passing the same value for two or more of the parameters.\nOften this is a cut/paste bug, but if not, it is confusing why you would pass the same value for two\ndifferent parameters. Perhaps an alternative method that just takes one parameter should be overridden\nin this case.</p>', 0, NULL, 'Style - Code calls a method passing the same value to two different arguments', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(872, 'PUS_POSSIBLE_UNSUSPECTED_SERIALIZATION', 'PUS_POSSIBLE_UNSUSPECTED_SERIALIZATION', 'fb-contrib', '<p>This method serializes an instance of a non-static inner class. Since this class has a\nreference to the containing class, this outer class will be serialized as well. This is often\nnot intentional, and will make the amount of data that is serialized much more than is needed.\nIf the outer classes is not desired to be serialized, either make the inner class static, or\npull it out into a separate "first class" class.', 0, NULL, 'Correctness - Method serializes an instance of a non-static inner class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(873, 'MDM_INETADDRESS_GETLOCALHOST', 'MDM_INETADDRESS_GETLOCALHOST', 'fb-contrib', '<p>Do not call <code>InetAddress.getLocalHost()</code> on multihomed servers. On a multihomed server, <code>InetAddress.getLocalHost()</code> simply returns the IP address associated with the server''s internal hostname. This could be any of the network interfaces, which could expose the machine to security risks. Server applications that need to listen on sockets should add configurable properties to define which network interfaces the server should bind.</p>', 0, NULL, 'Correctness - Method calls InetAddress.getLocalHost()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(874, 'FPL_FLOATING_POINT_LOOPS', 'FPL_FLOATING_POINT_LOOPS', 'fb-contrib', '<p>This method uses floating point variables to index a loop. Since floating point\nmath is imprecise, rounding errors will accumulate over time each time the loop is\nexecuted. It is usually better to use integer indexing, and calculate the new value\nof the floating point number at the top of the loop body.</p>', 0, NULL, 'Correctness - Method uses floating point indexed loops', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(875, 'SPP_USE_MATH_CONSTANT', 'SPP_USE_MATH_CONSTANT', 'fb-contrib', '<p>This method defines its own version of <em>PI</em> or <em>e</em> and the value is not as precise as the\none defined in the constants Math.PI or Math.E. Use these constants instead.</p>', 0, NULL, 'Correctness - Method uses non standard math constant', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(876, 'SCII_SPOILED_CHILD_INTERFACE_IMPLEMENTOR', 'SCII_SPOILED_CHILD_INTERFACE_IMPLEMENTOR', 'fb-contrib', '<p>This class declares that it implements an interface, but does so by relying on methods supplied\nby superclasses, even though those superclasses know nothing about the interface in question. If you wish\nto have the child not implement all the methods of the interface, it would probably be better to declare\nthe superclass as implementing the interface, and if that class does not provide all the methods, then declare\nthat superclass abstract.</p>', 0, NULL, 'Style - Class implements interface by relying on unknowing superclass methods', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(877, 'WOC_WRITE_ONLY_COLLECTION_LOCAL', 'WOC_WRITE_ONLY_COLLECTION_LOCAL', 'fb-contrib', '<p>This method creates and initializes a collection but then never access this collection\nto gain information, or fetch items from the collection. It is likely that this collection\nis left over from a past effort, and can be removed.', 0, NULL, 'Correctness - Method creates and initializes a collection but never reads or gains information from it', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(878, 'MOM_MISLEADING_OVERLOAD_MODEL', 'MOM_MISLEADING_OVERLOAD_MODEL', 'fb-contrib', '<p>This class ''overloads'' the same method with both an instance and static version. As the use\nof these two models is different, it will be confusing to the users of these methods.</p>', 0, NULL, 'Style - Class ''overloads'' a method with both instance and static versions', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(879, 'SPP_SERIALVER_SHOULD_BE_PRIVATE', 'SPP_SERIALVER_SHOULD_BE_PRIVATE', 'fb-contrib', 'This class defines a static field ''serialVersionUID'' to define the serialization\nversion for this class. This field is marked as non private. As the serialVersionUID only\ncontrols the current class, and doesn''t effect any derived classes, defining it as non\nprivate is confusing. It is suggested you change this variable to be private.', 0, NULL, 'Style - Class defines a serialVersionUID as non private', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(880, 'DTEP_DEPRECATED_TYPESAFE_ENUM_PATTERN', 'DTEP_DEPRECATED_TYPESAFE_ENUM_PATTERN', 'fb-contrib', '<p>This class appears to implement the old style type safe enum pattern that was used in place of\nreal enums. Since this class is compiled with java 1.5 or better, it would be simpler and more \neasy to understand if it was just switched over to an enum.</p>', 0, NULL, 'Style - Class appears to implement the old style type safe enum pattern', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(881, 'UVA_USE_VAR_ARGS', 'UVA_USE_VAR_ARGS', 'fb-contrib', '<p>This method defines a parameter list that ends with an array. As this class is compiled with\nJava 1.5 or better, this parameter could be defined as a vararg parameter instead, which can be\nmore convienent for client developers to use. This is not a bug, per se, just an improvement.', 0, NULL, 'Style - Method defines parameter list with array as last argument, rather than vararg', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(882, 'AFBR_ABNORMAL_FINALLY_BLOCK_RETURN', 'AFBR_ABNORMAL_FINALLY_BLOCK_RETURN', 'fb-contrib', '<p>This method returns or throws exceptions from a finally block. This will\nmask real program logic in the try block, and short-circuit normal method termination.\n</p>', 0, NULL, 'Correctness - Method has abnormal exit from finally block', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(883, 'MDM_THREAD_FAIRNESS', 'MDM_THREAD_FAIRNESS', 'fb-contrib', '<p>Calling <code>Lock.tryLock()</code> or <code>ReentrantLock.tryLock()</code> without a timeout does not honor the lock''s fairness setting. If you want to honor the fairness setting for this lock, then use <code>tryLock(0, TimeUnit.SECONDS)</code> which is almost equivalent (it also detects interruption).</p>', 0, NULL, 'MT Correctness - Method ignores Lock''s fairness settings by calling tryLock()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(884, 'WOC_WRITE_ONLY_COLLECTION_FIELD', 'WOC_WRITE_ONLY_COLLECTION_FIELD', 'fb-contrib', '<p>This class creates and initializes a collection as a field but then never access this collection\nto gain information, or fetch items from the collection. It is likely that this collection\nis left over from a past effort, and can be removed.', 0, NULL, 'Correctness - Class creates and initializes a collection but never reads or gains information from it', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(885, 'S508C_APPENDED_STRING', 'S508C_APPENDED_STRING', 'fb-contrib', '<p>This method creates a component and passes a string that was build up from a number of\nstrings through appending multiple strings together. As foreign languages may order phrases\ndifferently, this will make translations difficult.</p>', 0, NULL, 'Correctness - Method passes appended string to title/label of component', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(886, 'CCNE_COMPARE_CLASS_EQUALS_NAME', 'CCNE_COMPARE_CLASS_EQUALS_NAME', 'fb-contrib', '<p>In a JVM, Two classes are the same class (and consequently the same type) if\nthey are loaded by the same class loader, and they have the same fully\nqualified name [JVMSpec 1999].\n\nComparing class name ignores the class loader.\n</p>', 0, NULL, 'Correctness - Method compares class name instead of comparing class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(887, 'SCSS_SUSPICIOUS_CLUSTERED_SESSION_SUPPORT', 'SCSS_SUSPICIOUS_CLUSTERED_SESSION_SUPPORT', 'fb-contrib', '<p>This method fetches a complex object from an HttpSession object, modifies this object, but does\nnot call setAttribute, to inform the application server that this attribute has been changed. This will\ncause this attribute not to be updated in other servers in a clustered environment, as only changes marked\nby a call to setAttribute are replicated.</p>', 0, NULL, 'Correctness - Method modifies http session attribute without calling setAttribute', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(888, 'CU_CLONE_USABILITY_THROWS', 'CU_CLONE_USABILITY_THROWS', 'fb-contrib', '<p>This class implements the Cloneable interface but defines its clone method to still return\na CloneNotSupportedException. Since you are implementing clone() it would make sense that the method\nin question will <em>not</em> throw that exception, so annotating your method with it just makes client use\nof your more painful as they have to handle an exception that will never happen. Just remove the\nthrows clause from your method.\n</p>', 0, NULL, 'Style - Clone method declares it throws CloneNotSupportedException', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(889, 'LEST_LOST_EXCEPTION_STACK_TRACE', 'LEST_LOST_EXCEPTION_STACK_TRACE', 'fb-contrib', '<p>This method catches an exception, and throws a different exception, without incorporating the\noriginal exception. Doing so hides the original source of the exception making debugging and fixing\nthese problems difficult. It is better to use the constructor of this new exception that takes an\noriginal exception so that this detail can be passed along to the user.</p>', 0, NULL, 'Correctness - Method throws alternative exception from catch block without history', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(890, 'AWCBR_ARRAY_WRAPPED_CALL_BY_REFERENCE', 'AWCBR_ARRAY_WRAPPED_CALL_BY_REFERENCE', 'fb-contrib', '<p>This method uses a one element array to wrap an object that is to be passed to a method as an argument\nto simulate call by pointer ala C++. It is better to define a proper return class type that holds all\nthe relevant information retrieved from the called method.</p>', 0, NULL, 'Style - Method uses 1 element array to simulate call by reference', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(891, 'CU_CLONE_USABILITY_OBJECT_RETURN', 'CU_CLONE_USABILITY_OBJECT_RETURN', 'fb-contrib', '<p>This class implements the Cloneable interface but defines its clone method to return an\nObject. Since most likely users of this method will need to cast it to the real type, this will\nbe more painful than necessary. Just declare the return value to be the type of this class.\n</p>', 0, NULL, 'Style - Clone method declares it returns an Object', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(892, 'SPP_NO_CHAR_SB_CTOR', 'SPP_NO_CHAR_SB_CTOR', 'fb-contrib', '<p>This method constructs a StringBuffer or a StringBuilder using the constructor that takes an integer, but\nappears to pass a character instead. It is probable that the author assumed that character would be appended to the\nStringBuffer/Builder, but instead the integer value of the character is used as an initial size for the buffer.\n</p>', 0, NULL, 'Correctness - Method appears to pass character to StringBuffer or StringBuilder integer constructor', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(893, 'SIL_SQL_IN_LOOP', 'SIL_SQL_IN_LOOP', 'fb-contrib', '<p>This method executes sql queries inside of a loop. This pattern is often inefficient\nas the number of queries may mushroom in fencepost cases. It is probably more performant\nto loop over the input and collect the key data needed for the query for all items, and\nissue one query using an in clause, or similar construct, and then loop over this result\nset, and fetch all the data at once.</p>', 0, NULL, 'Performance - Method executes sql queries inside of loops', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(894, 'MDM_RUNFINALIZATION', 'MDM_RUNFINALIZATION', 'fb-contrib', '<p>Manually triggering finalization can result in serious performance problems and may be masking resource cleanup bugs.</p>', 0, NULL, 'Correctness - Method triggers finalization', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(895, 'XmlSchemaCheck', NULL, 'xml', '<p>\n  This rule allows validation of XML files against XML Schema using Xerces parser.\n</p>\n\n<p>\n  The "schemas" parameter can be set to:\n  <ul>\n    <li>the namespace or short name of a built-in schema (ex: xhtml1-strict or http://www.w3.org/1999/xhtml)</li>\n    <li>the URL to a schema (ex: http://www.springframework.org/schema/beans/spring-beans-3.2.xsd)</li>\n    <li>the relative path to a schema on the filesystem (ex: schemas/xsd/mycustomschema.xsd)</li>\n  </ul>\n  <br/>\n  Default value: <code>autodetect</code>. In this case, the parser will try to load the schema based on the doctype or the namespace declaration in the document.\n</p>\n\n<p>\n  Files to be validated by the schema can be specified through inclusion pattern using the "filePattern" parameter.\n</p>\n\n<p>\nBuilt-in schemas:\n</p>\n\n<table class="table table-bordered">\n<thead class="bordered">\n<tr><th>Description</th><th>Namespace or Short name</th><th>Doctype</th></tr>\n</thead>\n<tbody>\n<tr><td>XML</td><td>http://www.w3.org/2001/xml.xsd</td><td>&nbsp;</td></tr>\n<tr><td>XML</td><td>http://www.w3.org/XML/1998/namespace</td><td>&nbsp;</td></tr>\n<tr><td>XHTML1.0 Strict</td><td>http://www.w3.org/1999/xhtml</td><td>&nbsp;</td></tr>\n<tr><td>XHTML1.0 Strict</td><td>xhtml1-strict</td><td>-//W3C//DTD XHTML 1.0 Strict//EN</td></tr>\n<tr><td>XHTML1.0 Transitional</td><td>xhtml1-transitional</td><td>-//W3C//DTD XHTML 1.0 Transitional//EN</td></tr>\n<tr><td>XHTML1.0 Frameset</td><td>xhtml1-frameset</td><td>-//W3C//DTD XHTML 1.0 Frameset//EN</td></tr>\n<tr><td>XHTML1.1</td><td>&nbsp;</td><td>-//W3C//DTD XHTML 1.1 Strict//EN</td></tr>\n<tr><td>JSF Core</td><td>http://java.sun.com/jsf/core</td><td>&nbsp;</td></tr>\n<tr><td>JSF HTML Basic</td><td>http://java.sun.com/jsf/html</td><td>&nbsp;</td></tr>\n<tr><td>JSF Facelets</td><td>http://java.sun.com/jsf/facelets</td><td>&nbsp;</td></tr>\n<tr><td>Maven Project Model</td><td>http://maven.apache.org/POM/4.0.0</td><td>&nbsp;</td></tr>\n</tbody>\n</table>', 2, NULL, 'XML schemas should be valid', 'READY', 'xml', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 'HTML'),
(896, 'IndentCheck', NULL, 'xml', '<p>\n  Proper indentation is a simple and effective way to improve the code''s readability. Consistent indentation among the developers on a team also reduces the differences that are committed to source control systems, making code reviews easier.\n</p>\n\n<p>\n  By default this rule checks that each block of code is indented but not the size of this indent. The parameter "indentSize" allows the expected indent size to be defined. Only the first line of a badly indented section is reported.\n</p>\n\n<p>\n  The following code illustrates this rule when the expected indent size is set to 2:\n</p>', 1, NULL, 'Source code should be indented consistently', 'READY', 'xml', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(897, 'S1778', NULL, 'xml', '<p>\nThe prolog header is the following piece of code starting some XML documents:\n</p>\n<pre>\n&lt;?xml version="y.x" encoding="zzzzz"?&gt;\n</pre>\n\n<p>\nThis requirement is explicitly defined in the XML specification:\n</p>\n<blockquote>\nBecause each XML entity not accompanied by external encoding information and not in UTF-8 or UTF-16 encoding must begin with an XML encoding declaration, in which the first characters must be ''&lt;?xml'', any conforming processor can detect, after two to four octets of input, which of the following cases apply.\n</blockquote>\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\n&lt;!-- Generated file --&gt;\n&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n&lt;firstNode&gt;;\n  content\n&lt;/firstNode&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n&lt;!-- Generated file --&gt;\n&lt;firstNode&gt;\n  content\n&lt;/firstNode&gt;\n</pre>', 2, NULL, 'XML files containing a prolog header should start first with "<?xml" characters', 'READY', 'xml', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(898, 'NewlineCheck', NULL, 'xml', '<p>\n  Each element should be on a line to itself.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;parent&gt;&lt;child /&gt;&lt;/parent&gt &lt;!-- Noncompliant --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;parent&gt;\n  &lt;child /&gt;\n&lt;/parent&gt;\n</pre>', 1, NULL, 'Newlines should follow each element', 'READY', 'xml', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, NULL, 0, 'HTML'),
(899, 'IllegalTabCheck', NULL, 'xml', '<p>\n  Developers should not need to configure the tab width of their text editors in order to be able to read source code.\n  So the use of tabulation character must be banned.\n</p>', 1, NULL, 'Tabulation characters should not be used', 'READY', 'xml', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'convention', 0, 'HTML'),
(900, 'XPathCheck', NULL, 'xml', '<p>\n  This rule allows the definition of custom rules using XPath expressions.\n\n<p>\n  Issues are created depending on the return value of the XPath expression. If the XPath expression returns:\n  <ul>\n    <li>a single or list of AST nodes, then a line issue with the given message is created for each node</li>\n    <li>a boolean, then a file issue with the given message is created only if the boolean is true</li>\n    <li>anything else, no issue is created</li>\n  </ul>\n</p>\n\n<p>\nHere is an example of an XPath expression to log an issue on each ''td'' tag using the ''nowrap'' deprecated attribute:\n<pre>//td[@nowrap]</pre>\n</p>', 2, NULL, 'XPath rule', 'READY', 'xml', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 'HTML'),
(901, 'UselessParenthesesCheck', 'UselessParenthesesCheck', 'squid', '<p>\nUseless parentheses can sometimes be misleading and so should be removed.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\nreturn 3;             // Compliant\nreturn (x);           // Non-Compliant\nreturn (x + 1);       // Non-Compliant\nint x = (y / 2 + 1);  // Non-Compliant\nint y = (4+X) * y;    // Compliant\n</pre>', 2, NULL, 'Useless parentheses around expressions should be removed to prevent any misunderstanding', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, NULL, 0, 'HTML'),
(902, 'S1215', 'S1215', 'squid', '<p>\nCalling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason:\nthere is no way to know exactly what will be done under the hood by the JVM because the behavior will depend on its vendor, version and options:\n</p>\n\n<ul>\n  <li>Will the whole application be frozen during the call?</li>\n  <li>Is the -XX:DisableExplicitGC option activated?</li>\n  <li>Will the JVM simply ignore the call?</li>\n  <li>...</li>\n</ul>\n\n<p>An application relying on those unpredictable methods is also unpredictable and therefore broken.</p>\n\n<p>The task of running the garbage collector should be left exclusively to the JVM.</p>', 3, NULL, 'Execution of the Garbage Collector should be triggered only by the JVM', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'bug', 0, 'HTML'),
(903, 'S1217', 'S1217', 'squid', '<p>\nThe purpose of the <code>Thread.run()</code> and <code>Runnable.run()</code> methods is to execute code in a separate, dedicated thread.\nCalling those methods directly doesn''t make sense because it causes their code to be executed in the current thread.\n</p>\n\n<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.run(); // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.start(); // Compliant\n</pre>', 3, NULL, 'Thread.run() and Runnable.run() should not be called directly', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'multithreading', 0, 'HTML'),
(904, 'S138', 'S138', 'squid', '<p>\nA method that grows too large tends to aggregate too many responsibilities.\nSuch methods inevitably become harder to understand and therefore harder to maintain.\n</p>\n\n<p>\nAbove a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks.\nThose smaller methods will not only be easier to understand, but also probably easier to test.\n</p>', 2, NULL, 'Methods should not have too many lines', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, 'brain-overload', 0, 'HTML'),
(905, 'S1294', 'S1294', 'squid', '<p>Since arrays do not override <code>Object.equals()</code>, calling equals on two arrays is the same as comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n\n<p>However, some developers might expect Array.equals(Object obj) to do more than a simple memory address comparison, comparing for instance the size and content of the two arrays. To prevent such a misunderstanding, the ''=='' operator or <code>Arrays.equals(array1, array2)</code> must always be used in place of the Array.equals(Object obj) method.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString[] array1 = ...\nString[] array2 = ...\n...\nif(array1.equals(array2)){\n...\n}\n</pre>\n\n<h2>Compliant</h2>\n<pre>\nString[] array1 = ...\nString[] array2 = ...\n...\nif(array1 == array2){\n...\n}\n//or\nif(Arrays.equals(array1, array2)) {\n  ...\n}\n</pre>\n\n<h2>See</h2>\n\n<table class="data">\n  <thead>\n    <tr><th>Tool</th>\n    <th>Reference</th>\n    <th>Description</th></tr>\n  </thead>\n  <tbody>\n  <tr>\n    <td>Findbugs</td>\n    <td>EC_INCOMPATIBLE_ARRAY_COMPARE</td>\n    <td>Correctness - equals(...) used to compare incompatible arrays</td>\n  </tr>\n  <tr>\n    <td>Findbugs</td>\n    <td>EC_BAD_ARRAY_COMPARE</td>\n    <td>Correctness - Invocation of equals() on an array, which is equivalent to ==</td>\n  </tr>\n  </tbody>\n</table>', 3, NULL, 'The Array.equals(Object obj) method should never be used', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'LINEAR', NULL, '5min', NULL, NULL, NULL, NULL, 'convention', 0, 'HTML'),
(906, 'S1219', 'S1219', 'squid', '<p>Even if it is legal, mixing case and non-case labels in the body of a <code>switch</code> statement is very confusing, and can even be the result of a typing error.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>Case 1, the code is syntactically correct but the behaviour is not the expected one</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   //instead of "case WEDNESDAY"\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2, the code is correct and behaves as expected but is hardly readable</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i < X ; i++) {\n         /* ... */\n        break foo;  //This break statement doesn''t relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<p>Case 1</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); //Put the content of the labelled "for" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>', 3, NULL, '"switch" statements should not contain non-case labels', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(907, 'S135', 'S135', 'squid', '<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.</p>\n\n<p>\nOne <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one, the code should be refactored to increase readability.\n</p>\n\n<p>The following code:</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfor (int i = 1; i <= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println("i = " + i);\n}\n</pre>', 2, NULL, 'Loops should not contain more than a single "break" or "continue" statement', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'brain-overload', 0, 'HTML'),
(908, 'S1150', 'S1150', 'squid', '<p>From the official Oracle Javadoc:</p>\n\n<blockquote>\nNOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface.\nIn addition, Iterator adds an optional remove operation, and has shorter method names.\nNew implementations should consider using Iterator in preference to Enumeration.\n</blockquote>\n\n<p>The following code:</p>\n\n<pre>\npublic class MyClass implements Enumeration {  // Non-Compliant\n  /* ... */\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n</pre>', 2, NULL, 'Enumeration should not be implemented', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(909, 'S1151', 'S1151', 'squid', '<p>Switch cases should remain small to keep the overall switch compact and readable.</p>\n\n<p>The following code snippet illustrates this rule with the default threshold of 5:</p>\n\n<pre>\nswitch (myVariable) {\n  case 0:                     // Compliant - 5 lines till following case\n    System.out.println("");\n    System.out.println("");\n    System.out.println("");\n    break;\n  default:                    // Non-Compliant - 6 lines till switch end\n    System.out.println("");\n    System.out.println("");\n    System.out.println("");\n    System.out.println("");\n    break;\n}\n</pre>', 2, NULL, 'Switch cases should not have too many lines', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'brain-overload', 0, 'HTML'),
(910, 'S1210', 'S1210', 'squid', '<p>\nAccording to the Java <code>Comparable.compareTo(T o)</code> documentation:\n</p>\n\n<blockquote>\nIt is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.\nGenerally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.\nThe recommended language is "Note: this class has a natural ordering that is inconsistent with equals."\n</blockquote>\n\n<p>\nIf this rule is violated, weird and unpredictable failures can occur.\nFor example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it relies on <code>equals()</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n</pre>', 3, NULL, '"equals(Object obj)" should be overridden along with the "compareTo(T obj)" method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'bug', 0, 'HTML'),
(911, 'S1609', 'S1609', 'squid', '<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as java.lang.Runnable, java.awt.event.ActionListener, java.util.Comparator and java.util.concurrent.Callable. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or Method references.</p>\n\n<p>Using <code>@FunctionalInterface</code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would break the use of Lambda implementations.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  public interface Changeable&lt;T&gt; {\n    public void change(T o);\n  }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  @FunctionalInterface\n  public interface Changeable&lt;T&gt; {\n    public void change(T o);\n  }\n</pre>', 2, NULL, '@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'java8', 0, 'HTML'),
(912, 'S1214', 'S1214', 'squid', '<p>According to Joshua Bloch, author of "Effective Java":</p>\n\n<blockquote>\n<p>\nThe constant interface pattern is a poor use of interfaces.\n</p>\n\n<p>\nThat a class uses some constants internally is an implementation detail.\nImplementing a constant interface causes this implementation detail to leak into the class''s exported API.\nIt is of no consequence to the users of a class that the class implements a constant interface.\nIn fact, it may even confuse them.\nWorse, it represents a commitment:\nif in a future release the class is modified so that it no longer needs to use the constants,\nit still must implement the interface to ensure binary compatibility.\nIf a nonfinal class implements a constant interface,\nall of its subclasses will have their namespaces polluted by the constants in the interface.\n</p>\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\ninterface Status {                      // Non-Compliant\n   int OPEN = 1;\n   int CLOSED = 2;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic enum Status {                    // Compliant\n  OPEN,\n  CLOSED;\n}\n</pre>\n\n<p>or</p>\n\n<pre>\npublic final class Status {             // Compliant\n   public static final int OPEN = 1;\n   public static final int CLOSED = 2;\n}\n</pre>', 1, NULL, 'Constants should not be defined in interfaces', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, NULL, 0, 'HTML'),
(913, 'NoSonar', 'NoSonar', 'squid', '<p>Any issue to quality rule can be deactivated with the\n	//NOSONAR marker. This marker is pretty useful to exclude\n	false-positive results but sometimes it can abusively be used to hide\n	real quality flaws.</p>\n<p>This rule allows to track and/or forbid use of this marker</p>', 0, NULL, 'Avoid use of //NOSONAR marker', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 18, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(914, 'S1213', 'S1213', 'squid', '<p>\nAccording to the Java Code Conventions as defined by Oracle, the parts of a class or interface declaration should appear in the following order in the source files:\n<ul>\n<li>Class and instance variables</li>\n<li>Constructors</li>\n<li>Methods</li>\n</ul>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int field = 0;\n  isTrue() {...}\n  public Foo() {...}                // Noncompliant, constructor defined after method\n  public static final int OPEN = 4; // Noncompliant, variable defined after method\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo{  // Compliant\n  public static final int OPEN = 4;\n  private int field = 0;\n  public Foo() {...}\n  public boolean isTrue() {...}\n}\n</pre>', 1, NULL, 'The members of an interface declaration or class should appear in a pre-defined order', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(915, 'ObjectFinalizeCheck', 'ObjectFinalizeCheck', 'squid', '<p>\nAccording to the official Java documentation, <code>Object.finalize()</code> is called by the garbage collector on an object when garbage collection determines that there are no more references to the object.\nCalling this method explicitly breaks this contract and so is misleading.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\npublic void dispose() throws Throwable {\n  this.finalize();                       // Non-Compliant\n}\n</pre>', 3, NULL, 'The Object.finalize() method should never be called', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'pitfall', 0, 'HTML'),
(916, 'S1158', 'S1158', 'squid', '<p>\nCreating temporary primitive wrapper objects only for <code>String</code> conversion is inefficient.\nInstead, the static <code>toString()</code> method of those primitive wrapper classes should be used.\n</p>\n\n<p>For example, the following code:</p>\n\n<pre>\nnew Integer(myInteger).toString();  // Non-Compliant\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\nInteger.toString(myInteger);      // Compliant\n</pre>', 2, NULL, 'Primitive wrappers should not be instantiated only to perform a to String conversion', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, NULL, 0, 'HTML'),
(917, 'S1157', 'S1157', 'squid', '<p>\nUsing <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation of temporary, intermediate <code>String</code> objects.\n</p>\n\n<p>The following code:</p>\n\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Non-Compliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Non-Compliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Non-Compliant\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>', 2, NULL, 'Case insensitive string comparisons should be made without intermediate upper or lower casing', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(918, 'S1155', 'S1155', 'squid', '<p>\nUsing <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable.\n</p>\n\n<p>The following code:</p>\n\n<pre>\nif (myCollection.size() == 0) {  // Non-Compliant\n  /* ... */\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\nif (myCollection.isEmpty()) {    // Compliant\n  /* ... */\n}\n</pre>', 2, NULL, 'Collection.isEmpty() should be used to test for emptiness', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, NULL, 0, 'HTML'),
(919, 'S1611', 'S1611', 'squid', '<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single parameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n(x) -> x * 2\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nx -> x * 2\n</pre>', 1, NULL, 'Parentheses should be removed from a single lambda input parameter when its type is inferred', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'java8', 0, 'HTML'),
(920, 'S1153', 'S1153', 'squid', '<p>\nAppending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.\nThe argument passed to <code>String.valueOf()</code> should be directly appended instead.\n</p>\n\n<p>The following code:</p>\n\n<pre>\npublic void display(int i){\n  System.out.println("Output is " + String.valueOf(i));    // Non-Compliant\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic void display(int i){\n  System.out.println("Output is " + i);                    // Compliant\n}\n</pre>', 1, NULL, 'String.valueOf() should not be appended to a String', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, NULL, 0, 'HTML'),
(921, 'S1612', 'S1612', 'squid', '<p>Method/constructor references are more compact and readable than using lambdas, and are therefore preferred.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  List<Integer> list = new ArrayList<Integer>();\n  list.add(0);\n  list.add(1);\n  list.add(2);\n\n    list.forEach(n -> { System.out.println(n); });\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  List<Integer> list = new ArrayList<Integer>();\n  list.add(0);\n  list.add(1);\n  list.add(2);\n\n  list.forEach(System.out::println);\n</pre>', 1, NULL, 'Replace lambdas with method references when possible', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'java8', 0, 'HTML'),
(922, 'S1610', 'S1610', 'squid', '<p>With Java 8''s "default method" feature, any abstract class without direct or inherited field should be converted into an interface.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>', 2, NULL, 'Abstract classes without fields should be converted to interfaces', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'java8', 0, 'HTML'),
(923, 'UndocumentedApi', 'UndocumentedApi', 'squid', '<p>\nTry to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc.\nIt would be a nightmare, because Javadoc is the only way to understand of the contract of the API.\nDocumenting API with Javadoc increases the productivity of the developers consuming it.\n</p>\n\n<p>The following Javadoc elements are required:</p>\n<ul>\n  <li>Parameters, using <code>@param parameterName</code>.</li>\n  <li>Method return values, using <code>@return</code>.</li>\n  <li>Generic types, using <code>@param &lt;T&gt;</code>.</li>\n</ul>\n\n<p>The following public methods and constructors are not taken into account by this rule:</p>\n<ul>\n  <li>Getters and setters.</li>\n  <li>Methods with @Override annotation.</li>\n  <li>Empty constructors.</li>\n  <li>Static constants.</li>\n</ul>\n\n<p>The following code snippet illustrates this rule:</p>\n\n<pre>\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass&lt;T&gt; implements Runnable {    // Non-Compliant - missing ''@param &lt;T&gt;''\n\n  public static final DEFAULT_STATUS = 0;        // Compliant - static constant\n  private int status;                            // Compliant - not public\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;                         // Compliant - well documented\n\n  public MyClass() {                             // Non-Compliant - missing documentation\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {            // Compliant - setter\n    this.status = status;\n  }\n\n  @Override\n  public void run() {                            // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {                 // Compliant - not public\n  }\n\n  /**\n    * @param value ...\n    */\n  public void doSomething(int value) {           // Compliant\n  }\n\n  /**\n    */\n  public int doSomething(int value) {            // Non-Compliant - missing ''@param value'' and ''@return''\n    return value;\n  }\n}\n</pre>', 2, NULL, 'Public types, methods and fields (API) should be documented with Javadoc', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'convention', 0, 'HTML'),
(924, 'TrailingCommentCheck', 'TrailingCommentCheck', 'squid', '<p>\nThis rule verifies that single-line comments are not located at the end of a line of code.\nThe main idea behind this rule is that in order to be really readable, trailing comments would have to be property written and formatted (correct alignment, no interference with the visual structure of the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line\nof code, where they will always be visible and properly formatted.\n</p>\n\n<p>\nHowever, this rule allows to write trailing "metadata comments" - for which the pattern is configurable, as those metadata comments are usually very short and heavily used in some cases.\n</p>\n\n<pre>\n// The following line is non-compliant\nint a1 = b + c; // This is a trailing comment that can be very very long\n\n// This very long comment is better placed before the line of code\nint a2 = b + c;\n\n// The following line is compliant with the default configuration of the rule\nString a3 = "id"; // $NON-NLS-1$\n</pre>', 1, NULL, 'Comments should not be located at the end of lines of code', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(925, 'MaximumInheritanceDepth', 'MaximumInheritanceDepth', 'squid', '<p>Inheritance is certainly one of the most valuable concept of\n	object-oriented programming. It''s a way to compartmentalize and reuse\n	code by creating collections of attributes and behaviors called classes\n	which can be based on previously created classes. But abusing of this\n	concept by creating a deep inheritance tree can lead to very complex\n	and unmaintainable source code.</p>\n<p>Most of the time a too deep inheritance tree is due to bad object\n	oriented design which has led to systematically use ''inheritance'' when\n	''composition'' would suit better.</p>', 2, NULL, 'Avoid too deep inheritance tree', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(926, 'EmptyFile', 'EmptyFile', 'squid', '<p>Detect empty files, which do not have any lines of code.</p>\n<p>Example:</p>\n<pre>\n//package org.foo;\n//\n//public class Bar {}\n</pre>', 2, NULL, 'Empty file', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(927, 'S128', 'S128', 'squid', '<p>\nWhen the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While this is sometimes intentional, it often is a mistake which leads to unexpected behavior.\n</p>\n\n<h2>\nNoncompliant Code Example\n</h2>\n\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2:  // Both ''doSomething()'' and ''doSomethingElse()'' will be executed. Is it on purpose ?\n    doSomething();\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>\nCompliant Solution\n</h2>\n\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2: \n    doSomething();\n    break;\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>\nExceptions\n</h2>\n\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:                               \n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  default:                               // For the last case, use of break statement is optional \n    doSomethingElse();\n}\n</pre>', 3, NULL, 'Switch cases should end with an unconditional break statement', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'pitfall', 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(928, 'UnusedPrivateMethod', 'UnusedPrivateMethod', 'squid', '<p>Private methods that are never executed are dead code. Dead code\n  means unnecessary, inoperative code that should be removed. This helps\n  in maintenance by decreasing the maintained code size, making it easier\n  to understand the program and preventing bugs from being introduced.</p>\n<p>In the following two cases, private methods are not considered as\n  dead code by SonarQube :</p>\n<ul>\n  <li>Private empty constructors that are intentionally used to\n    prevent any direct instantiation of a class.</li>\n  <li>Private methods : readObject(...), writeObject(...),\n    writeReplace(...), readResolve(...) which can contractually be used\n    when implementing the Serializable interface.</li>\n</ul>', 2, NULL, 'Unused private method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'unused', 0, 'HTML'),
(929, 'S1226', 'S1226', 'squid', '<p>\nWhile it is technically correct to assign to parameters from within method bodies, it is better to use temporary variables to store intermediate results.\nThis rule will typically detect cases where a constructor parameter is assigned to itself instead of a field of the same name, i.e. when <code>this</code> was forgotten.\nAllowing parameters to be assigned to also reduces the code readability as developers will not be able to know whether the original parameter or some temporary variable is being accessed without going through the whole method.\nMoreover, some developers might also expect assignments of method parameters to be visible from callers, which is not the case and can confuse them.\nAll parameters should be treated as <code>final</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  public String name;\n\n  public MyClass(String name) {\n    name = name;                    // Noncompliant - useless identity assignment\n  }\n\n  public int add(int a, int b) {\n    a = a + b;                      // Noncompliant\n\n    /* additional logic */\n\n    return a;                       // Seems like the parameter is returned as is, what is the point?\n  }\n\n  public static void main(String[] args) {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.add(a, b);                  // Variable "a" will still hold 40 after this call\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  public String name;\n\n  public MyClass(String name) {\n    this.name = name;               // Compliant\n  }\n\n  public int add(int a, int b) {\n    return a + b;                   // Compliant\n  }\n\n  public static void main(String[] args) {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.add(a, b);\n  }\n}\n</pre>', 2, NULL, 'Method parameters, caught exceptions and foreach variables should not be reassigned', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'pitfall', 0, 'HTML'),
(930, 'CallToDeprecatedMethod', 'CallToDeprecatedMethod', 'squid', '<p>Once deprecated, a method should no longer be used as it means\n	that the method might be removed sooner or later.</p>', 1, NULL, 'Avoid use of deprecated method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 11, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(931, 'AssignmentInSubExpressionCheck', 'AssignmentInSubExpressionCheck', 'squid', '<p>\nAssignments within sub-expressions are hard to spot and therefore make the code less readable.\nIt is also a common mistake to write <code>=</code> when <code>==</code> was meant.\nIdeally, expressions should not have side-effects.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nSystem.out.println(i = 42);\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nSystem.out.println(i == 42);\n</pre>\n\n<p>or:</p>\n\n<pre>\ni = 42;\nSystem.out.println(i);\n</pre>\n\n<h2>Exceptions</h2>\n<p>Assignments enclosed in relational expressions are allowed.</p>\n\n<pre>\nBufferedReader br = new BufferedReader(/* ... */);\nString line;\nwhile ((line = br.readLine()) != null) {\n  /* ... */\n}\n</pre>', 2, NULL, 'Assignments should not be made from within sub-expressions', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(932, 'S1221', 'S1221', 'squid', '<p>Naming a method <code>hashcode()</code> is either:</p>\n\n<ul>\n  <li>A bug. Overriding <code>Object.hashCode()</code> was meant and the application does not behave as expected.</li>\n  <li>Done on purpose. The name however will confuse every other developer, who will think it is a bug.</li>\n</ul>\n\n<p>In both cases, the method should be renamed.</p>\n\n<p>The following code:</p>\n\n<pre>\npublic int hashcode() { /* ... */ }    // Non-Compliant\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\n@Override\npublic int hashCode() { /* ... */ }    // Compliant\n</pre>', 3, NULL, 'Methods should not be named "hashcode"', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'pitfall', 0, 'HTML'),
(933, 'S1160', 'S1160', 'squid', '<p>\nUsing checked exceptions forces method callers to deal with errors, either by propagating them or by handling them.\nThis makes those exceptions fully part of the API of the method.\n</p>\n\n<p>\nTo keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.\n</p>\n\n<p>The following code:</p>\n\n<pre>\npublic void delete() throws IOException, SQLException {      // Non-Compliant\n  /* ... */\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic void delete() throws SomeApplicationLevelException {  // Compliant\n  /* ... */\n}\n</pre>\n\nOverriding methods are not checked by this rule and are allowed to throw several checked exceptions.', 2, NULL, 'Public methods should throw at most one checked exception', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'error-handling', 0, 'HTML'),
(934, 'S1220', 'S1220', 'squid', '<p>According to the Java Language Specification:</p>\n\n<blockquote>\nUnnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just beginning development.\n</blockquote>\n\n<p>To enforce this best practice, classes located in default package can no longer be access from named ones since Java 1.4.</p>\n\n<p>The following piece of code:</p>\n\n<pre>\npublic class MyClass { /* ... */ }\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npackage org.example;\n\npublic class MyClass{ /* ... */ }\n</pre>', 2, NULL, 'The default unnamed package should not be used', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(935, 'S1694', 'S1694', 'squid', '<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>\n\n<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the <code>abstract</code> keyword) with a private constructor.</p>\n\n<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\npublic abstract class Animal {\n  abstract void move();\n  abstract void feed();\n}\n\npublic abstract class Color {\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  public int getRed(){\n    return red;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Animal {\n  void move();\n  void feed();\n}\n\npublic class Color {\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  private Color (){\n  }\n\n  public int getRed() {\n    return red;\n  }\n}\n\npublic abstract class Lamp {\n\n  private boolean switchLamp=false;\n  public abstract void glow();\n\n  public void flipSwitch() {\n    switchLamp = !switchLamp;\n    if (switchLamp) {\n       glow();\n    }\n  }\n}\n</pre>', 2, NULL, 'An abstract class should have both abstract and concrete methods', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'convention', 0, 'HTML'),
(936, 'S1695', 'S1695', 'squid', 'A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates that code is structured to avoid NPE''s. \n\nExplicitly throwing <code>NullPointerException</code> forces a method''s callers to explicitly catch it, rather than coding to avoid it. Further, it makes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely throw an NPE.\n\nIf an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation instead.\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\npublic void doSomething (String aString) throws NullPointerException \n{}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething (@NotNull String aString)\n{}\n</pre>', 2, NULL, '"NullPointerException" should not be explicitly thrown', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'pitfall', 0, 'HTML'),
(937, 'S00101', 'S00101', 'squid', '<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class names match a provided regular expression.\n</p>\n\n<p>\nThe following code snippet illustrates this rule when the regular expression value is "^[A-Z][a-zA-Z0-9]*$":\n</p>\n<pre>\npublic class MyFirstClass { ... } // Compliant\n\npublic class mySecondClass { ... }    // Non-Compliant\n</pre>', 2, NULL, 'Class names should comply with a naming convention', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'convention', 0, 'HTML'),
(938, 'S1696', 'S1696', 'squid', '<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can easily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the "is null" branch of the conditional.</p>\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n  try {\n    len += str.length();\n  }\n  catch (NullPointerException e) {\n    log.info("argument was null");\n  }\n  return len;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n\n  if (str != null) {\n    len += str.length();\n  }\n  else {\n    log.info("argument was null");\n  }\n  return len;\n}\n</pre>', 2, NULL, '"NullPointerException" should not be caught', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'error-handling', 0, 'HTML'),
(939, 'S00100', 'S00100', 'squid', '<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all function/method names match a provided regular expression.\n</p>\n\n<h2>\nNoncompliant Code Example\n</h2>\n<p>\nWith default provided regular expression: "^[a-z][a-zA-Z0-9]*$":\n</p>\n<pre>\npublic void Do_Something() {...}\n</pre>\n\n<h2>\nCompliant Solution\n</h2>\n<pre>\npublic void doSomething(int value) {…}\n}\n</pre>\n\n<h2>\nExceptions\n</h2>\n<p>\nOverriding methods are excluded.\n</p>\n<pre>\n@Override\npublic void Do_Something() {...}\n</pre>', 2, NULL, 'Method names should comply with a naming convention', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'convention', 0, 'HTML'),
(940, 'S1697', 'S1697', 'squid', '<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced _only_ if it is null, leading to a guaranteed null pointer dereference.</p>\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\nif (str == null && str.length() == 0) {\n  System.out.println("String is empty");\n}\n\nif (str != null || str.length() > 0) {\n System.out.println("String is not empty");\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (str == null || str.length() == 0) {\n  System.out.println("String is empty");\n}\n\nif (str != null && str.length() > 0) {\n  System.out.println("String is not empty");\n}\n</pre>', 4, NULL, 'Short-circuit logic should be used to prevent null pointer dereferences in conditionals', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 41, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'bug', 0, 'HTML'),
(941, 'S1223', 'S1223', 'squid', 'Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or was the methods supposed to be a constructor.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public Foo() {...}\n  public int Foo(String label) {...} // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n  public Foo() {...}\n  public int foo(String label) {...} // Compliant\n}\n</pre>', 2, NULL, 'Non-constructor methods should not have the same name as the enclosing class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'pitfall', 0, 'HTML'),
(942, 'S1698', 'S1698', 'squid', '<p>Using the equality (<code>==</code>) and inequality (<code>!=</code>) operators to compare two objects does not check to see if they have the same values. Rather it checks to see if both object references point to exactly the same object in memory. The vast majority of the time, this is not what you want to do. Use the .equals() method to compare the values of two objects or to compare a string object to a string literal.</p>\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\nString str1 = "blue";\nString str2 = "blue";\nString str3 = str1;\n\nif (str1 == str2)\n{\n  System.out.println("they''re both ''blue''"); // this doesn''t print because the objects are different\n}\n\nif (str1 == "blue")\n{\n  System.out.println("they''re both ''blue''"); // this doesn''t print because the objects are different\n}\n\nif (str1 == str3)\n{\n  System.out.println("they''re the same object"); // this prints\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString str1 = "blue";\nString str2 = "blue";\nString str3 = str1;\n\nif (str1.equals(str2))\n{\n  System.out.println("they''re both ''blue''"); // this prints\n}\n\nif (str1.equals("blue"))\n{\n  System.out.println("they''re both ''blue''"); // this prints\n}\n\nif (str1 == str3)\n{\n  System.out.println("they''re the same object"); // this still prints, but it''s probably not what you meant to do\n}\n</pre>', 2, NULL, 'Objects should be compared with "equals()"', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'error-handling', 0, 'HTML'),
(943, 'StringEqualityComparisonCheck', 'StringEqualityComparisonCheck', 'squid', '<p>\nString literals, just like any other <code>Object</code>, should be compared using the <code>equals()</code> method.\nUsing <code>==</code> and <code>!=</code> does not work in general.\n</p>\n\n<p>The following code:</p>\n\n<pre>\nif (variable == "foo") { /* ... */ }         // Non-Compliant\nif (variable != "foo") { /* ... */ }         // Non-Compliant\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\nif ("foo".equals(variable)) { /* ... */ }    // Compliant\nif (!"foo".equals(variable)) { /* ... */ }   // Compliant\n</pre>\n\n<p>\n  This rule is deprecated, use {rule:squid:S1698} instead.\n</p>', 3, NULL, 'Strings should be compared using equals()', 'DEPRECATED', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'bug', 0, 'HTML'),
(944, 'S1168', 'S1168', 'squid', '<p>\nReturning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more complex and less readable.\nMoreover, in many cases, <code>null</code> is used as a synonym for empty.\n</p>\n\n<p>The following code:</p>\n\n<pre>\npublic static Result[] getResults() {\n  return null;                             // Non-Compliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n\n  if (results != null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic static Result[] getResults() {\n  return new Result[0];                    // Compliant\n}\n\npublic static void main(String[] args) {\n  for (Result result: getResults()) {\n    /* ... */\n  }\n}\n</pre>\n\n<p>This rule also applies to collections:</p>\n\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return null;                             // Non-Compliant\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return Collections.emptyList();           // Compliant\n}\n</pre>', 2, NULL, 'Empty arrays and collections should be returned instead of null', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(945, 'HiddenFieldCheck', 'HiddenFieldCheck', 'squid', '<p>\nShadowing fields with a local variable is a bad practice reducing code readability: It makes it confusing to know whether the field or the variable is and should be accessed.\n</p>\n\n<p>\nThe following code illustrates this rule:\n</p>\n\n<pre>\nclass Foo {\n  public int myField;\n\n  public Foo(int myField) {                   // Compliant - method parameters are not checked\n    this.myField = myField;\n  }\n\n  @Override\n  public String toString() {\n    int myField = 0;                          // Non-Compliant - should be renamed\n    return "Foo{MyField: " + myField + "}";\n  }\n}\n</pre>', 2, NULL, 'Local variables should not shadow class fields', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'pitfall', 0, 'HTML'),
(946, 'S1163', 'S1163', 'squid', '<p>\nThrowing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code> block.\nThe masked''s exception message and stack trace will be lost.\n</p>\n\n<p>The following code:</p>\n\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n  throw new RuntimeException();                          // Non-Compliant - will mask the IllegalArgumentException\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */                                         // Compliant\n}\n</pre>', 2, NULL, 'Exceptions should not be thrown in finally blocks', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 40, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, NULL, 0, 'HTML'),
(947, 'S1166', 'S1166', 'squid', '<p>\nWhen handling a caught exception, two mandatory informations should be logged:\n</p>\n\n<ul>\n  <li>Some context to ease the reproduction of the issue.</li>\n  <li>The original''s exception, for its message and stack trace.</lu>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n // Noncompliant - exception is lost\ntry { /* ... */ } catch (Exception e) { LOGGER.info("context"); }\n\n// Noncompliant - context is required\ntry { /* ... */ } catch (Exception e) { LOGGER.info(e); }\n\n// Noncompliant - exception is lost (only message is preserved)\ntry { /* ... */ } catch (Exception e) { LOGGER.info(e.getMessage()); }\n\n// Noncompliant - exception is lost\ntry { /* ... */ } catch (Exception e) { throw new RuntimeException("context"); }\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\ntry { /* ... */ } catch (Exception e) { LOGGER.info("context", e); }\n\ntry { /* ... */ } catch (Exception e) { throw new RuntimeException("context", e); }\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>It is allowed to let the exception propagate.</p>\n\n<pre>\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;\n} catch (Exception e) {\n  // Conversion into unchecked exception is also allowed\n  throw new RuntimeException(e);\n}\n</pre>\n\n<p>\n<code>InterruptedException</code>, <code>NumberFormatException</code>, <code>ParseException</code> and <code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes.\nAs they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are correctly handled.\n</p>\n\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle "e" here\n  myInteger = 0;\n}\n</pre>', 2, NULL, 'Exception handlers should preserve the original exception', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 40, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'error-handling', 0, 'HTML'),
(948, 'S1165', 'S1165', 'squid', '<p>\nExceptions are meant to represent the application''s state at which an error occurred.\n</p>\n\n<p>Making all fields final ensures that this state:</p>\n\n<ul>\n  <li>Will be fully defined at the same time the exception is instantiated.</li>\n  <li>Won''t be updated or corrupted by some bogus error handler.</li>\n</ul>\n\n<p>This will enable developers to quickly understand what went wrong.</p>\n\n<p>The following code:</p>\n\n<pre>\npublic class MyException extends Exception {\n\n  private int status;                               // Non-Compliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic class MyException extends Exception {\n\n  private final int status;                         // Compliant\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n</pre>', 2, NULL, 'Exception classes should be immutable', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 40, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'error-handling', 0, 'HTML'),
(949, 'ArchitecturalConstraint', 'ArchitecturalConstraint', 'squid', '<p>A source code comply to an architectural model when it fully\n	adheres to a set of architectural constraints. A constraint allows to\n	deny references between classes by pattern.</p>\n<p>You can for instance use this rule to :</p>\n<ul>\n	<li>forbid access to **.web.** from **.dao.** classes</li>\n	<li>forbid access to java.util.Vector, java.util.Hashtable and\n		java.util.Enumeration from any classes</li>\n	<li>forbid access to java.sql.** from **.ui.** and **.web.**\n		classes</li>\n</ul>', 2, NULL, 'Architectural constraint', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 'HTML'),
(950, 'S134', 'S134', 'squid', '<p>\nNested <code>if</code>, <code>for</code>, <code>while</code> and <code>try</code> statements is a key ingredient for making what''s known as "Spaghetti code".\nSuch code is hard to read, refactor and therefore maintain.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>The following code snippet illustrates this rule with the default threshold of 3.</p>\n\n<pre>\npublic void process() {\n  if (condition1) {                  // Compliant - depth = 1\n    /* ... */\n    if (condition2) {                // Compliant - depth = 2\n      /* ... */\n      for(int i = 0; i < 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n        /* ... */\n        if (condition4) {            // Non-Compliant - depth = 4\n          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            /* ... */\n          }\n          return;\n        }\n      }\n    }\n  }\n}\n</pre>', 1, NULL, 'Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 36, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'brain-overload', 0, 'HTML'),
(951, 'S1172', 'S1172', 'squid', '<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvoid doSomething(int a, int b) {     // "b" is unused\n  compute(a);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nvoid doSomething(int a) { \n  compute(a);\n}\n</pre>\n\n<h2>Exceptions</h2>\n\n<h3>For Java</h3>\nMethods overriding or implementing another one should be excluded\n\n<pre>\n@override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n</pre>', 2, NULL, 'Unused method parameters should be removed', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'unused', 0, 'HTML'),
(952, 'S1170', 'S1170', 'squid', '<p>\nMaking a constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every instance of the class,\nuselessly increasing the amount of memory required to execute the application.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;           // Non-Compliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (&sect; 8.7) or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (&sect; 15.28).</blockquote>', 2, NULL, 'Constants should be declared "final static" rather than merely "final"', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 29, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(953, 'S1171', 'S1171', 'squid', '<p>\nNon-static initializers are rarely used, and can be confusing for most developers.\nWhen possible, they should be refactored into standard constructors or field initializers.\n</p>\n\n<p>The following code:</p>\n\n<pre>\nclass MyClass {\n  private static final Map<String, String> MY_MAP = new HashMap<String, String>() {\n\n    // Non-Compliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put("a", "b");\n    }\n\n  };\n}\n</pre>\n\n<p>could be refactored using Guava into:</p>\n\n<pre>\nclass MyClass {\n  // Compliant\n  private static final Map<String, String> MY_MAP = ImmutableMap.of("a", "b");\n}\n</pre>', 2, NULL, 'Non-static class initializers should not be used', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, NULL, 0, 'HTML'),
(954, 'S1175', 'S1175', 'squid', '<p><code>Object.finalize()</code> is called by the Garbage Collector sometime after the object became unreferenced.</p>\n\n<p>Overloading this method is misleading:</p>\n<ul>\n  <li>The overloaded method will not be called by the Garbage Collector.</li>\n  <li>Users are not expected to call <code>Object.finalize()</code> and will get confused.</li>\n</ul>\n\n<p>Another name should be picked for the method.</p>\n\n<p>The following code:</p>\n\n<pre>\npublic void finalize(int someParameter) {        // Non-Compliant\n  /* ... */\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic void someBetterName(int someParameter) {  // Compliant\n  /* ... */\n}\n</pre>', 2, NULL, 'Object.finalize() should not be overloaded (by adding method parameters)', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'pitfall', 0, 'HTML'),
(955, 'S1174', 'S1174', 'squid', '<p>\nThe contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.\nMaking this method public is misleading, because it implies that any caller can use it.\n</p>\n\n<p>The following code snippet illustrates this rule:</p>\n\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Non-Compliant\n    /* ... */\n  }\n}\n</pre>', 2, NULL, 'Object.finalize() should remain protected (versus public) when overriding', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(956, 'RedundantThrowsDeclarationCheck', 'RedundantThrowsDeclarationCheck', 'squid', '<p>\nAn exception in a <code>throws</code> declaration in Java is redundant if:\n</p>\n\n<ul>\n  <li>It is listed multiple times</li>\n  <li>It is a subclass of another listed exception</li>\n  <li>It is a <code>RuntimeException</code>, or one of its descendants</li>\n</ul>\n\n<p>\nThe following code:\n</p>\n\n<pre>\nvoid foo() throws MyException, MyException {}  // Non-Compliant - should be listed once\nvoid bar() throws Throwable, Exception {}      // Non-Compliant - Exception is a subclass of Throwable\nvoid baz() throws RuntimeException {}          // Non-Compliant - RuntimeException can always be thrown\n</pre>\n\n<p>\nshould be refactored into:\n</p>\n\n<pre>\nvoid foo() throws MyException {}               // Compliant\nvoid bar() throws Throwable {}                 // Compliant\nvoid baz() {}                                  // Compliant\n</pre>', 2, NULL, 'Throws declarations should not be redundant', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, 'error-handling', 0, 'HTML'),
(957, 'CallToFileDeleteOnExitMethod', 'CallToFileDeleteOnExitMethod', 'squid', '<p>Usage of method File#deleteOnExit() is not recommended for following reasons:</p>\n<ul>\n  <li>The deletion occurs only in case of normal JVM shutdown but not when the JVM is killed or crashes</li>\n  <li>For each file handler, the memory associated to this handler is released only at the end of the process</li>\n</ul>', 2, NULL, 'Do not use File#deleteOnExit()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 29, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(958, 'LabelsShouldNotBeUsedCheck', 'LabelsShouldNotBeUsedCheck', 'squid', '<p>\nLabels are not commonly used in Java, and many developers do not understand how they work.\nMoreover, their usage make the control flow harder to follow, which reduces the code''s readability.\n</p>\n\n<p>\nThe following code:\n</p>\n\n<pre>\nint matrix[][] = {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row = 0; row < matrix.length; row++) {   // Non-Compliant\n  for (int col = 0; col < matrix[row].length; col++) {\n    if (col == row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n</pre>\n\n<p>\nshould be refactored into:\n</p>\n\n<pre>\nfor (int row = 1; row < matrix.length; row++) {          // Compliant\n  for (int col = 0; col < row; col++) {\n    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8\n  }\n}\n</pre>', 2, NULL, 'Labels should not be used', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(959, 'ForLoopCounterChangedCheck', 'ForLoopCounterChangedCheck', 'squid', '<p>\nLoop counters should not be modified in the body of the loop.\nHowever other loop control variables representing logical values may be modified in the loop, for example a flag to indicate that something has been completed, which is then tested in the for statement.\n</p>\n\n<p>\nThe following code:\n</p>\n\n<pre>\nString[] names = new String[]{ "Jack", "Jim", null, "John" };\nfor (int i = 0; i < names.length; i++) {\n  if (names[i] == null) {\n    i = names.length;                                             // Non-Compliant\n  } else {\n    System.out.println(names[i]);\n  }\n}\n</pre>\n\n<p>\nshould be refactored into:\n</p>\n\n<pre>\nString[] names = new String[]{ "Jack", "Jim", null, "John" };\nfor (String name: names) {\n  if (name == null) {\n    break;                                                        // Compliant\n  }\n  System.out.println(name);\n}\n</pre>', 2, NULL, 'Loop counters should not be assigned to from within the loop body', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'bug', 0, 'HTML'),
(960, 'S1488', 'S1488', 'squid', '<p>Declaring a variable only to immediately return or throw it is a bad practice.\nSome developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to know exactly what will be returned.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>', 1, NULL, 'Variables should not be declared and then immediately returned or thrown', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, NULL, 0, 'HTML'),
(961, 'S1700', 'S1700', 'squid', '<p>It''s confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider the common practice of naming a class instance for the class itself.</p>\n\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular aspect of the class it represents or holds.</p>\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n</pre>\n\n<h2>Exception</h2>\n\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type.</p>\n<pre>\npublic class Foo {\n...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null){\n      foo = new Foo();\n    }\n    return foo;\n  }\n...\n}\n</pre>', 2, NULL, 'A field should not duplicate the name of its containing class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'brain-overload', 0, 'HTML'),
(962, 'S1206', 'S1206', 'squid', '<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>\n\n<blockquote>\nIf two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two objects must produce the same integer result.\nIt is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the <code>hashCode</code> method on each of the two objects must produce distinct integer results.\nHowever, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hashtables.\n</blockquote>\n\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nclass MyClass {    // Non-Compliant - should also override "hashCode()"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>', 4, NULL, '"equals(Object obj)" and "hashCode()" should be overridden in pairs', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'bug', 0, 'HTML'),
(963, 'S1701', 'S1701', 'squid', '<p>It''s confusing to have a class member with the same name as a method in the class.</p>\n\n<p>Typically this situation indicates that the method is poorly named; method names should be action-oriented, and thus contain a verb, which is unlikely in the case where both a method and a member have the same name. However, renaming a public method could be disruptive to callers. Therefore renaming the member is the recommended action.</p>\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\npublic class Foo {\n\n  private string fiz;\n  public String fiz() {\n    // do something...\n  }\n\n  private void doSomething() {\n\n    String tmp = fiz; // is this what was intended? Should this have been a call to fiz()?\n\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  private string fizbah; // member has been renamed\n  public String fiz() {\n    // do something...\n  }\n\n  private void doSomething() {\n\n    String tmp = fiz; // results in a compile error\n    String tmp2 = fiz(); // no question now what was intended\n  }\n}\n</pre>', 2, NULL, 'Fields should not duplicate method names', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'brain-overload', 0, 'HTML'),
(964, 'SwitchLastCaseIsDefaultCheck', 'SwitchLastCaseIsDefaultCheck', 'squid', '<p>\nThe requirement for a final default clause is defensive programming.\nThis clause should either take appropriate action or contain a suitable comment as to why no action is taken.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\nswitch (state) {                       // Non-Compliant - must have a default case\n  case 0:\n  case 1:\n    System.out.println("0 or 1!");\n    break;\n}\n\nswitch (state) {\n  default:                             // Non-Compliant - must be last for better readability\n    throw new IllegalStateException();\n  case 0:\n  case 1:\n    System.out.println("0 or 1!");\n    break;\n}\n\nswitch (state) {\n  case 0:\n  case 1:\n    System.out.println("0 or 1!");\n    break;\n  default:                             // Compliant\n    throw new IllegalStateException();\n</pre>', 2, NULL, 'Switch statements should end with a default case', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(965, 'RightCurlyBraceDifferentLineAsNextBlockCheck', 'RightCurlyBraceDifferentLineAsNextBlockCheck', 'squid', '<p>\nSharing some coding conventions is a key point to make it possible for a team to efficiently collaborate.\nThis rule make it mandatory to place closing curly braces and next <code>else</code>, <code>catch</code> or <code>finally</code> keywords on two different lines.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Non-Compliant\n    doSomethingElse();\n  }\n  else {                               // Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {              // Non-Compliant\n    log(e);\n  }\n  finally {                            // Compliant\n    closeConnection();\n  }\n}\n</pre>', 2, NULL, 'Right curly brace and next "else", "catch" and "finally" keywords should be located on two different lines', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(966, 'S1201', 'S1201', 'squid', '<p>\n"equals" as a method name should be exclusively used to override <code>Object.equals(Object)</code> to prevent any confusion.\n</p>\n\n<p>\nIt is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save class comparison check.\nHowever, this will not work as expected.\n</p>\n\n<p>For example:</p>\n\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {                    // Non-Compliant - "equals" method which does not override Object.equals(Object)\n    return o != null && o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));                  // Will display "false" because "o2" is of type "Object" and not "MyClass"\n  }\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {                     // Compliant - overrides Object.equals(Object)\n    if (o == null || !(o instanceof MyClass)) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n\n  /* ... */\n}\n</pre>', 3, NULL, 'Methods named "equals" should override Object.equals(Object)', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'pitfall', 0, 'HTML'),
(967, 'S1200', 'S1200', 'squid', '<p>\nAccording to the Single Responsibility Principle, introduced by Robert C. Martin in his book "Principles of Object Oriented Design", a class should have only one responsibility:\n</p>\n\n<blockquote>\nIf a class has more than one responsibility, then the responsibilities become coupled.\nChanges to one responsibility may impair or inhibit the class’ ability to meet the others.\nThis kind of coupling leads to fragile designs that break in unexpected ways when changed.\n</blockquote>\n\n<p>\nClasses which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.\nNested classes dependencies are not counted as dependencies of the outer class.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>In case the threshold is set to 5</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>', 2, NULL, 'Classes should not be coupled to too many other classes (Single Responsibility Principle)', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2h', NULL, NULL, 'brain-overload', 0, 'HTML'),
(968, 'ModifiersOrderCheck', 'ModifiersOrderCheck', 'squid', '<p>\nThe Java Language Specification recommends listing modifiers in the following order:\n</p>\n\n<ul>\n  <li>Annotations</li>\n  <li><code>public</code></li>\n  <li><code>protected</code></li>\n  <li><code>private</code></li>\n  <li><code>abstract</code></li>\n  <li><code>static</code></li>\n  <li><code>final</code></li>\n  <li><code>transient</code></li>\n  <li><code>volatile</code></li>\n  <li><code>synchronized</code></li>\n  <li><code>native</code></li>\n  <li><code>strictfp</code></li>\n</ul>\n\n<p>\nNot following this convention has no technical impact, but will reduce the code''s readability because most developers are used to the standard order.\n</p>\n\n<p>\nThe following code:\n</p>\n\n<pre>\nstatic public void main(String[] args) {   // Non-Compliant\n}\n</pre>\n\n<p>\nshould be refactored into:\n</p>\n\n<pre>\npublic static void main(String[] args) {   // Compliant\n}\n</pre>', 1, NULL, 'Modifiers should be declared in the correct order', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'convention', 0, 'HTML'),
(969, 'ClassCyclomaticComplexity', 'ClassCyclomaticComplexity', 'squid', '<p>The Cyclomatic Complexity is measured by the number of (&&, ||)\n	operators and (if, while, do, for, ?:, catch, switch, case, return,\n	throw) statements in the body of a class plus one for each constructor,\n	method (but not getter/setter), static initializer, or instance\n	initializer in the class. The last return stament in method, if exists,\n	is not taken into account.</p>\n<p>\n	Even when the Cyclomatic Complexity of a class is very high, this\n	complexity might be well distributed among all methods. Nevertheless,\n	most of the time, a very complex class is a class which breaks the <a\n		href=''http://en.wikipedia.org/wiki/Single_responsibility_principle''>Single\n		Responsibility Principle</a> and which should be re-factored to be split\n	in several classes.\n</p>', 2, NULL, 'Avoid too complex class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'brain-overload', 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(970, 'S1181', 'S1181', 'squid', '<p>\n<code>Throwable</code> is the superclass of all errors and exceptions in Java.\n<code>Error</code> is the superclass of all errors which are not meant to be caught by applications.\n</p>\n\n<p>\nCatching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> or <code>InternalError</code> from which an application should not attempt to recover.\n</p>\n\n<p>Only <code>Exception</code> and its subclasses should be caught.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ } \n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\ntry { /* ... */ } catch (Exception e) { /* ... */ }  \ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }  \ntry { /* ... */ } catch (MyException e) { /* ... */ }  \n</pre>', 4, NULL, 'Throwable and Error classes should not be caught', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 40, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'error-handling', 0, 'HTML'),
(971, 'S1182', 'S1182', 'squid', '<p>The usual convention for <code>Object.clone()</code> according to Oracle''s Javadoc is that:</p>\n<ul>\n  <li><code>x.clone() != x</code></li>\n  <li><code>x.clone().getClass() == x.getClass()</code></li>\n  <li><code>x.clone().equals(x)</code></li>\n</ul>\n\n<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>\n<ul>\n  <li><code>super.clone()</code> returns a new object instance</li>\n  <li><code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on</li>\n  <li><code>Object.clone()</code> performs a shallow copy of the object''s state</li>\n</ul>\n\n<p>For example, the following code:</p>\n\n<pre>\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Non-Compliant - should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println("Hello, world!");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated\n  }\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println("Hello, world!");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Displays "Hello, world!" as expected. Invariant #2 is satisfied\n  }\n}\n</pre>', 2, NULL, 'super.clone() should be called when overriding Object.clone()', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, NULL, 0, 'HTML'),
(972, 'S1186', 'S1186', 'squid', '<p>There are three reasons for a method not to have a method body:</p>\n\n<ul>\n  <li>It is an unintentional omission, and should be fixed.</li>\n  <li>It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown.</li>\n  <li>The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override.</li>\n</ul>\n\n<p>The following code snippet:</p>\n\n<pre>\n// Non-Compliant\npublic void doSomething() {\n}\n</pre>\n\nshould be refactored into:\n\n<pre>\n// Compliant\n@Override\npublic void doSomethingElse() {\n  // Do nothing because of X and Y.\n}\n</pre>\n\nor:\n\n<pre>\n// Compliant\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n</pre>\n\n<p>Empty methods not having any nested comments are tolerated in Abstract classes as those empty methods are usual when implementing the visitor pattern.</p>', 2, NULL, 'Methods should not be empty', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, NULL, 0, 'HTML'),
(973, 'S1185', 'S1185', 'squid', '<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading.</p>\n\n<p>The following code snippet illustrates this rule:</p>\n\n<pre>\npublic void doSomething() {                     // Non-Compliant\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {         // Non-Compliant\n  return super.isLegal(action);\n}\n\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>', 1, NULL, 'Overriding methods should do more than simply call the same method in the super class', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'brain-overload', 0, 'HTML'),
(974, 'S1602', 'S1602', 'squid', '<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n x -> {System.out.println(x+1);}\n(a, b) -> { return a + b; }\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n x -> System.out.println(x+1)\n(a, b) -> a + b\n</pre>', 2, NULL, 'Lamdbas containing only one statement should not nest this statement in a block', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'java8', 0, 'HTML'),
(975, 'S1188', 'S1188', 'squid', '<p>\nAnonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become unreadable.\n</p>', 2, NULL, 'Lambdas and anonymous classes should not have too many lines', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'brain-overload', 0, 'HTML'),
(976, 'S1604', 'S1604', 'squid', '<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may seem unwieldy and unclear.</p>\n\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.map(new Mapper<String,String>() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.map(element -> new StringBuilder(element).reverse().toString());\n</pre>', 2, NULL, 'Anonymous inner classes containing only one method should become lambdas', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'java8', 0, 'HTML'),
(977, 'UselessImportCheck', 'UselessImportCheck', 'squid', '<p>\nThe imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.\nUnused and useless imports should not occur if that is the case.\nLeaving them in reduces the code''s readability, since their presence can be confusing.\n</p>\n\n<p>The following code snippet illustrates this rule:</p>\n\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Non-Compliant - java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Non-Compliant - same package files are always implicitly imported\nimport java.io.File;            // Non-Compliant - File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Non-Compliant - ''SomeType'' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>', 1, NULL, 'Useless imports should be removed', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'unused', 0, 'HTML'),
(978, 'S1481', 'S1481', 'squid', '<p>\nIf a local variable is declared but not used in the program, it can be considered dead code and should therefore be removed.\nThis will improve maintainability because developers will not wonder what the variable is used for.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int compute(int a){\n  int foo = 6;\n  return a * 4;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int compute(int a){\n  return a * 4;\n}\n</pre>', 2, NULL, 'Unused local variables should be removed', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'unused', 0, 'HTML'),
(979, 'MissingDeprecatedCheck', 'MissingDeprecatedCheck', 'squid', '<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as IDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be refactored.</p>\n\n<p>The following code illustrates this rule:</p>\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\nclass MyClass {\n\n@Deprecated\npublic void foo1() {\n}\n\n/**\n* @deprecated\n*/\npublic void foo2() {    // Non-Compliant\n}\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n/**\n* @deprecated (when, why, refactoring advice...)\n*/\n@Deprecated\npublic void foo1() {\n}\n\n/**\n* @deprecated (when, why, refactoring advice...)\n*/\n@Deprecated\npublic void foo2() {    // Non-Compliant\n}\n\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to it.</p>\n\n<pre>\n/**\n* @deprecated (when, why, &etc...)\n*/\n@Deprecated\nclass Qix  {\n\npublic void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n* @deprecated (when, why, &etc...)\n*/\n@Deprecated\ninterface Plop {\n\nvoid bar();\n\n}\n</pre>', 2, NULL, 'Deprecated elements should have both the annotation and the Javadoc tag', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(980, 'XPath', 'XPath', 'squid', '<p>\nThis rule allows to define some homemade Java rules with help of an XPath expression.\n</p>\n\n<p>\nIssues are created depending on the return value of the XPath expression. If the XPath expression returns:\n</p>\n<ul>\n  <li>a single or list of AST nodes, then a line issue with the given message is created for each node</li>\n  <li>a boolean, then a file issue with the given message is created only if the boolean is true</li>\n  <li>anything else, no issue is created</li>\n</ul>\n\n<p>\nHere is an example of an XPath expression to log an issue on each if statement : //ifStatement\n</p>', 2, NULL, 'XPath rule', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1, 'HTML'),
(981, 'S1301', 'S1301', 'squid', '<p>\n<code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.\nFor just one or two cases however, the code will be more readable with <code>if</code> statements.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>', 1, NULL, '"switch" statements should have at least 3 cases', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(982, 'ObjectFinalizeOverridenCheck', 'ObjectFinalizeOverridenCheck', 'squid', '<p>\nThis Object.finalize() method is called by the garbage collector on an object when garbage collection determines that there are no more references to the object.\nBut there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed.\nIt can be few microseconds to few minutes later.\nSo when some system resources need to be disposed by an object it''s better to not rely on this asynchronous mechanism to dispose them.\n</p>\n\n<p>\nThe following piece of code illustrates this rule:\n</p>\n\n<pre>\npublic class MyClass {\n\n  protected void finalize() {\n    releaseSomeResources();     // Non-Compliant\n  }\n\n}\n</pre>', 3, NULL, 'The Object.finalize() method should never be overriden', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, NULL, 0, 'HTML'),
(983, 'LowerCaseLongSuffixCheck', 'LowerCaseLongSuffixCheck', 'squid', '<p>\nThe long suffix should always be written in upper case, i.e. ''L'', as the lower case ''l'' can easily be confused with the digit one ''1''.\n</p>\n\n<p>\nThe following code:\n</p>\n\n<pre>\nlong n = 10l;  // Non-Compliant - easily confused with one zero one\n</pre>\n\n<p>\nshould be refactored into:\n</p>\n\n<pre>\nlong n = 10L;  // Compliant\n</pre>', 2, NULL, 'Long suffix "L" should be upper case', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'convention', 0, 'HTML'),
(984, 'S1710', 'S1710', 'squid', '<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that''s no longer necessary, allowing for cleaner, more readable code.</p>\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\n@SomeAnnotations({\n@SomeAnnotation(..a..),\n@SomeAnnotation(..b..),\n@SomeAnnotation(..c..),\n})\npublic class SomeClass {\n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n...\n}\n</pre>', 3, NULL, 'Annotation repetitions should not be wrapped', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'java8', 0, 'HTML'),
(985, 'S1310', 'S1310', 'squid', '<p>This rule allows to track usages of this PMD suppression comment filtering mechanism.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// NOPMD\n</pre>', 1, NULL, 'NOPMD suppression comment filters should not be used', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(986, 'S1313', 'S1313', 'squid', '<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>\n\n<ul>\n  <li>a recompile is required if the address changes</li>\n  <li>it forces the same address to be used in every environment (dev, sys, qa, prod)</li>\n  <li>it places the responsibility of setting the value to use in production on the shoulders of the developer</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString ip = "127.0.0.1";\nSocket socket = new Socket(ip, 6667);\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString ip = System.getProperty("myapplication.ip");\nSocket socket = new Socket(ip, 6667);\n</pre>', 2, NULL, 'IP addresses should not be hardcoded', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, 'security', 0, 'HTML'),
(987, 'S1312', 'S1312', 'squid', '<p>Whatever is the logging framework (logback, log4j, commons-logging, java.util.logging, ...), a logger should be:</p>\n\n<ul>\n  <li><code>private</code>: Never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own logger.</li>\n  <li><code>static</code>: Not dependent on an instance of a class (an object). When logging something, contextual information can of course be provided in the messages but the logger should be created at class level to prevent creating a logger along with each object.</li>\n  <li><code>final</code>: Be created once and only once per class.</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  public Logger logger = LoggerFactory.getLogger(Foo.class);         // Noncompliant\n\n  public void doSomething() {\n    /* ... */\n  }\n}\n\npublic class Bar {\n  public static void main(String[] args) {\n    Foo foo = new Foo();\n    foo.logger.info("Program started");\n    foo.doSomething();\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private static Logger LOGGER = LoggerFactory.getLogger(Foo.class); // Compliant\n\n  public void doSomething() {\n    /* ... */\n  }\n}\n\npublic class Bar {\n  private static Log LOGGER = LogFactory.getLogger(Bar.class);       // Compliant\n\n  public static void main(String[] args) {\n    LOGGER.info("Program started");\n    Foo foo = new Foo();\n    foo.run();\n  }\n}\n</pre>', 2, NULL, 'Loggers should be "private static final" and should share a naming convention', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'convention', 0, 'HTML'),
(988, 'S1118', 'S1118', 'squid', '<p>\nUtility classes, which are a collection of static members, are not meant to be instantiated.\nThey should therefore not have public constructors.\n</p>\n\n<p>\nJava adds an implicit public constructor to every class which does not define at least one explicitly.\nHence, at least one non-public constructor should be defined.\n</p>\n\n<p>The following code:</p>\n\n<pre>\nclass StringUtils { // Non-Compliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>', 2, NULL, 'Utility classes should not have a public constructor', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '30min', NULL, NULL, NULL, 0, 'HTML'),
(989, 'UnusedProtectedMethod', 'UnusedProtectedMethod', 'squid', '<p>Protected methods that are never used by any classes in the same\n  project are strongly suspected to be dead code. Dead code means\n  unnecessary, inoperative code that should be removed. This helps in\n  maintenance by decreasing the maintained code size, making it easier to\n  understand the program and preventing bugs from being introduced.</p>\n<p>In the following case, unused protected methods are not\n  considered as dead code by SonarQube :</p>\n<ul>\n  <li>Protected methods which override a method from a parent class.</li>\n  <li>Protected methods of an abstract class.</li>\n</ul>', 2, NULL, 'Unused protected method', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'unused', 0, 'HTML'),
(990, 'S1319', 'S1319', 'squid', '<p>\nThe purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide all implementation details.\nImplementating classes must be used to instantiate a new collection, but the result of an instantiation should immediately be stored in a variable whose type is a Java Collection interface.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - "employees" should have type "Set" rather than "HashSet"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>', 2, NULL, 'Declarations should use Java collection interfaces such as "List" rather than specific implementation classes such as "LinkedList"', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(991, 'S1318', 'S1318', 'squid', '<p>Inexperienced Java developers might expect the <code>Object.equals(Object obj)</code> method to correctly handle the case where the left hand side is null, but that is not the case.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (variable.equals(null)) { /* ... */ }   // Noncompliant - "variable" is really null, a NullPointerException is thrown\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == null) { /* ... */ }        // Compliant\n</pre>', 3, NULL, '"object == null" should be used instead of "object.equals(null)"', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, NULL, 0, 'HTML'),
(992, 'S1452', 'S1452', 'squid', '<p>\n  Using a wildcard as a return type implicitly means that the return parameter should be considered as real-only but without any way to enforce this contract.\n</p>\n<p>\n  Let''s take the example of method returning a "List&lt;&#63; extends Animal&gt;". Is it possible on this list to add a Dog, a Cat, ... we simply don''t know. The consumer of a method should not have to deal with such disruptive questions.\n</p>\n\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;? extends Animal&gt; getAnimals(){...}\n</pre>\n\n<h2>Compliant solution</h2>\n<pre>\n//First Solution: the list can contain any kind of animals\nList&lt;Animal&gt; getAnimals(){...}\n\n//Second Solution: the list can contain only one type of animal\nList&lt;E&gt; getAnimals(){...} //Where E extends Animal in the signature of the nesting class\n</pre>', 2, NULL, 'Generic wildcard types should not be used in return parameters', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, NULL, 0, 'HTML'),
(993, 'S1451', 'S1451', 'squid', '<p>\nEach source file should start with a header stating file ownership and the license which must be used to distribute the application.\nThis rule must be fed with the header text which is expected at the beginning of every file.\n</p>\n\n<p>For example, for SonarSource''s open source softwares, the <code>headerFormat</code> property must be set to:</p>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>', 4, NULL, 'Copyright and license headers should be defined in all source files', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 22, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'convention', 0, 'HTML'),
(994, 'IndentationCheck', 'IndentationCheck', 'squid', '<p>\nProper indentation is a simple and effective way to improve the code''s readability.\nConsistent indentation among developers also reduces the differences that are committed to source control systems, making code reviews easier.\n</p>\n\n<p>The following code illustrates this rule with an indentation level of 2:</p>\n\n<pre>\nclass Foo {\n  public int a; // Compliant\npublic int b;   // Non-Compliant\n}\n</pre>', 2, NULL, 'Source code should be correctly indented', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(995, 'CommentedOutCodeLine', 'CommentedOutCodeLine', 'squid', '<p>Here are the main reasons why commented code is a code smell :</p>\n<ul>\n    <li>It always raises more questions than it gives answers</li>\n    <li>Everybody will forget very quickly how relevant the commented code is</li>\n    <li>This is distraction when going down the code as it stops the flow of eyes</li>\n    <li>It is a bad SCM engine : Subversion, CVS and Git are really more trustworthy !</li>\n    <li>The simple fact of understanding why code was commented out in the first place can take a lot of time</li>\n</ul>', 2, NULL, 'Avoid commented-out lines of code', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, 'unused', 0, 'HTML'),
(996, 'S1315', 'S1315', 'squid', '<p>This rule allows to track usages of this Checkstyle suppression comment filtering mechanism.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// CHECKSTYLE:OFF\n</pre>', 1, NULL, 'CHECKSTYLE:OFF suppression comment filters should not be used', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, NULL, 0, 'HTML'),
(997, 'S1314', 'S1314', 'squid', '<p>\nInteger literals starting with a zero are octal rather than decimal values.\nWhile using octal values in Java is fully supported, most developers do not have experience with them.\nThey may not recognize octal values as such, mistaking them instead for decimal values.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myNumber = 010;   // myNumber will hold 8, not 10 - was this really expected?\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nint myNumber = 8;\n</pre>', 2, NULL, 'Octal values should not be used', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'pitfall', 0, 'HTML'),
(998, 'S1317', 'S1317', 'squid', '<p>\n  Instantiating a StringBuilder or a StringBuffer with a character is misleading because most Java developers would expect the character to be the initial value of the StringBuffer.\n</p>\n<p>\n  What actually happens is that the int representation of the character is used to determine the initial size of the StringBuffer.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nStringBuffer foo = new StringBuffer(''x'');   //equivalent to StringBuffer foo = new StringBuffer(120);\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nStringBuffer foo = new StringBuffer("x");\n</pre>', 2, NULL, 'StringBuilder and StringBuffer should not be instantiated with a character', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, NULL, 0, 'HTML'),
(999, 'S1656', 'S1656', 'squid', '<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value was intended for the assignment instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>', 2, NULL, 'Variables should not be self-assigned', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '3min', NULL, NULL, 'bug', 0, 'HTML'),
(1000, 'S1862', 'S1862', 'squid', '<p>\n  A chain of if/else if statements is evaluated from top to bottom. At most, only one branch of the chain will be executed: the first one with a condition that evaluates to true.\n</p>\n<p>\n  Therefore, duplicating a condition in a sequence of if/else if statements automatically leads to dead code. Usually, is due to a copy/paste error. Obviously it could lead to unexpected behavior.\n</p>\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // For sure this is a bug\n  moveWindowToTheBackground();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n</pre>', 3, NULL, 'Conditions in related "if/else if" statements should not be duplicated', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'bug,unused', 0, 'HTML'),
(1001, 'S881', 'S881', 'squid', '<p>\nThe use of increment and decrement operators in combination with other arithmetic operators is not recommended, because:\nIt can significantly impair the readability of the code.\nIt introduces additional side effects into a statement, with the potential for undefined behavior.\nIt is safer to use these operators in isolation from any other arithmetic operators.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>', 2, NULL, 'Increment (++) and decrement (--) operators should not be mixed with other operators in an expression', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, NULL, 0, 'HTML'),
(1002, 'ParsingError', 'ParsingError', 'squid', '<p>\nWhen the Java parser fails, it is possible to record the failure as an issue on the file.\nThis way, not only it is possible to track the number of files that do not parse but also to easily find out why they do not parse.\n</p>', 2, NULL, 'Java parser failure', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(1003, 'S1598', 'S1598', 'squid', '<p>By convention, a Java class'' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java file located at "src/org/sonarqube/Foo.java" should have a package of "org.sonarqube".</p>\n\n<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the "Foo.java" class part of the "com.apple" package, which could degrade the maintainability of both the class and its application.</p>', 2, NULL, 'Package declaration should match source file directory', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, NULL, 0, 'HTML'),
(1004, 'S1125', 'S1125', 'squid', '<p>\nRemove literal boolean values from conditional expressions to improve readability. Anything that can be tested for equality with a boolean value must itself be a boolean value, and boolean values can be tested atomicly.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (booleanVariable == true) { /* ... */ }\nif (booleanVariable != true) { /* ... */ }\nif (booleanVariable || false) { /* ... */ }\ndoSomething(!false);\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nif (booleanVariable) { /* ... */ }\nif (!booleanVariable) { /* ... */ }\nif (booleanVariable) { /* ... */ }\ndoSomething(true);\n</pre>', 1, NULL, 'Literal boolean values should not be used in condition expressions', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(1005, 'S1596', 'S1596', 'squid', '<p>Since the introduction of generics in Java 5, it is recommenced to use generic types such as <code>List&lt;String&gt;</code> instead of raw ones such as just <code>List</code>. Assigning a raw type into a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code> fields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>\n\nDevelopers will also more easily find the <code>emptyIterator()</code> and <code>emptyListIterator()</code> methods for which there is no field equivalent if they are used to call the methods.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n</pre>', 2, NULL, 'Collections.emptyList(),emptyMap() and emptySet() should be used instead of Collections.EMPTY_LIST, EMPTY_MAP and EMPTY_SET', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, NULL, 0, 'HTML'),
(1006, 'S1126', 'S1126', 'squid', '<p>\nReturn of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nreturn expression;   \n</pre>', 2, NULL, 'Return of boolean expressions should not be wrapped into an if-then-else statement', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(1007, 'ClassVariableVisibilityCheck', 'ClassVariableVisibilityCheck', 'squid', '<p>\nPublic class variable fields do not respect the encapsulation principle and has two main disadvantages:\n</p>\n\n<ul>\n  <li>Additional behavior such as validation cannot be added.</li>\n  <li>The internal representation is exposed, and cannot be changed afterwards.</li>\n</ul>\n\n<p>The following code:</p>\n\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Non-Compliant\n\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>', 2, NULL, 'Class variable fields should not have public accessibility', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(1008, 'S1643', 'S1643', 'squid', '<p>Strings are immutable objects in Java, so concatenation doesn''t simply add the new String to the end of the existing string. Instead, in each loop iteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted back to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is preferred.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = "";\nfor (int i = 0; i < arrayOfStrings.length ; ++i) {\n  str = str + arrayOfStrings[i];\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nStringBuilder bld = new StringBuilder();\nfor (int i = 0; i < arrayOfStrings.length; ++i) {\n  bld.append(arrayOfStrings[i]);\n}\nString str = bld.toString();\n</pre>', 2, NULL, 'Strings should not be concatenated using ''+'' in a loop', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 29, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'performance', 0, 'HTML'),
(1009, 'RightCurlyBraceSameLineAsNextBlockCheck', 'RightCurlyBraceSameLineAsNextBlockCheck', 'squid', '<p>\nSharing some coding conventions is a key point to make it possible for a team to efficiently collaborate.\nThis rule make it mandatory to place closing curly braces on the same line that next <code>else</code>, <code>catch</code> or <code>finally</code> keywords.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Compliant\n    doSomethingElse();\n  }\n  else {                               // Non-Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {              // Compliant\n    log(e);\n  }\n  finally {                            // Non-Compliant\n    closeConnection();\n  }\n}\n</pre>', 2, NULL, 'Right curly brace and next "else", "catch" and "finally" keywords should be located on the same line', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(1010, 'S00112', 'S00112', 'squid', '<p>\nUsing such generic exception prevents calling methods from handling differently each kind of error.\n</p>\n\n<h2>\nNoncompliant Code Example\n</h2>\n\n<pre>\npublic void foo(String bar) throws Throwable { // Noncompliant\n  throw new RuntimeException("My Message");    // Noncompliant\n}\n</pre>\n\n<h2>\nCompliant Solution\n</h2>\n\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException("My Message");\n}\n</pre>\n\n<h2>\nExceptions\n</h2>\n\n<p>\nGeneric exceptions in signature of overriding methods are excluded\n</p>\n\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>', 2, NULL, 'Generic exceptions Error, RuntimeException, Throwable and Exception should never be thrown', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 40, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'error-handling', 0, 'HTML'),
(1011, 'S1066', 'S1066', 'squid', '<p>Merging collapsible <code>if</code> statements increases the code''s readability.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (file != null && isFileOrDirectory(file)) { \n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>', 2, NULL, 'Collapsible "if" statements should be merged', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, NULL, 0, 'HTML'),
(1012, 'S1067', 'S1067', 'squid', '<p>\nThe complexity of an expression is defined by the number of <code>&&</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code> operators it contains.\nA single expression''s complexity should not become too high to keep the code readable.\n</p>\n\n<p>The following code, with a maximum complexity of 3:</p>\n\n<pre>\nif (condition1 && condition2 && condition3 && condition4) { /* ... */ }  // Non-Compliant\n</pre>\n\n<p>could be refactored into something like:</p>\n\n<pre>\nif (relevantMethodName1() && relevantMethodName2()) { /* ... */ }        // Compliant\n\n/* ... */\n\nprivate boolean relevantMethodName1() {\n  return condition1 && condition2;\n}\n\nprivate boolean relevantMethodName2() {\n  return condition3 && condition4;\n}\n</pre>', 2, NULL, 'Expressions should not be too complex', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'brain-overload', 0, 'HTML'),
(1013, 'EmptyStatementUsageCheck', 'EmptyStatementUsageCheck', 'squid', '<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n\n<ul>\n  <li>It was meant to be replaced by an actual statement, but this was forgotten.</li>\n  <li>There was a typo which lead to the semicolon to be doubled, i.e. <code>;;</code>.</li>\n</ul>\n\n<p>Examples:</p>\n\n<pre>\nvoid doSomething() {\n  ;                                                       // Non-Compliant - was used as a kind of TODO marker\n}\n</pre>\n\n<pre>\nSystem.out.println("Hello, world!");;                     // Non-Compliant - double ;\n</pre>\n\n<p>Rarely, they are used on purpose, as the body of a loop:</p>\n\n<pre>\nfor (int i = 0; i < 3; System.out.println(i), i++);       // Non-Compliant\n</pre>\n\n<p>It is a bad practice to have side-effects outside of the loop body, and therefore that code should be refactored into:</p>\n\n<pre>\nfor (int i = 0; i < 3; i ++) {                            // Compliant\n  System.out.println(i);\n}\n</pre>', 2, NULL, 'Empty statements should be removed', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(1014, 'MethodCyclomaticComplexity', 'MethodCyclomaticComplexity', 'squid', '<p>The Cyclomatic Complexity is measured by the number of\n	(&amp;&amp;, ||) operators and (if, while, do, for, ?:, catch, switch,\n	case, return, throw) statements in the body of a class plus one for\n	each constructor, method (but not getter/setter), static initializer,\n	or instance initializer in the class. The last return stament in\n	method, if exists, is not taken into account.</p>\n<p>\n	Even when the Cyclomatic Complexity of a class is very high, this\n	complexity might be well distributed among all methods. Nevertheless,\n	most of the time, a very complex class is a class which breaks the <a\n		href="http://en.wikipedia.org/wiki/Single_responsibility_principle">Single\n		Responsibility Principle</a> and which should be re-factored to be split\n	in several classes.\n</p>', 2, NULL, 'Methods should not be too complex', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'brain-overload', 0, 'HTML'),
(1015, 'S1068', 'S1068', 'squid', '<p>\nIf a private field is declared but not used in the program, it can be considered dead code and should therefore be removed.\nThis will improve maintainability because developers will not wonder what the variable is used for.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>\nThe Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization.\nA serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that must be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:\n</p>\n\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>', 2, NULL, 'Unused private fields should be removed', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'unused', 0, 'HTML'),
(1016, 'S00107', 'S00107', 'squid', '<p>\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the method is doing too many things.\n</p>', 2, NULL, 'Methods should not have too many parameters', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, 'brain-overload', 0, 'HTML'),
(1017, 'S1132', 'S1132', 'squid', '<p>\nIt is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.\nThis prevents null pointer exceptions from being raised, as a string literal can never be null by definition.\n</p>\n\n<p>The following code:</p>\n\n<pre>\nString myString = null;\n\nSystem.out.println("Equal? " + myString.equals("foo"));                        // Non-Compliant - will raise a NPE\nSystem.out.println("Equal? " + (myString != null && myString.equals("foo")));  // Non-Compliant - null check could be removed\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\nSystem.out.println("Equal?" + "foo".equals(myString));                         // Compliant - properly deals with the null case\n</pre>', 2, NULL, 'Strings literals should be placed on the left side when checking for equality', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(1018, 'S1133', 'S1133', 'squid', '<p>\nThis rule is meant to be used as a way to track code which is marked as being deprecated.\nDeprecated code should eventually be removed.\n</p>\n\n<p>\nThe following code illustrates this rule:\n</p>\n\n<pre>\nclass Foo {\n  /**\n    * @deprecated\n    */\n  public void foo() {    // Non-Compliant\n  }\n\n  @Deprecated            // Non-Compliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>', 0, NULL, 'Deprecated code should be removed eventually', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(1019, 'S00108', 'S00108', 'squid', '<p>\nMost of the time a block of code is empty when a piece of code is really missing.\nSo such empty block must be either filled or removed.\nWhen a block contains a comment, this block is not considered to be empty.\n</p>\n\n<p>The following code snippet illustrates this rule:</p>\n\n<pre>\nvoid doSomething() {\n  for (int i = 0; i < 42; i++)        // Non-Compliant\n  {\n  }\n  for (int i = 0; i < 42; i++);       // Compliant\n\n  if (myVar == 4)                     // Compliant - contains a comment\n  {\n    // Do nothing because of X and Y\n  }\n  else                                // Compliant\n  {\n    doSomething();\n  }\n\n  try                                 // Non-Compliant\n  {\n  }\n  catch (Exception e)                 // Compliant\n  {\n    // Ignore\n  }\n}\n</pre>', 2, NULL, 'Nested blocks of code should not be left empty', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 43, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'bug', 0, 'HTML');
INSERT INTO `rules` (`id`, `plugin_rule_key`, `plugin_config_key`, `plugin_name`, `description`, `priority`, `template_id`, `name`, `status`, `language`, `created_at`, `updated_at`, `note_created_at`, `note_updated_at`, `note_user_login`, `note_data`, `characteristic_id`, `default_characteristic_id`, `remediation_function`, `default_remediation_function`, `remediation_coeff`, `default_remediation_coeff`, `remediation_offset`, `default_remediation_offset`, `effort_to_fix_description`, `tags`, `system_tags`, `is_template`, `description_format`) VALUES
(1020, 'S00103', 'S00103', 'squid', '<p>\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n</p>', 1, NULL, 'Lines of code should not be too long', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(1021, 'S00105', 'S00105', 'squid', '<p>\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\nSo the use of tabulation character must be banned.\n</p>', 1, NULL, 'Tabulation characters should not be used', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '2min', NULL, NULL, 'convention', 0, 'HTML'),
(1022, 'S1134', 'S1134', 'squid', '<p>\n<code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\nSometimes the developer will not have the time or will simply forget to get back to that tag.\nThis rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<p>The following code illustrates this rule:</p>\n\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator = 0, Non-Compliant\n}\n</pre>', 2, NULL, 'FIXME tags should be handled', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, NULL, 0, 'HTML'),
(1023, 'S00104', 'S00104', 'squid', '<p>\nA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.\nThose smaller files will not only be easier to understand but also probably easier to test.\n</p>', 2, NULL, 'Files should not have too many lines', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, 'brain-overload', 0, 'HTML'),
(1024, 'S1135', 'S1135', 'squid', '<p>\n<code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\nSometimes the developer will not have the time or will simply forget to get back to that tag.\nThis rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<p>The following code illustrates this rule:</p>\n\n<pre>\nvoid doSomething() {\n  // TODO\n}\n</pre>', 0, NULL, 'TODO tags should be handled', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, NULL, 0, 'HTML'),
(1025, 'S00122', 'S00122', 'squid', '<p>\nFor better readability, do not put more than one statement on a single line.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n<pre>\na = "something"; b = "somethingElse"; // Non-Compliant\nc = "anotherThing"; // Compliant\n</pre>', 2, NULL, 'Statements should be on separate lines', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(1026, 'S1197', 'S1197', 'squid', '<p>\nArray designators should always be located on the type for better code readability.\nOtherwise, developers must look both at the type and the variable name to know whether or not a variable is an array.\n</p>\n\n<p>The following code snippet illustrates this rule:</p>\n\n<pre>\nint matrix[][];   // Non-Compliant\nint[] matrix[];   // Non-Compliant\nint[][] matrix;   // Compliant\n</pre>', 1, NULL, 'Array designators "[]" should be on the type, not the variable', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'convention', 0, 'HTML'),
(1027, 'S00120', 'S00120', 'squid', '<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all package names match a provided regular expression.\n</p>\n\n<p>\nThe following code snippet illustrates this rule when the regular expression value is "^[a-z]+(\\\\.[a-z][a-z0-9]*)*$":\n</p>\n<pre>\npackage org.Example; // Non-Compliant\n\npackage org.example; // Compliant\n</pre>', 2, NULL, 'Package names should comply with a naming convention', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'convention', 0, 'HTML'),
(1028, 'S1199', 'S1199', 'squid', '<p>\nNested code blocks can be used to create a new scope and restrict the visibility of the variables defined within.\nUsing this feature in a method typically indicates that it takes on too many responsibilities, and should be refactored into smaller ones.\n</p>\n\n<p>The following code:</p>\n\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Non-Compliant - nested code block ''{'' ... ''}''\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>', 2, NULL, 'Nested code blocks should not be used', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(1029, 'S00121', 'S00121', 'squid', '<p>\nNot using curly braces could be error-prone in some cases. For instance in the following example, the two statements seems to be attached to the if statement whereas this is the case only for the first one:\n</p>\n<pre>\nif (condition) // Non-Compliant\n  executeSomething();\n  checkSomething();\n\nif (condition) { // Compliant\n  executeSomething();\n}\ncheckSomething();\n</pre>', 2, NULL, 'if/else/for/while/do statements should always use curly braces', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'convention', 0, 'HTML'),
(1030, 'CycleBetweenPackages', 'CycleBetweenPackages', 'squid', '<p>\nWhen several packages are involved in a cycle (package A > package B > package C > package A where ">" means "depends upon"),\nthat means that those packages are highly coupled and that there is no way to reuse/extract one of those packages without importing all the other packages.\nSuch cycle could quickly increase the effort required to maintain an application and to embrace business change.\nSonarQube not only detect cycles between packages but also determines what is the minimum effort to break those cycles.\nThis rule logs an issue on each source file having an outgoing dependency to be cut in order to break a cycle.\n</p>', 2, NULL, 'Avoid cycle between java packages', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 33, NULL, 'LINEAR', NULL, '1d', NULL, NULL, NULL, NULL, NULL, 0, 'HTML'),
(1031, 'S1149', 'S1149', 'squid', '<p>\nEarly classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them thread-safe.\nUnfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.\n</p>\n\n<p>It is better to use their new unsynchronized replacements:</p>\n\n<ul>\n  <li><code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code></li>\n  <li><code>Deque</code> instead of <code>Stack</code></li>\n  <li><code>HashMap</code> instead of <code>Hashtable</code></li>\n  <li><code>StringBuilder</code> instead of <code>StringBuffer</code></li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nVector cats = new Vector();\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nArrayList cats = new ArrayList(); \n</pre>\n\n<h2>Exceptions</h2>\n\n<p>Use of those synchronized classes is allowed in method signatures when overriding an existing method.</p>\n\n<pre>\n@Override\npublic Vector getCats() {...} \n</pre>', 2, NULL, 'Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 31, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, NULL, 0, 'HTML'),
(1032, 'LeftCurlyBraceEndLineCheck', 'LeftCurlyBraceEndLineCheck', 'squid', '<p>\nSharing some coding conventions is a key point to make it possible for a team to efficiently collaborate.\nThis rule make it mandatory to place left curly braces at the end of lines of code.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\npublic void myMethod() {              // Compliant\n  if(something)\n  {                                   // Non-Compliant\n    executeTask();\n  } else {                            // Compliant\n    doSomethingElse();\n  }\n  if( param1 && param2 && param3\n    && something3 && something4)\n  {                                   // Non-Compliant\n    executeAnotherTask();\n  }\n}\n</pre>', 2, NULL, 'Left curly braces should be located at the end of lines of code', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(1033, 'RightCurlyBraceStartLineCheck', 'RightCurlyBraceStartLineCheck', 'squid', '<p>\nSharing some coding conventions is a key point to make it possible for a team to efficiently collaborate.\nThis rule make it mandatory to place right curly braces at the beginning of lines of code.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();}                   // Non-Compliant\n  else if (somethingElse) {\n    doSomethingElse();\n  }                                   // Compliant\n\n  try {\n    generateOrder();\n  } finally {                         // Compliant\n    closeConnection();\n  }                                   // Compliant\n\n  try {\n    generateOrder();\n  } finally {                         // Compliant\n    closeConnection(); }              // Non-Compliant\n}\n</pre>', 2, NULL, 'Right curly braces should be located at the beginning of lines of code', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(1034, 'S1141', 'S1141', 'squid', '<p>\nNesting <code>try-catch</code> blocks severely impacts the readability of source code because it makes it to difficult to understand which block will catch which exception.\n</p>\n\n<p>The following code:</p>\n\n<pre>\ntry {\n  try {                                     // Non-Compliant\n    doSomething();\n  } catch (RuntimeException e) {\n    /* Ignore */\n  }\n\n  doSomethingElse();\n} catch (Exception e) {\n  /* ... */\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\ntry {\n  dedicatedMethod();                        // Compliant\n  doSomethingElse();\n} catch (Exception e) {\n  /* ... */\n}\n\n/* ... */\n\nprivate void dedicatedMethod() {\n  try {                                     // Compliant\n    doSomething();\n  } catch (RuntimeException e) {\n    /* Ignore */\n  }\n}\n</pre>', 2, NULL, 'Try-catch blocks should not be nested', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, NULL, 0, 'HTML'),
(1035, 'S1444', 'S1444', 'squid', '<p>There is no good reason to declare a field "public" and "static" without also declaring it "final". Most of the time this is a kludge to share a state among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to <code>null</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\npublic static var foo:Foo = new Foo(...);\n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\npublic static const FOO:Foo = new Foo(...);\n...\n}\n</pre>', 2, NULL, '"public static" fields should always be constant', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, NULL, 0, 'HTML'),
(1036, 'S00119', 'S00119', 'squid', '<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all type parameter names match a provided regular expression.\n</p>\n\n<p>\nThe following code snippet illustrates this rule when the regular expression value is "^[A-Z]$":\n</p>\n<pre>\nclass MyClass&lt;TYPE&gt; { // Non-Compliant\n  &lt;TYPE&gt; void addAll(Collection&lt;TYPE&gt; c) { // Non-compliant\n  }\n}\n\npublic class MyClass&lt;T&gt; { // Compliant\n  &lt;T&gt; void addAll(Collection&lt;T&gt; c) { // Compliant\n  }\n}\n</pre>', 2, NULL, 'Type parameter names should comply with a naming convention', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'convention', 0, 'HTML'),
(1037, 'S1142', 'S1142', 'squid', '<p>\nHaving too many return statements in a method increases the method''s essential complexity because the flow of execution is broken each time a return statement is encountered.\nThis makes it harder to read and understand the logic of the method.\n</p>\n\n<p>\nThe following code snippet illustrates this rule with the default threshold of 3:\n</p>\n\n<pre>\npublic boolean myMethod() { // Non-Compliant as there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>', 2, NULL, 'Methods should not contain too many return statements', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 51, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'brain-overload', 0, 'HTML'),
(1038, 'S00118', 'S00118', 'squid', '<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.\nThis rule allows to check that all abstract class names match a provided regular expression and non-abstract classes not match.\n</p>\n\n<p>\nThe following code snippet illustrates this rule when the regular expression value is "^Abstract[A-Z][a-zA-Z0-9]*$":\n</p>\n<pre>\nabstract class MyClass { // Non-Compliant\n}\n\nclass AbstractLikeClass { // Non-Compliant\n}\n\nabstract class AbstractClass { // Compliant\n}\n</pre>', 2, NULL, 'Abstract class names should comply with a naming convention', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'convention', 0, 'HTML'),
(1039, 'S1143', 'S1143', 'squid', '<p>\nReturning from a <code>finally</code> block suppresses the propagation of any unhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.\n</p>\n\n<p>\nThe following code snippet illustrates this rule.\nThe developer expects to get "ERROR" in the console whereas "OK" is displayed.\n</p>\n\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println("OK");\n  } catch (RuntimeException e) {\n    System.out.println("ERROR");\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    /* ... */\n    return;                                        // Non-Compliant - prevents the RuntimeException from being propagated\n  }\n}\n</pre>', 4, NULL, 'Return statements should not occur in finally blocks', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'bug', 0, 'HTML'),
(1040, 'S1191', 'S1191', 'squid', '<p>\nClasses in <code>com.sun.*</code> and <code>sun.*</code> packages are considered implementation details, and are not part of the Java API.\nThey can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee.\nSuch classes are almost always wrapped by Java API classes that should be used instead.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nimport com.sun.jna.Native;     // Non-Compliant\nimport sun.misc.BASE64Encoder; // Non-Compliant\n</pre>', 2, NULL, 'Classes from "com.sun.*" and "sun.*" packages should not be used', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 6, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1h', NULL, NULL, NULL, 0, 'HTML'),
(1041, 'S00117', 'S00117', 'squid', '<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local variable and method parameter names match a provided regular expression.\n</p>\n\n<p>\nThe following code snippet illustrates this rule when the regular expression value is "^[a-z][a-zA-Z0-9]*$":\n</p>\n\n<pre>\npublic class MyClass {\n  public void method() {\n    int FIRST;                      // Non-Compliant\n    int second;                     // Compliant\n  }\n\n  public void method2(int VALUE) {  // Non-Compliant\n  }\n\n  public void method3(int value) {  // Compliant\n  }\n}\n</pre>', 2, NULL, 'Local variable and method parameter names should comply with a naming convention', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'convention', 0, 'HTML'),
(1042, 'S1190', 'S1190', 'squid', '<p>\nAs of Java 5, <code>enum</code> is a keyword and can therefore no longer be used a variable names for instance.\nRecent versions of the Java compiler will generate errors while compiling code still using <code>enum</code> as a name.\n</p>\n\n<p>The following code snippet illustrates this rule:</p>\n\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Non-Compliant\n}\n</pre>', 2, NULL, '"enum" should no longer be used as a name', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 6, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(1043, 'S00116', 'S00116', 'squid', '<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all field names match a provided regular expression.\n</p>\n\n<p>\nThe following code snippet illustrates this rule when the regular expression value is "^[a-z][a-zA-Z0-9]*$":\n</p>\n<pre>\npublic class MyClass {\n  public int FIRST = 1; // Non-Compliant\n  public int second = 2; // Compliant\n}\n</pre>', 2, NULL, 'Field names should comply with a naming convention', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'convention', 0, 'HTML'),
(1044, 'S1145', 'S1145', 'squid', '<p>\nIf statements with conditions that are always either true or false are not required, and make the code less readable.\n</p>\n\n<p>The following code:</p>\n\n<pre>\npublic void myMethod() {\n  if (true) {                   // Non-Compliant\n    doSomething();\n  }\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic void myMethod() {\n  doSomething();                // Compliant\n}\n</pre>\n\n<p>and the following code:</p>\n\n<pre>\npublic void myMethod() {\n  if (false) {                  // Non-Compliant\n    doSomething();\n  }\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic void myMethod() {        // Compliant\n}\n</pre>', 2, NULL, 'If statement conditions should not always evaluate to "true" or to "false"', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(1045, 'S1193', 'S1193', 'squid', '<p>\nMultiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.\n</p>\n\n<p>For example, following code:</p>\n\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  if(e instanceof IOException) { /* ... */ }         // Non-Compliant\n  if(e instanceof NullPointerException{ /* ... */ }  // Non-Compliant\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\ntry {\n  /* ... */\n} catch (IOException e) { /* ... */ }                // Compliant\n} catch (NullPointerException e) { /* ... */ }       // Compliant\n</pre>', 2, NULL, 'Exception types should not be tested using "instanceof" in catch blocks', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 16, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'error-handling', 0, 'HTML'),
(1046, 'S109', 'S109', 'squid', '<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the number of iterations of a loops, to test the value of a property, etc.</p>\n\n<p>Using magic numbers may seem obvious and straightforward when you''re writing a piece of code, but they are much less obvious and straightforward at debugging time.</p>\n\n<p>That is why magic numbers must be demystified by first being assigned to clearly named constants before being used.</p>\n\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n\n<h2>Noncompliant Code Sample</h2>\n\n<pre>\npublic static void doSomething() {\n  for(int i = 0; i < 4; i++){                 //Non-Compliant, 4 is a magic number\n  ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i < NUMBER_OF_CYCLES ; i++){   //Compliant\n    ...\n  }\n}\n</pre>', 1, NULL, 'Magic numbers should not be used', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 35, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, NULL, 0, 'HTML'),
(1047, 'LeftCurlyBraceStartLineCheck', 'LeftCurlyBraceStartLineCheck', 'squid', '<p>\nSharing some coding conventions is a key point to make it possible for a team to efficiently collaborate.\nThis rule make it mandatory to place left curly braces at the beginning of lines of code.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\npublic void myMethod\n{                                               // Compliant\n  if(something)\n  {                                             // Compliant\n    executeTask();\n  } else {                                      // Non-Compliant\n    doSomethingElse();\n  }\n}\n</pre>', 2, NULL, 'Left curly braces should be located at the beginning of lines of code', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '1min', NULL, NULL, 'convention', 0, 'HTML'),
(1048, 'S00115', 'S00115', 'squid', '<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all constant names match a provided regular expression.\n</p>\n\n<p>\nThe following code snippet illustrates this rule when the regular expression value is "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$":\n</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1; // Non-Compliant\n  public static final int SECOND = 2; // Compliant\n}\n\npublic enum MyEnum {\n  first, // Non-Compliant\n  SECOND; // Compliant\n}\n</pre>', 2, NULL, 'Constant names should comply with a naming convention', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'convention', 0, 'HTML'),
(1049, 'S1192', 'S1192', 'squid', '<p>\n  Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\n  On the other hand, constants can be referenced from many places, but only need to be updated in a single place.\n</p>\n\n<h2>Non Compliant Code Example</h2>\n\n<pre>\npublic void run() {\n  prepare("action1");                              // Non-Compliant - "action1" is duplicated 3 times\n  execute("action1");\n  release("action1");\n}\n\n@SuppressWarning("all")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning("all")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println("''" + a + "''");               // Compliant - literal "''" has less than 5 characters and is excluded\n  return "";                                       // Compliant - literal "" has less than 5 characters and is excluded\n}\n</pre>\n\n<h2>Compliant Code Example</h2>\n\n<pre>\nprivate static final String ACTION_1 = "action1";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>', 1, NULL, 'String literals should not be duplicated', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 39, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(1050, 'S00114', 'S00114', 'squid', '<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all interface names match a provided regular expression.\n</p>\n\n<p>\nThe following code snippet illustrates this rule when the regular expression value is "^[A-Z][a-zA-Z0-9]*$":\n</p>\n<pre>\npublic interface MyFirstInterface {...} // Compliant\npublic interface mySecondInterface {...} // Non-Compliant\n</pre>', 2, NULL, 'Interface names should comply with a naming convention', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, 'convention', 0, 'HTML'),
(1051, 'S1147', 'S1147', 'squid', '<p>\nCalling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> leads to the shut down of the entire Java virtual machine.\nIt should be used with care, when stopping the whole Java process is meant.\nFor instance, it should not be called from applications running in a J2EE container.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\n</pre>', 3, NULL, 'System.exit(...) and Runtime.getRuntime().exit(...) should not be called', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 38, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '20min', NULL, NULL, NULL, 0, 'HTML'),
(1052, 'S106', 'S106', 'squid', '<p>Two important requirements must be fulfilled when logging messages:</p>\n\n<ul>\n  <li>The user must be able to easily retrieve the logs.</li>\n  <li>The format of all messages must be uniform to enable users to easily browse them.</li>\n</ul>\n\n<p>\nIf a program directly writes to the standard output, there is absolutely no way to comply with these requirements.\nThat''s why defining and using a dedicated logger is highly recommended.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\nSystem.out.println("My Message");  // Non-Compliant\n\nlogger.log("My Message");          // Compliant\n</pre>', 2, NULL, 'System.out and System.err should not be used as loggers', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 19, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, NULL, 0, 'HTML'),
(1053, 'S1195', 'S1195', 'squid', '<p>\nAccording to the Java Language Specification:\n</p>\n\n<pre>\nFor compatibility with older versions of the Java SE platform,\nthe declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the array type after the formal parameter list.\nThis obsolescent syntax should not be used in new code.\n</pre>\n\n<p>The following code snippet illustrates this rule:</p>\n\n<pre>\npublic int getVector()[] { /* ... */ }    // Non-Compliant\n\npublic int[] getVector() { /* ... */ }    // Compliant\n\npublic int[] getMatrix()[] { /* ... */ }  // Non-Compliant\n\npublic int[][] getMatrix() { /* ... */ }  // Compliant\n</pre>', 1, NULL, 'Array designators "[]" should be located after the type in method signatures', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 15, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'convention', 0, 'HTML'),
(1054, 'ObjectFinalizeOverridenCallsSuperFinalizeCheck', 'ObjectFinalizeOverridenCallsSuperFinalizeCheck', 'squid', '<p>\nOverriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.\nCalling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also dispose some system resources.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\nprotected void finalize() {            // Non-Compliant\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();                    // Non-Compliant\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();                    // Compliant\n}\n</pre>', 4, NULL, 'super.finalize() should be called at the end of Object.finalize() implementations', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 42, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'bug', 0, 'HTML'),
(1055, 'S00113', 'S00113', 'squid', '<p>\nSome tools such as Git work better when files end with an empty line.\nThis rule simply generates an issue if it is missing.\n</p>\n\n<p>For example, a Git diff look like:</p>\n\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>\n\n<p>if the empty line is missing at the end of the file.</p>', 1, NULL, 'Files should contain an empty new line at the end', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 9, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '5min', NULL, NULL, 'convention', 0, 'HTML'),
(1056, 'S1148', 'S1148', 'squid', '<p>\n<code>Throwable.printStackTrace(...)</code> prints a throwable and its stack trace to some stream.\n</p>\n\n<p>Loggers should be used instead to print throwables, as they have many advantages:</p>\n<ul>\n  <li>Users are able to easily retrieve the logs.</li>\n  <li>The format of log messages is uniform and allow users to browse the logs easily.</li>\n</ul>\n\n<p>The following code:</p>\n\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Non-Compliant\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log("context", e);   // Compliant\n}\n</pre>', 3, NULL, 'Throwable.printStackTrace(...) should never be called', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 40, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'error-handling', 0, 'HTML'),
(1057, 'S1194', 'S1194', 'squid', '<p>\n<code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be encountered by the Java Virtual Machine.\n</p>\n\n<p>The following code snippet:</p>\n\n<pre>\npublic class MyException extends Error { /* ... */ }       // Non-Compliant\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic class MyException extends Exception { /* ... */ }   // Compliant\n</pre>', 2, NULL, '"java.lang.Error" should not be extended', 'READY', 'java', SYSDATE(), SYSDATE(), NULL, NULL, NULL, NULL, NULL, 40, NULL, 'CONSTANT_ISSUE', NULL, NULL, NULL, '10min', NULL, NULL, 'error-handling', 0, 'HTML');

INSERT INTO `rules_parameters` (`id`, `rule_id`, `name`, `description`, `param_type`, `default_value`) VALUES
(1, 3, 'maximumLineLength', 'The maximum authorized line length.', 'INTEGER', '80'),
(2, 4, 'max', 'Maximum authorized lines in a function', 'INTEGER', '100'),
(3, 14, 'message', 'The issue message', 'STRING', 'The regular expression matches this comment.'),
(4, 14, 'regularExpression', 'The regular expression', 'STRING', NULL),
(5, 41, 'maximumNestingLevel', 'Maximum allowed "if/for/while/switch/try" statements nesting depth', 'INTEGER', '3'),
(6, 52, 'format', 'Regular expression used to check the function names against.', 'STRING', '^[a-z][a-zA-Z0-9]*$'),
(7, 53, 'legalCommentPattern', 'Pattern for text of trailing comments that are allowed.', 'STRING', '^//\\s*+[^\\s]++$'),
(8, 59, 'considerJSDoc', 'Consider only functions with @constructor tag as constructor functions', 'BOOLEAN', 'false'),
(9, 65, 'headerFormat', 'Expected copyright and license header (plain text)', 'TEXT', NULL),
(10, 66, 'format', 'Regular expression used to check the variable names against', 'STRING', '^\\$[a-z][a-zA-Z0-9]*$'),
(11, 79, 'maximumFunctionParameters', 'The maximum authorized number of parameters', 'INTEGER', '7'),
(12, 84, 'threshold', 'Number of allowed repetition before triggering an issue', 'INTEGER', '2'),
(13, 90, 'max', 'Maximum number of allowed conditional operators in an expression', 'INTEGER', '3'),
(14, 91, 'maximumFunctionComplexityThreshold', 'The maximum authorized complexity in function', 'INTEGER', '10'),
(15, 107, 'maximum', 'Maximum authorized lines in a file.', 'INTEGER', '1000'),
(16, 111, 'minimumCommentDensity', 'The minimum required comment density.', 'STRING', '25.0'),
(17, 114, 'minimumLineCoverageRatio', 'The minimum required line coverage ratio.', 'STRING', '65.0'),
(18, 116, 'minimumBranchCoverageRatio', 'The minimum required branch coverage ratio.', 'STRING', '65.0'),
(19, 537, 'minimumCommentDensity', 'The minimum required comment density.', 'STRING', '25.0'),
(20, 539, 'minimumLineCoverageRatio', 'The minimum required line coverage ratio.', 'STRING', '65.0'),
(21, 541, 'minimumBranchCoverageRatio', 'The minimum required branch coverage ratio.', 'STRING', '65.0'),
(22, 544, 'attributes', 'Attributes', 'STRING', 'outputLabel.value, outputText.value'),
(23, 546, 'ignoreTags', 'Ignore tags', 'STRING', 'HTML,HEAD,BODY,P,DT,DD,LI,OPTION,THEAD,TH,TBODY,TR,TD,TFOOT,COLGROUP,IMG,INPUT,BR,HR,FRAME,AREA,BASE,BASEFONT,COL,ISINDEX,LINK,META,PARAM'),
(24, 547, 'attributes', 'Comma-separated list of tag.attributes that are required. E.G. specify img.alt to require an "alt" attribute in an "img" tag.', 'STRING', NULL),
(25, 554, 'namespaces', 'Comma separated list of namespaces', 'STRING', NULL),
(26, 555, 'child', 'Name of the child element', 'STRING', NULL),
(27, 555, 'parent', 'Name of the parent element', 'STRING', NULL),
(28, 559, 'attributes', 'Comma-separated list of tag.attributes that are not allowed. E.G. a.name forbids a "name" attribute in an "a" tag.', 'STRING', NULL),
(29, 565, 'child', 'Name of the child element', 'STRING', NULL),
(30, 565, 'parent', 'Name of the parent element', 'STRING', NULL),
(31, 567, 'maxLength', 'Maximum authorized lines in a file.', 'INTEGER', '1000'),
(32, 573, 'tagLibs', 'Comma-separated list of URIs of disallowed taglibs', 'STRING', 'http://java.sun.com/jstl/sql'),
(33, 574, 'maxLength', 'The maximum authorized line length.', 'INTEGER', '120'),
(34, 578, 'id', 'Value of the "id" attribute expected to be present on every page', 'STRING', NULL),
(35, 579, 'headerFormat', 'Expected copyright and license header (plain text)', 'TEXT', NULL),
(36, 580, 'Comma-separated list of tag.attributes to be checked for absolute URI. ', 'Comma-separated list of tag.attributes to be checked for absolute URI.', 'TEXT', 'a.href,applet.codebase,area.href,base.href,blockquote.cite,body.background,del.cite,form.action,frame.longdesc,frame.src,head.profile,iframe.longdesc,iframe.src,img.longdesc,img.src,img.usemap,input.src,input.usemap,ins.cite,link.href,object.classid,object.codebase,object.data,object.usemap,q.cite,script.src,audio.src,button.formaction,command.icon,embed.src,html.manifest,input.formaction,source.src,video.poster,video.src'),
(37, 581, 'message', 'Issue message which is displayed in case of violation', 'STRING', 'Remove the usage of this library which is not allowed.'),
(38, 581, 'libraries', 'Comma-separated list of Java packages or classes, such as java.sql or java.util.ArrayList', 'STRING', NULL),
(39, 582, 'child', 'Name of the child element', 'STRING', NULL),
(40, 582, 'parent', 'Name of the parent element', 'STRING', NULL),
(41, 584, 'elements', 'Comma-separated list of names of forbidden elements', 'STRING', NULL),
(42, 585, 'child', 'Name of the child element', 'STRING', NULL),
(43, 585, 'parent', 'Name of the required parent element', 'STRING', NULL),
(44, 587, 'max', 'Maximum allowed complexity', 'INTEGER', '10'),
(45, 589, 'maxLines', 'Max Lines (Number)', 'INTEGER', '5'),
(46, 593, 'functions', 'Comma-separated list of names of functions', 'STRING', NULL),
(47, 595, 'minimumCommentDensity', 'The minimum required comment density.', 'STRING', '25.0'),
(48, 597, 'minimumLineCoverageRatio', 'The minimum required line coverage ratio.', 'STRING', '65.0'),
(49, 598, 'minimumBranchCoverageRatio', 'The minimum required branch coverage ratio.', 'STRING', '65.0'),
(50, 599, 'format', 'Regular expression used to check the class names against.', 'STRING', '^[A-Z][a-zA-Z0-9]*$'),
(51, 600, 'legalTrailingCommentPattern', 'Description Pattern for text of trailing comments that are allowed', 'STRING', '^(//|#)\\s*+[^\\s]++$'),
(52, 601, 'format', 'Regular expression used to check the function names against', 'STRING', '^[a-z][a-zA-Z0-9]*$'),
(53, 602, 'maximumLinesThreshold', 'The maximum number of lines', 'INTEGER', '200'),
(54, 603, 'max', 'Maximum authorized lines in a function', 'INTEGER', '100'),
(55, 606, 'max', 'Maximum Number of Lines', 'INTEGER', '5'),
(56, 610, 'max', 'Maximum complexity allowed.', 'INTEGER', '200'),
(57, 611, 'extends_implements_line', 'Class names, "extends" and "implements" keywords should be located on the same line', 'BOOLEAN', 'true'),
(58, 611, 'foreach_space', 'In foreach statement there should be one space before and after "as" keyword and "=>" operator', 'BOOLEAN', 'true'),
(59, 611, 'closing_curly_brace', 'Close curly brace and the next "else", "catch" and "finally" keywords should be located on the same line', 'BOOLEAN', 'true'),
(60, 611, 'one_space_for', 'There should be one space after each ";" in "for" statement', 'BOOLEAN', 'true'),
(61, 611, 'function_declaration_arguments_indentation', 'Arguments in a method/function declaration should be correctly indented', 'BOOLEAN', 'true'),
(62, 611, 'open_curly_brace_classes_functions', 'Open curly braces should be at the beginning of a new line for classes and functions', 'BOOLEAN', 'true'),
(63, 611, 'one_space_after', 'There should be exactly one space between closing parenthesis and opening curly braces', 'BOOLEAN', 'true'),
(64, 611, 'use_after_namespace', '"use" declarations should be placed after "namespace" declarations', 'BOOLEAN', 'true'),
(65, 611, 'space_comma', 'Commas should be followed by one space and not preceded by any', 'BOOLEAN', 'true'),
(66, 611, 'function_calls_arguments_indentation', 'Arguments in method/function calls should be correctly indented', 'BOOLEAN', 'true'),
(67, 611, 'open_curly_brace_control_structures', 'Open curly braces should be at the end of line for control structures', 'BOOLEAN', 'true'),
(68, 611, 'one_space_before', 'There should be exactly one space between control structure keyword and opening parenthesis or curly brace', 'BOOLEAN', 'true'),
(69, 611, 'no_space', 'There should not be any space after the opening parenthesis and before the closing parenthesis', 'BOOLEAN', 'true'),
(70, 611, 'interfaces_indentation', 'List of implemented interfaces should be correctly indented', 'BOOLEAN', 'true'),
(71, 611, 'use_blank_line', '"use" declarations should be follow by a blank line', 'BOOLEAN', 'true'),
(72, 611, 'namespace_blank_line', '"namespace" declarations should be followed by a blank line', 'BOOLEAN', 'true'),
(73, 611, 'no_space_method_name', 'There should not be any space after a method name', 'BOOLEAN', 'true'),
(74, 611, 'closure_format', 'Closures declaration should be correctly spaced', 'BOOLEAN', 'true'),
(75, 620, 'headerFormat', 'Expected copyright and license header (plain text)', 'TEXT', NULL),
(76, 626, 'countNonpublicFields', 'Whether or not to include non-public fields in the count', 'BOOLEAN', 'true'),
(77, 626, 'maximumFieldThreshold', 'The maximum number of fields', 'INTEGER', '20'),
(78, 635, 'max', 'Maximum allowed "if", "for", "while", "switch" and "try" statements nesting depth', 'INTEGER', '3'),
(79, 646, 'max', 'Maximum number of allowed conditional operators in an expression', 'INTEGER', '3'),
(80, 650, 'max', 'Maximum number of case', 'INTEGER', '100'),
(81, 653, 'threshold', 'The maximum authorized complexity in functions.', 'INTEGER', '10'),
(82, 658, 'format', 'Regular expression used to check the constant names against.', 'STRING', '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'),
(83, 659, 'format', 'Regular expression used to check the field names against.', 'STRING', '^[a-z][a-zA-Z0-9]*$'),
(84, 661, 'format', 'Regular expression used to check the names against.', 'STRING', '^[a-z][a-zA-Z0-9]*$'),
(85, 668, 'format', 'Regular expression used to check the constant names against.', 'STRING', '[a-z][A-Za-z0-9]+.php'),
(86, 669, 'max', 'Maximum allowed number of nested functions', 'INTEGER', '3'),
(87, 673, 'max', 'Maximum number of classes a single class is allowed to depend upon', 'INTEGER', '20'),
(88, 683, 'countNonpublicMethods', 'Whether or not to include non-public methods in the count', 'BOOLEAN', 'true'),
(89, 683, 'maximumMethodThreshold', 'The maximum number of methods', 'INTEGER', '20'),
(90, 685, 'max', 'Description: Maximum authorized lines in a file', 'INTEGER', '1000'),
(91, 686, 'max', 'Maximum allowed return statements per function', 'INTEGER', '3'),
(92, 690, 'maximumLineLength', 'The maximum authorized line length.', 'INTEGER', '120'),
(93, 694, 'threshold', 'Number of times a literals must be duplicated to trigger an issue', 'INTEGER', '3'),
(94, 695, 'max', 'Maximum authorized number of parameters', 'INTEGER', '7'),
(95, 895, 'schemas', 'Whitespace-separated list of schemas to use for validation.', 'TEXT', 'autodetect'),
(96, 895, 'filePattern', 'Files to be validated using Ant-style matching patterns.', 'STRING', NULL),
(97, 896, 'indentSize', 'Number of white-spaces of an indent. If this property is not set, we just check that the code is indented.', 'INTEGER', '2'),
(98, 896, 'tabSize', 'Equivalent number of spaces of a tabulation', 'INTEGER', '2'),
(99, 899, 'markAll', 'Mark all tab errors', 'BOOLEAN', 'false'),
(100, 900, 'message', 'The issue message', 'STRING', 'The XPath expression matches this piece of code'),
(101, 900, 'expression', 'The XPath query', 'TEXT', NULL),
(102, 900, 'filePattern', 'Files to be validated using Ant-style matching patterns.', 'STRING', NULL),
(103, 904, 'max', 'Maximum authorized lines in a method', 'INTEGER', '100'),
(104, 909, 'max', 'Maximum allowed lines in a switch case', 'INTEGER', '5'),
(105, 923, 'forClasses', 'Pattern of classes which should adhere to this constraint. Ex : **.api.**', 'STRING', '**'),
(106, 924, 'legalCommentPattern', 'Pattern for text of trailing comments that are allowed.', 'STRING', '^\\s*+[^\\s]++$'),
(107, 925, 'max', 'Maximum depth of the inheritance tree.', 'INTEGER', '5'),
(108, 937, 'format', 'Regular expression used to check the class names against.', 'STRING', '^[A-Z][a-zA-Z0-9]*$'),
(109, 939, 'format', 'Regular expression used to check the function names against.', 'STRING', '^[a-z][a-zA-Z0-9]*$'),
(110, 947, 'exceptions', 'List of exceptions which should not be checked', 'STRING', 'java.lang.InterruptedException, java.lang.NumberFormatException, java.text.ParseException, java.net.MalformedURLException'),
(111, 949, 'toClasses', 'Mandatory. Ex : java.util.Vector, java.util.Hashtable, java.util.Enumeration', 'STRING', NULL),
(112, 949, 'fromClasses', 'Optional. If this property is not defined, all classes should adhere to this constraint. Ex : **.web.**', 'STRING', NULL),
(113, 950, 'max', 'Maximum allowed if/for/while/switch/try statements nesting depth', 'INTEGER', '3'),
(114, 967, 'max', 'Maximum number of classes a single class is allowed to depend upon', 'INTEGER', '20'),
(115, 969, 'max', 'Maximum complexity allowed.', 'INTEGER', '200'),
(116, 975, 'max', 'Maximum allowed lines in an anonymous class', 'INTEGER', '20'),
(117, 980, 'message', 'The violation message', 'STRING', 'The XPath expression matches this piece of code'),
(118, 980, 'xpathQuery', 'The XPath query', 'TEXT', NULL),
(119, 987, 'format', 'Regular expression used to check the logger names against.', 'STRING', 'LOG(?:GER)?'),
(120, 993, 'headerFormat', 'Expected copyright and license header (plain text)', 'TEXT', NULL),
(121, 994, 'indentationLevel', 'Number of spaces of an indentation level', 'INTEGER', '2'),
(122, 1012, 'max', 'Maximum number of allowed conditional operators in an expression', 'INTEGER', '3'),
(123, 1014, 'max', 'Maximum complexity allowed.', 'INTEGER', '10'),
(124, 1016, 'maximumMethodParameters', 'The maximum authorized number of parameters.', 'INTEGER', '7'),
(125, 1020, 'maximumLineLength', 'The maximum authorized line length.', 'INTEGER', '80'),
(126, 1023, 'maximumFileLocThreshold', 'Maximum authorized lines in a file', 'INTEGER', '1000'),
(127, 1027, 'format', 'Regular expression used to check the package names against.', 'STRING', '^[a-z]+(\\.[a-z][a-z0-9]*)*$'),
(128, 1036, 'format', 'Regular expression used to check the type parameter names against.', 'STRING', '^[A-Z]$'),
(129, 1037, 'max', 'Maximum allowed return statements per method', 'INTEGER', '3'),
(130, 1038, 'format', 'Regular expression used to check the abstract class names against.', 'STRING', '^Abstract[A-Z][a-zA-Z0-9]*$'),
(131, 1040, 'exclude', 'Comma separated list of Sun packages to be ignored by this rule. Example: com.sun.jna,sun.misc', 'STRING', NULL),
(132, 1041, 'format', 'Regular expression used to check the names against.', 'STRING', '^[a-z][a-zA-Z0-9]*$'),
(133, 1043, 'format', 'Regular expression used to check the field names against.', 'STRING', '^[a-z][a-zA-Z0-9]*$'),
(134, 1048, 'format', 'Regular expression used to check the constant names against.', 'STRING', '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'),
(135, 1049, 'threshold', 'Number of times a literal must be duplicated to trigger an issue', 'INTEGER', '3'),
(136, 1050, 'format', 'Regular expression used to check the interface names against.', 'STRING', '^[A-Z][a-zA-Z0-9]*$');

INSERT INTO `rules_profiles` (`id`, `name`, `language`, `kee`, `parent_kee`, `rules_updated_at`, `created_at`, `updated_at`) VALUES
(1, 'Sonar way', 'php', 'php-sonar-way-68503', NULL, DATE_FORMAT(SYSDATE(), '%Y-%m-%dT%H:%i:%s+0000'), SYSDATE(), SYSDATE()),
(2, 'PSR-2', 'php', 'php-psr-2-00147', NULL, DATE_FORMAT(SYSDATE(), '%Y-%m-%dT%H:%i:%s+0000'), SYSDATE(), SYSDATE()),
(3, 'Sonar way', 'js', 'js-sonar-way-84449', NULL, DATE_FORMAT(SYSDATE(), '%Y-%m-%dT%H:%i:%s+0000'), SYSDATE(), SYSDATE()),
(4, 'Sonar way', 'xml', 'xml-sonar-way-11830', NULL, DATE_FORMAT(SYSDATE(), '%Y-%m-%dT%H:%i:%s+0000'), SYSDATE(), SYSDATE()),
(5, 'Sonar way', 'web', 'web-sonar-way-33055', NULL, DATE_FORMAT(SYSDATE(), '%Y-%m-%dT%H:%i:%s+0000'), SYSDATE(), SYSDATE()),
(6, 'FindBugs', 'java', 'java-findbugs-42626', NULL, DATE_FORMAT(SYSDATE(), '%Y-%m-%dT%H:%i:%s+0000'), SYSDATE(), SYSDATE()),
(7, 'Sonar way', 'java', 'java-sonar-way-67562', NULL, DATE_FORMAT(SYSDATE(), '%Y-%m-%dT%H:%i:%s+0000'), SYSDATE(), SYSDATE());

INSERT INTO `schema_migrations` (`version`) VALUES
('1'),
('10'),
('11'),
('115'),
('118'),
('119'),
('131'),
('132'),
('136'),
('138'),
('139'),
('14'),
('140'),
('141'),
('151'),
('160'),
('163'),
('167'),
('168'),
('169'),
('180'),
('190'),
('191'),
('2'),
('200'),
('201'),
('202'),
('211'),
('214'),
('215'),
('216'),
('217'),
('220'),
('221'),
('222'),
('230'),
('231'),
('232'),
('233'),
('234'),
('235'),
('236'),
('237'),
('238'),
('239'),
('240'),
('250'),
('251'),
('252'),
('254'),
('255'),
('256'),
('257'),
('258'),
('259'),
('261'),
('262'),
('263'),
('280'),
('281'),
('282'),
('283'),
('284'),
('285'),
('286'),
('287'),
('300'),
('301'),
('302'),
('303'),
('304'),
('305'),
('306'),
('320'),
('321'),
('330'),
('331'),
('332'),
('333'),
('334'),
('335'),
('35'),
('350'),
('351'),
('352'),
('353'),
('354'),
('355'),
('356'),
('358'),
('359'),
('360'),
('361'),
('362'),
('363'),
('370'),
('379'),
('380'),
('381'),
('382'),
('383'),
('387'),
('388'),
('391'),
('392'),
('394'),
('397'),
('398'),
('399'),
('400'),
('401'),
('402'),
('403'),
('404'),
('405'),
('406'),
('410'),
('411'),
('412'),
('413'),
('414'),
('415'),
('416'),
('417'),
('418'),
('419'),
('430'),
('431'),
('432'),
('433'),
('434'),
('440'),
('441'),
('442'),
('443'),
('444'),
('460'),
('461'),
('462'),
('463'),
('464'),
('465'),
('466'),
('467'),
('480'),
('481'),
('482'),
('483'),
('484'),
('485'),
('486'),
('488'),
('489'),
('490'),
('492'),
('493'),
('494'),
('495'),
('496'),
('497'),
('498'),
('510'),
('511'),
('512'),
('513'),
('514'),
('515'),
('516'),
('517'),
('518'),
('519'),
('520'),
('521'),
('522'),
('523'),
('524'),
('525'),
('526'),
('53'),
('530'),
('531'),
('532'),
('533'),
('534'),
('535'),
('536'),
('537'),
('538'),
('539'),
('54'),
('540'),
('541'),
('542'),
('544'),
('545'),
('546'),
('547'),
('548'),
('549'),
('550'),
('551'),
('552'),
('553'),
('554'),
('555'),
('556'),
('580'),
('581'),
('582'),
('583'),
('584'),
('59'),
('600'),
('601'),
('603'),
('604'),
('605'),
('606'),
('61'),
('62'),
('79'),
('80'),
('86'),
('87'),
('88'),
('93'),
('95');

INSERT INTO `users` (`id`, `login`, `name`, `email`, `crypted_password`, `salt`, `created_at`, `updated_at`, `remember_token`, `remember_token_expires_at`, `active`) VALUES
(1, 'admin', 'Administrator', '', '8990b0c9972157680badd2c1436ed6d8f5bcb2eb', 'b5105fe3c7799af83f9009f2c03797652f76b245', SYSDATE(), SYSDATE(), NULL, NULL, 1);

INSERT INTO `widgets` (`id`, `dashboard_id`, `widget_key`, `name`, `description`, `column_index`, `row_index`, `configured`, `created_at`, `updated_at`, `resource_id`) VALUES
(1, 1, 'size', NULL, NULL, 1, 1, 1, SYSDATE(), SYSDATE(), NULL),
(2, 1, 'duplications', NULL, NULL, 1, 2, 1, SYSDATE(), SYSDATE(), NULL),
(3, 1, 'complexity', NULL, NULL, 1, 3, 1, SYSDATE(), SYSDATE(), NULL),
(4, 1, 'events', NULL, NULL, 1, 4, 1, SYSDATE(), SYSDATE(), NULL),
(5, 1, 'description', NULL, NULL, 1, 5, 1, SYSDATE(), SYSDATE(), NULL),
(6, 1, 'debt_overview', NULL, NULL, 2, 1, 1, SYSDATE(), SYSDATE(), NULL),
(7, 1, 'rules', NULL, NULL, 2, 2, 1, SYSDATE(), SYSDATE(), NULL),
(8, 1, 'alerts', NULL, NULL, 2, 3, 1, SYSDATE(), SYSDATE(), NULL),
(9, 1, 'file_design', NULL, NULL, 2, 4, 1, SYSDATE(), SYSDATE(), NULL),
(10, 1, 'code_coverage', NULL, NULL, 2, 5, 1, SYSDATE(), SYSDATE(), NULL),
(11, 2, 'unresolved_issues_statuses', NULL, NULL, 1, 1, 1, SYSDATE(), SYSDATE(), NULL),
(12, 2, 'action_plans', NULL, NULL, 1, 2, 1, SYSDATE(), SYSDATE(), NULL),
(13, 2, 'reviews_per_developer', NULL, NULL, 2, 1, 1, SYSDATE(), SYSDATE(), NULL),
(14, 2, 'my_reviews', NULL, NULL, 2, 2, 1, SYSDATE(), SYSDATE(), NULL),
(15, 2, 'false_positive_reviews', NULL, NULL, 2, 3, 1, SYSDATE(), SYSDATE(), NULL),
(16, 3, 'timeline', NULL, NULL, 1, 1, 1, SYSDATE(), SYSDATE(), NULL),
(17, 3, 'time_machine', NULL, NULL, 1, 2, 1, SYSDATE(), SYSDATE(), NULL),
(18, 3, 'time_machine', NULL, NULL, 1, 3, 1, SYSDATE(), SYSDATE(), NULL),
(19, 3, 'time_machine', NULL, NULL, 1, 4, 1, SYSDATE(), SYSDATE(), NULL),
(20, 3, 'time_machine', NULL, NULL, 2, 1, 1, SYSDATE(), SYSDATE(), NULL),
(21, 3, 'time_machine', NULL, NULL, 2, 2, 1, SYSDATE(), SYSDATE(), NULL),
(22, 3, 'time_machine', NULL, NULL, 2, 3, 1, SYSDATE(), SYSDATE(), NULL),
(23, 4, 'welcome', NULL, NULL, 1, 1, 1, SYSDATE(), SYSDATE(), NULL),
(24, 4, 'measure_filter_list', NULL, NULL, 1, 2, 1, SYSDATE(), SYSDATE(), NULL),
(25, 4, 'measure_filter_list', NULL, NULL, 2, 1, 1, SYSDATE(), SYSDATE(), NULL),
(26, 4, 'measure_filter_treemap', NULL, NULL, 2, 2, 1, SYSDATE(), SYSDATE(), NULL);

INSERT INTO `widget_properties` (`id`, `widget_id`, `kee`, `text_value`) VALUES
(1, 16, 'metric2', 'sqale_index'),
(2, 16, 'metric3', 'coverage'),
(3, 16, 'metric1', 'complexity'),
(4, 17, 'metric2', 'lines'),
(5, 17, 'metric3', 'statements'),
(6, 17, 'metric1', 'ncloc'),
(7, 17, 'metric6', 'functions'),
(8, 17, 'metric7', 'accessors'),
(9, 17, 'metric4', 'files'),
(10, 17, 'metric5', 'classes'),
(11, 17, 'displaySparkLine', 'true'),
(12, 18, 'metric2', 'comment_lines'),
(13, 18, 'metric3', 'public_documented_api_density'),
(14, 18, 'metric1', 'comment_lines_density'),
(15, 18, 'metric4', 'public_undocumented_api'),
(16, 18, 'displaySparkLine', 'true'),
(17, 19, 'metric2', 'duplicated_lines'),
(18, 19, 'metric3', 'duplicated_blocks'),
(19, 19, 'metric1', 'duplicated_lines_density'),
(20, 19, 'metric4', 'duplicated_files'),
(21, 19, 'displaySparkLine', 'true'),
(22, 20, 'metric2', 'blocker_violations'),
(23, 20, 'metric3', 'critical_violations'),
(24, 20, 'metric1', 'violations'),
(25, 20, 'metric6', 'info_violations'),
(26, 20, 'metric7', 'sqale_index'),
(27, 20, 'metric4', 'major_violations'),
(28, 20, 'metric5', 'minor_violations'),
(29, 20, 'displaySparkLine', 'true'),
(30, 21, 'metric2', 'function_complexity'),
(31, 21, 'metric3', 'class_complexity'),
(32, 21, 'metric1', 'complexity'),
(33, 21, 'metric4', 'file_complexity'),
(34, 21, 'displaySparkLine', 'true'),
(35, 22, 'metric2', 'line_coverage'),
(36, 22, 'metric3', 'branch_coverage'),
(37, 22, 'metric1', 'coverage'),
(38, 22, 'metric6', 'test_errors'),
(39, 22, 'metric7', 'tests'),
(40, 22, 'metric4', 'test_success_density'),
(41, 22, 'metric5', 'test_failures'),
(42, 22, 'displaySparkLine', 'true'),
(43, 22, 'metric8', 'test_execution_time'),
(44, 24, 'pageSize', '50'),
(45, 24, 'filter', '2'),
(46, 25, 'pageSize', '20'),
(47, 25, 'filter', '1'),
(48, 26, 'colorMetric', 'coverage'),
(49, 26, 'sizeMetric', 'ncloc'),
(50, 26, 'filter', '1');
